{"c57eda197fc0f59626daeed577646165":{"_cs":"1b0ee08fea253485cdf28eda77182ca1","text":"<p>Example configuration in <code>Configuration\/TypoScript\/setup.txt<\/code><\/p>\n\t\t\t\t<p><b>Import \/ Include<\/b><\/p>\n<pre data-src=\"setup.txt\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-typoscript\">\/\/ Typo3> 9\n@import 'EXT:[ext-lower]\/Configuration\/TypoScript\/extensions\/[field-lower].setup'\n@import 'EXT:[ext-lower]\/Configuration\/TypoScript\/extensions\/*.setup'\n@import 'EXT:[ext-lower]\/Resources\/Private\/Templates\/**\/*.setup'<\/code><\/pre>\n\n<p><b>PAGE template<\/b><\/p>\n<pre data-src=\"setup.txt\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-typoscript\">page = PAGE\npage {\n\ttypeNum = 0\n\n\t# Please do not include Typo3 comments in the source code!\n\tconfig {\n\t\theaderComment >\n\t\tdisablePrefixComment = 1\n\t}\n\n\t# favicon\n\tshortcutIcon = EXT:[ext-lower]\/Resources\/Public\/Images\/favicon.ico\n}\n\npage.10 = FLUIDTEMPLATE\npage.10 {\n\n\tpartialRootPaths {\n\t\t10 = EXT:[ext-lower]\/Resources\/Private\/Partials\/\n\t}\n\tlayoutRootPaths {\n\t\t10 = EXT:[ext-lower]\/Resources\/Private\/Layouts\/\n\t}\n\ttemplateRootPaths {\n\t\t10 = EXT:[ext-lower]\/Resources\/Private\/Templates\/\n\t}\n\t\n\t# Depends on the selected template in the page properties: Toggle fluid template\n\tfile.stdWrap.cObject = CASE\n\tfile.stdWrap.cObject {\n\t\tkey.field = backend_layout\n\t\tkey.ifEmpty.data = levelfield:-2, backend_layout_next_level, slide\n\t\t\n\t\tdefault = TEXT\n\t\tdefault.value = EXT:[ext-lower]\/Resources\/Private\/Templates\/Default\/Index.html\n\t\t\n\t\tpagets__home = TEXT\n\t\tpagets__home.value = EXT:[ext-lower]\/Resources\/Private\/Templates\/Home\/Index.html\n\t}\n\n\tvariables {\n\t\t[field-lower] = TEXT\n\t\t[field-lower].value = sample text\n\n\t\t# Goes also directly via ViewHelper -- see \"nnt3:content.column()\"\n\t\tcontent_10 < styles.content.get\n\t\tcontent_10.select.where = colPos = 10\n\n\t\t# Also goes directly via ViewHelper -- see \"nnt3:content.column()\"\n\t\tcontent_20 < styles.content.get\n\t\tcontent_20.select.where = colPos = 20\n\t}\n}<\/code><\/pre>"},"c25835f4af0068bdb364f1c6f084ce0b":{"_cs":"41125e6c63903e1cd79d3f5dc3c541cc","text":"<p>Example of a configuration in <code>Configuration\/TypoScript\/page.txt<\/code><\/p>\n\t\t\t\t<p>\n\t<b>Backend layout<\/b><br>\n\tUsed in CASE of TS Setup as <code>page.10.file.stdWrap.cObject.pagets__home<\/code>\n<\/p>\n<pre data-src=\"page.txt\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-tsconfig\">mod.web_layout.BackendLayouts {\n\thome {\n\t\ttitle = home\n\t\tconfig {\n\t\t\tbackend_layout {\n\t\t\t\tcolCount = 1\n\t\t\t\trowCount = 2\n\t\t\t\trows {\n\t\t\t\t\t1 {\n\t\t\t\t\t\tcolumns {\n\t\t\t\t\t\t\t1 {\n\t\t\t\t\t\t\t\tname = banner image\n\t\t\t\t\t\t\t\tcolPos = 10\n\t\t\t\t\t\t\t\tmaxitems = 1\n\t\t\t\t\t\t\t\tallowed {\n\t\t\t\t\t\t\t\t\ttx_gridelements_backend_layout = slickslider\n\t\t\t\t\t\t\t\t\tCType = gridelements_pi1,mask_slicksliderone\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t2 {\n\t\t\t\t\t\tcolumns {\n\t\t\t\t\t\t\t1 {\n\t\t\t\t\t\t\t\tname = contents\n\t\t\t\t\t\t\t\tcolPos = 20\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\ticon = EXT:[ext-lower]\/Resources\/Public\/Icons\/template-home.png\n\t}\n}<\/code><\/pre>\n\n<p>\n\t<b>Defining headline types<\/b>\n<\/p>\n<pre data-src=\"page.txt\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-tsconfig\"># Headline types.\nTCEFORM.tt_content.header_layout {\n\taltLabels {\n\t\t1 = Very large (h1)\n\t\t2 = Large (h2)\n\t\t3 = Medium (h3)\n\t\t4 = Small (h4)\n\t\t5 = Very small (h5)\n\t}\n\taddItems {\n\t\t11 = Gigantic (h1)\n\t}\n}<\/code><\/pre>\n\n<p>\n\t<b>No (copy) suffix to copied elements<\/b>\n<\/p>\n<pre data-src=\"page.txt\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-tsconfig\"># No (copy) suffix to clones\nTCEMAIN.table.pages {\n\tdisablePrependAtCopy = 1\n\tdisableHideAtCopy = 1\n}\n\nTCEMAIN.table.tt_content {\n\tdisablePrependAtCopy = 1\n\tdisableHideAtCopy = 1\n}<\/code><\/pre>\n\n<p>\n\t<b>HideTCA fields<\/b>\n<\/p>\n<pre data-src=\"page.txt\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-tsconfig\"># Hide TCA fields in the backend.\nTCEFORM.pages {\n\tsubtitle.disabled = 1\n\tauthor.disabled = 1\n\tauthor_email.disabled = 1\n\tcache_tags.disabled = 1\n\tmedia.disabled = 1\n\tcategories.disabled = 1\n}\n\nTCEFORM.tt_content {\n\tdate.disabled = 1\n\teditlock.disabled = 1\n\tcategories.disabled = 1\n\trowDescription.disabled = 1\n\tlinkToTop.disabled = 1\n\tsectionIndex.disabled = 1\n}<\/code><\/pre>"},"aa8452b98590a67f7d7ef0142f4f70ca":{"_cs":"6bfc277f4dc18bcc6dae515eeb562280","text":"<p>Example of a configuration in <code>typo3conf\/sites\/webseite.de\/config.yaml<\/code><\/p>\n\t\t\t\t<p>\n\t<b>Base URL and entry point variants for staging server<\/b>\n<\/p>\n<pre data-src=\"config.yaml\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-yaml\">base: 'https:\/\/www.webseite.de\/'\n  # Variants of the entry point. Can also be changed in the backend via UI.\n  baseVariants:\n    -\n    base: 'https:\/\/website.99grad.dev\/'\n    condition: 'applicationContext == \"Development\"'<\/code><\/pre>\n\n<p>\n\t<b>Automatic redirects when changing the slug of a page<\/b><br>\n\tPrevents automatic creation of redirects in the \"Redirects\" page module.\n<\/p>\n<pre data-src=\"config.yaml\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-yaml\">settings:\n  redirects:\n    autoUpdateSlugs: false\n    autoCreateRedirects: false<\/code><\/pre>"},"54533d435f5b12e7ff54cc65cdb0171b":{"_cs":"fb3dba380cb8d77f0438f2678928398d","text":"<p>Example of a configuration in <code>typo3conf\/sites\/webseite.de\/config.yaml<\/code><\/p>\n\t\t\t\t<h4>Standard RouteEnhancer<\/h4>\n<p>Configuration in yaml<\/p>\n<pre data-src=\"config.yaml\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-yaml\">routeEnhancers:\n\n  # mapping of page typeNum = 0 and = 9818 to suffix.\n  PageTypeSuffix:\n    type: PageType\n    default: '\/'\n    index: ''\n    map:\n      '\/': 0\n      .html: 0\n      feed.rss: 9818\n  \n  # EXT:news RouteEnhancer\n  NewsPlugin:\n    type: Extbase\n\t# Specify all pages with a news SingleView\n    limitToPages:\n      - 192\n      - 241\n    extension: News\n    plugin: Pi1\n    routes:\n      -\n        routePath: '\/'\n        _controller: 'News::detail'\n        _arguments:\n          news_title: news\n    defaultController: 'News::detail'\n    aspects:\n      news_title:\n        type: PersistedAliasMapper\n        tableName: tx_news_domain_model_news\n        routeFieldName: path_segment\n  \n  # Example: Simple RouteEnhancer\n  NnfiletransferTransferUid:\n    type: Simple\n    routePath: '\/f\/'\n    requirements:\n      transfer_uid: '([0-9]*)(\\.)([0-9a-zA-Z]*)'\n    _arguments:\n      f: transfer_uid\n\n  # Example: More complex RouteEnhancer\n  NnpeoplePlugin:\n\t  type: Extbase\n\t  limitToPages:\n\t\t- 103\n\t  extension: Nnpeople\n\t  plugin: People\n\t  routes:\n\t\t-\n\t\t  routePath: '\/'\n\t\t  _controller: 'People::show'\n\t\t  _arguments:\n\t\t\tuid: person\n\t  defaultController: 'People::show'\n\t  defaults:\n\t\tuid: '0'\n\t  aspects:\n\t\tuid:\n\t\t  type: PersistedPatternMapper\n\t\t  tableName: tx_nnpeople_domain_model_people\n\t\t  routeFieldPattern: '^(?P<lastname>.+);(?P<firstname>.+);(?P<uid>\\d+)$'\n\t\t  routeFieldResult: ';;'<\/code><\/pre>\n\n<h4 class=\"mt-4\">Own RouteEnhancer<\/h4>\n<p>Configuration in yaml<\/p>\n<pre data-src=\"config.yaml\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-yaml\">routeEnhancers:\n  [ext-ucc]Plugin:\n    limitToPages:\n      - 327\n    type: Extbase\n    extension: [ext-ucc]\n    plugin: [ext-ucc]\n    routes:\n      -\n        routePath: '\/'\n        _controller: 'Main::single'\n        _arguments:\n          identifier: identifier\n    defaultController: 'Main::list'\n    defaults:\n      identifier: '0'\n    aspects:\n      identifier:\n        type: [ext-ucc]Enhancer<\/code><\/pre>\n\n<p>Registering the RouteEnhancer in <code>ext_localconf.php<\/code><\/p>\n<pre><code class=\"language-php\">if (class_exists(\\TYPO3\\CMS\\Core\\Routing\\Aspect\\PersistedPatternMapper::class)) {\n\t$GLOBALS['TYPO3_CONF_VARS']['SYS']['routing']['aspects']['[ext-ucc]Enhancer'] = \\[vendor-ucc]\\[ext-ucc]\\Routing\\Typo3RouteEnhancer::class;\n}<\/code><\/pre>\n\n<p>The RouteEnhancers at <code>Classes\/Routing\/Typo3RouteEnhancer.php<\/code><\/p>\n<pre data-src=\"Typo3RouteEnhancer.php\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-php\">&lt;?php\n\n\tnamespace [vendor-ucc]\\[ext-ucc]\\Routing;\n\t\n\tuse [vendor-ucc]\\[ext-ucc]\\Domain\\Repository\\[model-ucc]Repository;\n\t\n\tuse TYPO3\\CMS\\Core\\Routing\\Aspect\\PersistedMappableAspectInterface;\n\tuse TYPO3\\CMS\\Core\\Routing\\Aspect\\StaticMappableAspectInterface;\n\tuse TYPO3\\CMS\\Core\\Routing\\RouteNotFoundException;\n\tuse TYPO3\\CMS\\Core\\Site\\SiteLanguageAwareTrait;\n\tuse TYPO3\\CMS\\Core\\Utility\\GeneralUtility;\n\tuse TYPO3\\CMS\\Core\\DataHandling\\SlugHelper;\n\t\n\t\/**\n\t * Info:\n\t * https:\/\/docs.typo3.org\/m\/typo3\/reference-coreapi\/master\/en-us\/ApiOverview\/Routing\/ExtendingRouting.html#writing-custom-enhancers\n\t *\/\n\tclass Typo3RouteEnhancer implements PersistedMappableAspectInterface, StaticMappableAspectInterface {\n\t\n\t\tuse SiteLanguageAwareTrait;\n\t\n\t\t\/**\n\t\t * Called by Typo3 RouteEnhancer.\n\t\t * Allows to generate a readable path via a custom method.\n\t\t *\n\t\t * @param string $value\n\t\t *\n\t\t * @return string|null\n\t\t *\/\n\t\tpublic function generate(string $value): ?string {\n\t\n\t\t\t\/\/ $value contains the uid of the entry.\n\t\t\t$[model-lower]Repository = \\nn\\t3::injectClass( [model-ucc]Repository::class );\n\t\t\t$[model-lower] = $[model-lower]Repository->findByUid( $value );\n\t\n\t\t\tif (!$[model-lower]) return $value;\n\t\n\t\t\t\/\/ get entry title and clean it up for URL path\n\t\t\t$slugHelper = GeneralUtility::makeInstance(SlugHelper::class, 'tx_[ext-lower]_domain_model_[model-lower]', 'uid', []);\n\t\t\t$title = $[model-lower]->getTitle();\n\t\t\t$speaking = $slugHelper->sanitize($title) . '-' . $value;\n\t\n\t\t\treturn $speaking;\n\t\t}\n\t\n\t\n\t\t\/**\n\t\t * @param string $value\n\t\t *\n\t\t * @throws \\Exception\n\t\t *\n\t\t * @return string|null\n\t\t *\/\n\t\tpublic function resolve(string $value): ?string {\n\t\n\t\t\t\/\/ $value contains the readable title, e.g. 'herr-bascom-123'. We only need the digits at the end\n\t\t\t$uid = preg_replace('\/(.*)-([0-9\\.]*)\/i', '\\2', $value);\n\t\n\t\t\t\/\/ Contains only the uid '2019091990'. Can be used in the [model-ucc] repository in getUid().\n\t\t\treturn $uid;\n\t\t}\n\t}<\/code><\/pre>"},"1e80b0c09be12a6ede0a2baaf2ae378a":{"_cs":"c3d867964fad40009378153f99364f1c","text":"<p>Example of a configuration in the <code>ext_localconf.php<\/code> of an extension.<\/p>\n\t\t\t\t<pre data-src=\"ext_localconf.php\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-php\">&lt;?php\n\ndefined('TYPO3') or die();\n\ncall_user_func(\n    function( $extKey )\n    {\n        \/\/ (!!!) Important: In the ext_emconf.php AND composer.json specify the dependency to nnhelpers!\n\n        \/\/ Register a plugin.\n        \\nn\\t3::Registry()->configurePlugin( '[vendor-ucc]\\[ext-ucc]', '[ext-lower]',\n            [\\[vendor-ucc]\\[ext-ucc]\\Controller\\MainController::class => 'show'],\n            [\\[vendor-ucc]\\[ext-ucc]\\Controller\\MainController::class => '']\n        );\n        \n        \/\/ Register PageTsConfig\n\t\t\\nn\\t3::Registry()->addPageConfig('@import \"EXT:[ext-lower]\/Configuration\/TypoScript\/page.ts\"');\n\n        \/\/ Make a field of the table \"pages\" available for rootLine and slide functions\n        \\nn\\t3::Registry()->rootLineFields(['nng_navroot']);\n\n        \/\/ define global namespace for fluid view helper\n        \\nn\\t3::Registry()->fluidNamespace(['nng', 'nn'], '[vendor-ucc]\\[ext-ucc]\\ViewHelpers');\n\n        \/\/ Register a new renderType for FlexForm \/ TCA\n        $GLOBALS['TYPO3_CONF_VARS']['SYS']['formEngine']['nodeRegistry'][[tstamp]] = [\n            'nodeName' => '[ext-lower]IconCollection',\n            'priority' => '80'\n            'class' => '[vendor-ucc]\\[ext-ucc]\\Form\\IconCollectionElement::class,\n        ];\n\n        \/\/ Register your own RTE configuration\n        $GLOBALS['TYPO3_CONF_VARS']['RTE']['Presets']['rte_[ext-lower]'] = 'EXT:[ext-lower]\/Configuration\/RTE\/rte.yaml';\n    },\n'[ext-lower]');<\/code><\/pre>"},"53747bd73bfd789bced643d2f3a4f213":{"_cs":"09d11d7a2a2ba86a6f7bcb2dff35b6dd","text":"<p>Example of a configuration in the <code>ext_tables.php<\/code> of an extension.<\/p>\n\t\t\t\t<pre data-src=\"ext_tables.php\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-php\">&lt;?php\n\ndefined('TYPO3') or die();\n\ncall_user_func(\n    function( $extKey )\n    {\n\t\t\n\t\t\/\/ (!!!) Important: In the ext_emconf.php AND composer.json specify the dependency to nnhelpers!\n\t\t\n\t\t\\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::addLLrefForTCAdescr('tx_[ext-lower]_domain_model_[model-lower]', 'EXT:[ext-lower]\/Resources\/Private\/Language\/locallang.xlf');\n\t\t\\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::allowTableOnStandardPages('tx_[ext-lower]_domain_model_[model-lower]');\n\n\t\t\/\/ register icon\n\t\t\\nn\\t3::Registry()->icon('[ext-lower]-plugin', 'EXT:[ext-lower]\/Resources\/Public\/Icons\/wizicon.svg');\n\n\t\t\/\/ Register backend modules\n\t\t\\TYPO3\\CMS\\Extbase\\Utility\\ExtensionUtility::registerModule(\n\t\t\t\\nn\\t3::Registry()->getVendorExtensionName($extKey),\n\t\t\t'web',\n\t\t\t'mod1',\n\t\t\t'',\n\t\t\t\\nn\\t3::Registry()->parseControllerActions([\n\t\t\t\t\\[vendor-ucc]\\[ext-ucc]\\Controller\\ModController::class => 'index,show',\n\t\t\t]),\n\t\t\t[\n\t\t\t\t'access' => 'user,group',\n\t\t\t\t'icon' => 'EXT:[ext-lower]\/Resources\/Public\/Icons\/wizicon.svg',\n\t\t\t\t'labels' => 'LLL:EXT:[ext-lower]\/Resources\/Private\/Language\/locallang_mod1.xml',\n\t\t\t\t'navigationComponentId' => '',\n\t\t\t\t'inheritNavigationComponentFromMainModule' => false,\n\t\t\t]\n\t\t);\n\n\t},\n'[ext-lower]');<\/code><\/pre>"},"6ee9215c39c3b07357e4bffee5573827":{"_cs":"08d0c3886d3ccea02e8f7685b9196d3e","text":"<p>Example of Extension Manager configuratio under <code>ext_conf_template.txt<\/code> of an extension.<\/p>\n\t\t\t\t\n<p class=\"d-flex\">\n\t<b>Various types<\/b>\n\t<a href=\"https:\/\/bit.ly\/3hSZfbh\" class=\"ml-auto\" target=\"_blank\"><i class=\"fab fa-typo3 mr-2\"><\/i> Go to Typo3 documentation<\/a>\n<\/p>\n<pre data-src=\"ext_conf_template.txt\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-typoscript\"># cat=Basic; type=string; label=A simple input field.\nmyString = A text\n\n# cat=Basic; type=boolean; label=A checkbox\nmyCheckbox = 0\n\t\t\n# cat=Basic; type=options[label1=value1,label2]; label=MySelectBox\nmySelectValue = 1\n\n# cat=Template; type=user[[vendor-ucc]\\[ext-ucc]\\Form[model-ucc]Element->[field-lower]]; label=A custom rendering\nmyCustomThing = ...<\/code><\/pre>\n\n<br>\n<p>\n\tCustom rendering:\n<\/p>\n<pre data-src=\"[model-ucc]Element.php\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-php\">&lt;?php\n\nnamespace [vendor-ucc]\\[ext-ucc]\\Form;\n\nclass [model-ucc]element {\n\n\t\/**\n\t * @return string\n\t *\/\n\tpublic function [field-lower]( $conf = [] ) {\n\t\treturn \"<textarea style=\\\"min-height:100px\\\" name=\\\"{$conf['fieldName']}\\\" class=\\\"form-control\\\">{$conf['fieldValue']}<\/textarea>\";\n\t}\n\n}<\/code><\/pre>"},"749c67a80bf27809f2d23bed69545670":{"_cs":"03b73a59bd2f073a01ca60666bfb17fd","text":"<p>Example of a database configuration in the <code>ext_tables.sql<\/code> of an extension.<\/p>\n\t\t\t\t<p><b>Create a new table for your own extension<\/b><\/p>\n<pre data-src=\"ext_tables.sql\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-sql\">#\n# Table structure for table 'tx_[ext-lower]_domain_model_[model-lower]'\n#\nCREATE TABLE tx_[ext-lower]_domain_model_[model-lower] (\n\n\tuid int(11) NOT NULL auto_increment,\n\tpid int(11) DEFAULT '0' NOT NULL,\n\n\ttitle text NOT NULL,\n\tmedia int(11) unsigned NOT NULL default '0',\n\n\ttstamp int(11) unsigned DEFAULT '0' NOT NULL,\n\tcrdate int(11) unsigned DEFAULT '0' NOT NULL,\n\tcruser_id int(11) unsigned DEFAULT '0' NOT NULL,\n\tdeleted tinyint(4) unsigned DEFAULT '0' NOT NULL,\n\thidden tinyint(4) unsigned DEFAULT '0' NOT NULL,\n\tstarttime int(11) unsigned DEFAULT '0' NOT NULL,\n\tendtime int(11) unsigned DEFAULT '0' NOT NULL,\n\n\tt3ver_oid int(11) DEFAULT '0' NOT NULL,\n\tt3ver_id int(11) DEFAULT '0' NOT NULL,\n\tt3ver_wsid int(11) DEFAULT '0' NOT NULL,\n\tt3ver_label varchar(255) DEFAULT '' NOT NULL,\n\tt3ver_state tinyint(4) DEFAULT '0' NOT NULL,\n\tt3ver_stage int(11) DEFAULT '0' NOT NULL,\n\tt3ver_count int(11) DEFAULT '0' NOT NULL,\n\tt3ver_tstamp int(11) DEFAULT '0' NOT NULL,\n\tt3ver_move_id int(11) DEFAULT '0' NOT NULL,\n\n\tt3_origuid int(11) DEFAULT '0' NOT NULL,\n\tsys_language_uid int(11) DEFAULT '0' NOT NULL,\n\tl10n_parent int(11) DEFAULT '0' NOT NULL,\n\tl10n_diffsource mediumblob,\n\n\tPRIMARY KEY (uid),\n\tKEY parent (pid),\n\tKEY t3ver_oid (t3ver_oid,t3ver_wsid),\n\tKEY language (l10n_parent,sys_language_uid).\n);<\/code><\/pre>\n\n<p><b>Add field to existing table<\/b><\/p>\n<pre data-src=\"setup.txt\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-sql\">#\n# Table structure for table 'tx_[ext-lower]_domain_model_[model-lower]'\n#\nCREATE TABLE tx_[ext-lower]_domain_model_[model-lower] (\n\ttitle text NOT NULL\n);<\/code><\/pre>"},"25abc5d6bbba696dfdc3993b2dc1bc12":{"_cs":"dee055523fdec7e2696f428c8b184a47","text":"<p>Example of a TS template configuration in the <code>Configuration\/TCA\/Overrides\/sys_template.php<\/code> of an extension.<\/p><pre data-src=\"sys_template.php\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-php\">&lt;?php\n\ndefined('TYPO3') or die();\n\n\\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::addStaticFile('[ext-lower]', 'Configuration\/TypoScript', 'TypoScript Configuration for [ext-lower]');\n<\/code><\/pre>"},"da8850ee0023ae3c7c14433a505a9e50":{"_cs":"e7603f30341f8e044a7e06ce2b2cd3e2","text":"<p>Example of a configuration in <code>Configuration\/TypoScript\/setup.txt<\/code><\/p>\n\t\t\t\t<pre data-src=\"setup.txt\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-typoscript\"># Setup for ALL plugins of this extension\nplugin.tx_[ext-lower] {\n\t\/\/...\n}\n\n# setup specifically for the plugin '[ext-lower]'.\nplugin.tx_[ext-lower]_[ext-lower] {\n\tsettings {\n\t}\n\t\n\tpersistence {\n\t\tstoragePid = 109\n\t}\n\t\n\tmvc {\n\t\tcallDefaultActionIfActionCantBeResolved = 1\n\t}\n\t\n\tfeatures {\n\t\tskipDefaultArguments = 1\n\t}\n\t\n\tview {\n\t\ttemplateRootPaths {\n\t\t\t10 = EXT:[ext-lower]\/Resources\/Private\/Templates\/\n\t\t}\n\t\tpartialRootPaths {\n\t\t\t10 = EXT:[ext-lower]\/Resources\/Private\/Partials\/\n\t\t}\n\t\tlayoutRootPaths {\n\t\t\t10 = EXT:[ext-lower]\/Resources\/Private\/Layouts\/\n\t\t}\n\t}\n}<\/code><\/pre>"},"fcd0d1d0c1652d08d998b37a90691419":{"_cs":"dcd7496e36477e7e77b519646f0dfc95","text":"<p>\n\t\t\t\t\tBoilerplate for the TCA of a database table.<br>\n\t\t\t\t\tLocated in <code>Configuration\/TCA\/tx_[ext-lower]_domain_model_[model-lower].php<\/code> of an extension.\n\t\t\t\t<\/p>\n\t\t\t\t<article>\n\t<pre data-src=\"tx_[ext-lower]_domain_model_[model-lower].php\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-php\"><?php\n\n\tdefined('TYPO3') or die();\n\n\treturn [\n\t\t'ctrl' => [\n\t\t\t'title' => 'LLL:EXT:[ext-lower]\/Resources\/Private\/Language\/locallang_db.xlf:tx_[ext-lower]_domain_model_[model-lower]',\n\t\t\t'label' => 'title',\n\t\t\t'enablecolumns' => [],\n\t\t\t\/\/'hideTable' => true,\n\t\t\t'searchFields' => ''\n\t\t\t'tstamp' => 'tstamp',\n            'crdate' => 'crdate',\n            'cruser_id' => 'cruser_id',\n            'dividers2tabs' => TRUE,\n            'languageField' => 'sys_language_uid',\n            'transOrigPointerField' => 'l18n_parent',\n            'transOrigDiffSourceField' => 'l18n_diffsource',\n            'delete' => 'deleted',\n            'iconfile' => 'EXT:[ext-lower]\/Resources\/Public\/Icons\/Extension.svg'\n\t\t],\n\n\t\t'interface' => [],\n\t\t\n\t\t'types' => [\n\t\t\t'0' => ['showitem' => '\n\t\t\t\t--div--;general,\n\t\t\t\t\t--palette--;;1,\n\t\t\t\t\tsys_language_uid,l10n_parent,l10n_diffsource,\n\t\t\t\t\ttitle,\n\t\t\t\t--div--;access,\n\t\t\t\t\t--palette--;;2\n\t\t\t'],\n\t\t],\n\n\t\t'palettes' => [\n\t\t\t'1' => ['showitem' => ''],\n\t\t\t'2' => ['showitem' => 'hidden, starttime, endtime,--linebreak--, fe_group'],\n\t\t],\n\t\t\n\t\t'columns' => \\nn\\t3::TCA()->createConfig(\n            'tx_[ext-lower]_domain_model_[model-lower]',\n\t\t\t\/\/ true results: ['sys_language_uid', 'l10n_parent', 'l10n_source', 'l10n_diffsource', 'hidden', 'cruser_id', 'pid', 'crdate', 'tstamp', 'sorting', 'starttime', 'endtime', 'fe_group'],\n\t\t\ttrue\n            [\n\t\t\t\t\/\/ Insert TCA definitions here.\n\t\t\t]\n\t\t),\n\t];<\/code><\/pre>\n<\/article>\n\n<article>\n<p>\n\t<b>input<\/b> - Simple input field.\n<\/p>\n<pre><code class=\"language-php\">'[field-lower]' => [\n\t'exclude' => 1,\n\t'label' => 'input-field'\n\t'config' => [\n\t\t'type' => 'input',\n\t\t'default' => '0'\n\t]\n],<\/code><\/pre>\n<\/article>\n\n\n<article>\n\t<p>\n\t\t<b>RTE<\/b> - Rich Text Editor (ckeditor).\n\t<\/p>\n\t<pre><code class=\"language-php\">'[field-lower]' => [\n\t'exclude' => 1,\n\t'label' => 'text'\n\t'config' => \\nn\\t3::TCA()->getRteTCAConfig(),\n],<\/code><\/pre>\n<\/article>\n\n<article>\n\t<p>\n\t\t<b>FAL<\/b> - File Abstract Layer \/ Media Element.\n\t<\/p>\n\t<pre><code class=\"language-php\">'[field-lower]' => [\n\t'exclude' => 1,\n\t'label' => 'images'\n\t'config' => \\nn\\t3::TCA()->getFileFieldTCAConfig('[field-lower]', ['maxitems'=>1]),\n],<\/code><\/pre>\n<\/article>\n\n\n<article>\n\t<p>\n\t\t<b>ColorPicker<\/b> - color field\n\t<\/p>\n\t<pre><code class=\"language-php\">'[field-lower]' => [\n\t'exclude' => 1,\n\t'label' => 'color'\n\t'config' => \\nn\\t3::TCA()->getColorPickerTCAConfig(),\n],<\/code><\/pre>\n<\/article>\n\n<article>\n\t<p>\n\t\t<b>Country<\/b> - Country selection.\n\t<\/p>\n\t<pre><code class=\"language-php\">'[field-lower]' => [\n\t'exclude' => 1,\n\t'label' => 'country',\n\t'config' => [\n\t\t'type' => 'select'\n\t\t'renderType' => 'selectSingle',\n\t\t'itemsProcFunc' => 'nn\\t3\\Flexform->insertCountries',\n\t\t'insertEmpty' => true,\n\t],\n],<\/code><\/pre>\n<\/article>\n\n<article>\n\t<p>\n\t\t<b>Checkbox<\/b> - with ONE option.\n\t<\/p>\n\t<pre><code class=\"language-php\">'[field-lower]' => [\n\t'exclude' => 1,\n\t'label' => 'Yes or No?\n\t'config' => [\n\t\t'type' => 'check'\n\t\t'renderType' => 'checkboxToggle',\n\t\t'default' => '0'\n\t]\n],<\/code><\/pre>\n<\/article>\n\n<article>\n\t<p>\n\t\t<b>Checkbox<\/b> - with multiple options.\n\t<\/p>\n\t<pre><code class=\"language-php\">'[field-lower]' => [\n\t'exclude' => 1,\n\t'label' => 'Yes or No?\n\t'config' => [\n\t\t'type' => 'check',\n\t\t\/\/ nicer checkbox, as of Typo3 9\n\t\t\/\/ 'renderType' => 'checkboxToggle',\n\t\t'default' => '0',\n\t\t'items' => [\n\t\t\t\/\/ label, value\n\t\t\t['label 1', '1'],\n\t\t\t['label 2', '2'],\n\t\t]\n\t]\n],<\/code><\/pre>\n<\/article>\n\n\n<article>\n\t<p>\n\t\t<b>Select<\/b> - with multiple options that can be defined in the pageConfigTS or TypoScript setup.\n\t<\/p>\n\t<pre><code class=\"language-php\">'[field-lower]' => [\n\t'l10n_mode' => 'exclude',\n\t'label' => 'selection-field',\n\t'config' => [\n\t\t'type' => 'select'\n\t\t'renderType' => 'selectSingle',\n\t\t'itemsProcFunc' => 'nn\\t3\\Flexform->insertOptions',\n\t\t'insertEmpty' => true, \/\/ \"No selection\" possible?\n\t\t'pageconfigPath' => 'tx_[ext-lower].naviclass',\n\t\t\/\/ Alternatively:\n\t\t\/\/ 'typoscriptPath' => 'plugin.tx_[ext-lower].settings.templates',\n\t]\n],<\/code><\/pre>\n<\/article>\n\n\n<article>\n\t<p>\n\t\t<b>group<\/b> - relations to foreign table.\n\t<\/p>\n\t<pre><code class=\"language-php\">'[field-lower]' => [\n\t'exclude' => 1,\n\t'label' => 'An external record',\n\t'config' => [\n\t\t'type' => 'group'\n\t\t'internal_type' => 'db',\n\t\t'allowed' => 'tx_[ext-lower]_domain_model_entry',\n\t\t'foreign_table' => 'tx_[ext-lower]_domain_model_entry',\n\t\t'size' => 1,\n\t\t'minitems' => 0,\n\t\t'maxitems' => 1,\n\t],\n],<\/code><\/pre>\n<\/article>\n\n\n<article>\n\t<p>\n\t\t<b>date<\/b> - date field\n\t<\/p>\n\t<pre><code class=\"language-php\">'[field-lower]' => [\n\t'exclude' => 1,\n\t'label' => 'date'\n\t'config' => [\n\t\t'type' => 'input'\n\t\t'renderType' => 'inputDateTime',\n\t\t'size' => '8'\n\t\t'eval' => 'date',\n\t\t'default' => '0'\n\t\t'checkbox' => '0'\n\t]\n],<\/code><\/pre>\n<\/article>"},"5b538f617f5bee840898f7ee7dbc36dd":{"_cs":"faeda46c528ab6400e804623468e42d6","text":"<p>Example of a configuration in the <code>Configuration\/TCA\/Overrides\/tt_content.php<\/code> of an extension.<\/p>\n\t\t\t\t<pre data-src=\"tt_content.php\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-php\"><?php\n\n\/\/ (!!!) Important: In ext_emconf.php AND composer.json specify the dependency to nnhelpers!\n\n\/\/ from TYPO3 v10: register TCA group incl plugins and flexforms\n\\nn\\t3::Registry()->pluginGroup(\n    '[vendor-ucc]\\[ext-ucc]',\n    'LLL:EXT:zvoove\/Resources\/Private\/Language\/locallang_db.xlf:pi_group_name',\n    [\n        'list' => [\n            'title' => 'LLL:EXT:[ext-lower]\/Resources\/Private\/Language\/locallang_db.xlf:pi_list.name',\n            'icon' => 'EXT:[ext-lower]\/Resources\/Public\/Icons\/Extension.svg',\n            'flexform' => 'FILE:EXT:[ext-lower]\/Configuration\/FlexForm\/list.xml'\n        ],\n        'show' => [\n            'title' => 'LLL:EXT:[ext-lower]\/Resources\/Private\/Language\/locallang_db.xlf:pi_show.name',\n            'icon' => 'EXT:[ext-lower]\/Resources\/Public\/Icons\/Extension.svg',\n            'flexform' => 'FILE:EXT:[ext-lower]\/Configuration\/FlexForm\/show.xml'\n        ],\n    ]\n);\n\n\/\/ Register a plugin\n\\nn\\t3::Registry()->plugin( '[vendor-ucc]\\[ext-ucc]', '[ext-lower]', '[ext-ucc] ([ext-lower])', 'EXT:[ext-lower]\/Resources\/Public\/Icons\/wizicon.svg' );\n\n\/\/ Register FlexForm for a plugin\n\\nn\\t3::Registry()->flexform( '[vendor-ucc]\\[ext-ucc]', '[ext-lower]', 'FILE:EXT:[ext-lower]\/Configuration\/FlexForm\/flexform.xml' );\n\n\/\/ make headers (`tt_content.header`) multiline - by changing `type` to `text`.\n\\nn\\t3::TCA()->setContentConfig('header', 'text');\n\n\/\/ make page title (`pages.title`) multiline\n\\nn\\t3::TCA()->setPagesConfig('title', 'text');\n\n\/\/ (!!) Important: Don't forget dependencies to e.g. mask in ext_emconf.php\nif ($_GET['route'] != '\/module\/tools\/MaskMask') {\n\n    \/\/ Overwrite EXT:mask with own renderType\n    \\nn\\t3::TCA()->setContentConfig('tx_mask_iconcollection', [\n        'renderType' => '[ext-lower]IconCollection',\n        'iconconfig' => 'tx_[ext-lower].iconcollection',\n    ]);\n\n    \/\/ Insert FlexForm into field\n    if ($GLOBALS['TCA']['tt_content']['columns']['tx_mask_slideropt']) {\n        $GLOBALS['TCA']['tt_content']['columns']['tx_mask_slideropt']['config'] = \\nn\\t3::TCA()->insertFlexForm('FILE:EXT:[ext-lower]\/Configuration\/FlexForm\/slickslider_options.xml');\n    }\n    \n}\n\n\/\/ Register new fields\n$temporaryColumn = [\n\t'[ext-lower]_headercolor' => [\n\t\t'label' => 'color',\n\t\t'config' => [\n\t\t\t'type' => 'select'\n\t\t\t'renderType' => 'selectSingle',\n\t\t\t'insertEmpty' => true,\n\t\t\t'itemsProcFunc' => 'nn\\t3\\Flexform->insertOptions',\n\t\t\t'pageconfigPath' => 'tx_[ext-lower].headercolors',\n            \/\/'typoscriptPath' => 'plugin.tx_[ext-lower].settings.headercolors',\n\t\t\t'default' => '0'\n\t\t],\n\t],\n];\n\n\\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::addTCAcolumns(\n        'tt_content',\n        $temporaryColumn\n);\n\\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::addFieldsToPalette(\n        'tt_content',\n        'header',\n        '[ext-lower]_headercolor',\n        'after:header_layout'\n);\n\\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::addFieldsToPalette(\n        'tt_content',\n        'headers',\n        '[ext-lower]_headercolor',\n        'after:header_layout'\n);<\/code><\/pre>"},"6c4332b8c5ed708d611c12e8a84ddf06":{"_cs":"f41594c6e284f8b1ff15243790be3253","text":"<p>\n\t\t\t\t\tExample of the configurations in FlexForm at\n\t\t\t\t\t<code>Configuration\/FlexForm\/flexform.xml<\/code>\n\t\t\t\t<\/p>\n\t\t\t\t<article>\n<p>\n    <b>FlexForm Boilerplate<\/b>\n<\/p>\n<pre data-src=\"flexform.xml\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-xml\"><T3DataStructure>\n    <meta>\n        <langDisable>1<\/langDisable>\n    <\/meta>\n    <sheets>\n\n        <sDEF>\n            <ROOT>\n                <TCEforms>\n                    <sheetTitle>Settings<\/sheetTitle>\n                <\/TCEforms>\n                <type>array<\/type>\n                <el>\n                    <switchableControllerActions>\n                        <TCEforms>\n                            <label>what to display<\/label>\n                            <onChange>reload<\/onChange>\n                            <config>\n                                <type>select<\/type>\n                                <renderType>selectSingle<\/renderType>\n                                <items>\n                                    <numIndex index=\"0\">\n                                        <numIndex index=\"0\">list view (list)<\/numIndex>\n                                        <numIndex index=\"1\">[model-ucc]->list<\/numIndex>\n                                    <\/numIndex>\n                                    <numIndex index=\"1\">\n                                        <numIndex index=\"0\">Single view (show)<\/numIndex>\n                                        <numIndex index=\"1\">[model-ucc]->show<\/numIndex>\n                                    <\/numIndex>\n                                <\/items>\n                            <\/config>\n                        <\/TCEforms>\n                    <\/switchableControllerActions>\n\n                    <!-- here more elements of the first sheet -->\n\n                <\/el>\n            <\/ROOT>\n        <\/sDEF>\n\n        <sLIST>\n            <ROOT>\n                <TCEforms>\n                    <sheetTitle>List<\/sheetTitle>\n                    <displayCond>FIELD:sDEF.switchableControllerActions:=:Main->list<\/displayCond>\n                <\/TCEforms>\n                <type>array<\/type>\n                <el>\n                    <!-- here the elements of the second sheet -->\n                <\/el>\n            <\/ROOT>\n        <\/sLIST>\n    \n    <\/sheets>\n<\/T3DataStructure><\/code><\/pre>\n<\/article>\n\n<article>\n<p>\n    <b>Input<\/b>\n<\/p>\n<pre><code class=\"language-xml\"><[field-lower]>\n    <TCEforms>\n        <label>example input<\/label>\n        <config>\n            <type>input<\/type>\n            <size>5<\/size>\n            <default>4000<\/default>\n        <\/config>\n    <\/TCEforms>\n<\/[field-lower]><\/code><\/pre>\n<\/article>\n\n<article>\n<p>\n    <b>RTE (Rich Text Editor)<\/b>\n<\/p>\n<pre><code class=\"language-xml\"><[field-lower]>\n    <TCEforms>\n        <label>infotext<\/label>\n        <config>\n            <type>text<\/type>\n            <enableRichtext>1<\/enableRichtext>\n        <\/config>\n    <\/TCEforms>\n<\/[field-lower]><\/code><\/pre>\n<\/article>\n\n<article>\n<p>\n    <b>checkbox<\/b>\n<\/p>\n<pre><code class=\"language-xml\"><[field-lower]>\n    <TCEforms>\n        <label>example checkbox<\/label>\n        <config>\n            <type>check<\/type>\n            <default>0<\/default>\n        <\/config>\n    <\/TCEforms>\n<\/[field-lower]><\/code><\/pre>\n<\/article>\n\n<article>\n<p>\n    <b>Select<\/b>\n<\/p>\n<pre><code class=\"language-xml\"><[field-lower]>\n    <TCEforms>\n        <label>example select field<\/label>\n        <config>\n            <type>select<\/type>\n            <renderType>selectSingle<\/renderType>\n        <\/config>\n    <\/TCEforms>\n<\/[field-lower]><\/code><\/pre>\n<\/article>\n\n<article>\n<p>\n    <b>Select field<\/b> with values from pageTsConfig:\n<\/p>\n<pre><code class=\"language-xml\"><[field-lower]>\n    <TCEforms>\n        <label>example select field<\/label>\n        <config>\n            <type>select<\/type>\n            <renderType>selectSingle<\/renderType>\n            <itemsProcFunc>nn\\t3\\Flexform->insertOptions<\/itemsProcFunc>\n            <pageconfigPath>tx_[ext-lower].[field-lower]<\/pageconfigPath>\n            <!--typoscriptPath>tx_[ext-lower].[field-lower]<\/typoscriptPath-->\n            <insertEmpty>1<\/insertEmpty>\n        <\/config>\n    <\/TCEforms>\n<\/[field-lower]><\/code><\/pre>\n\n<p>The pageTsConfig to do this:<\/p>\n<pre><code class=\"language-typoscript\">tx_[ext-lower].[field-lower] {\n    10 = Example label\n    20 = Second example\n    30 = Third example\n}<\/code><\/pre>\n<\/article>"},"4437c84ecff3253dc8885c565192f46c":{"_cs":"dc89c6147096ea8f3b60da638e8ca730","text":"<p>Boilerplate for a database model.<br>\n\t\t\t\tLocated in <code>Classes\/Domain\/Model\/[model-ucc].php<\/code> of an extension.<\/p>\n\t\t\t\t<pre data-src=\"[model-ucc].php\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-php\"><?php\nnamespace [vendor-ucc]\\[ext-ucc]\\Domain\\Model;\n\nuse \\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference;\nuse \\TYPO3\\CMS\\Extbase\\DomainObject\\AbstractEntity;\n\nclass [model-ucc] extends AbstractEntity {\n\n\t\/**\n\t * A simple text field\n\t *\n\t * @var string\n\t *\/\n\tprotected $[field-lower-ucc] = '';\n\n\t\/**\n\t * A field with validator\n\t *\n\t * @var string\n\t * @TYPO3\\CMS\\Extbase\\Annotation\\Validate(\"NotEmpty\")\n\t *\/\n\tprotected $[field-lower-ucc] = '';\n\n\t\/**\n\t * FAL media items\n\t *\n\t * @TYPO3\\CMS\\Extbase\\Annotation\\ORM\\Lazy\n\t * @var \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<\\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference>\n\t *\/\n\tprotected $[field-lower-ucc];\n\n\t\/**\n\t * Initializes all \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage properties.\n\t * @return void\n\t *\/\n\tprotected function __construct() {\n\t\t$this->[field-lower-ucc] = new \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage();\n\t}\n\n\t\/**\n\t * FAL getter\n\t *\n\t * @return \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage\n\t *\/\n\tpublic function get[field-ucc]() {\n\t\treturn $this->[field-lower-ucc];\n\t}\n\n\t\/**\n\t * FAL setter\n\t *\n\t * @param \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage $falMedia\n\t * @return void\n\t *\/\n\tpublic function set[field-ucc](\\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage $[field-lower-ucc]) {\n\t\t$this->falMedia = $[field-lower-ucc];\n\t}\n\n\t\/**\n\t * Add FAL\n\t *\n\t * @param FileReference $[field-lower-ucc]\n\t *\/\n\tpublic function add[field-ucc](FileReference $[field-lower-ucc]) {\n\t\tif ($this->get[field-ucc]() === NULL) {\n\t\t\t$this->falMedia = new \\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage();\n\t\t}\n\t\t$this->falMedia->attach($[field-lower-ucc]);\n\t}\n\n}<\/code><\/pre>"},"c5f1d3b7485c713986967600ec1bdbc2":{"_cs":"86bf8dee8be30d6712a6f6c613e7f5e3","text":"<p>Boilerplate for a repository model.<br>\n\t\t\t\tLocated in <code>Classes\/Domain\/Repository\/[model-ucc]Repository.php<\/code> of an extension.<\/p>\n\t\t\t\t<pre data-src=\"[model-ucc]Repository.php\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-php\"><?php\nnamespace [vendor-ucc]\\[ext-ucc]\\Domain\\Repository;\n\nclass [model-ucc]Repository extends \\TYPO3\\CMS\\Extbase\\Persistence\\Repository {\n\n\tprotected $defaultOrderings = [\n\t\t'tstamp' => \\TYPO3\\CMS\\Extbase\\Persistence\\QueryInterface::ORDER_DESCENDING\n\t];\n\n}<\/code><\/pre>"},"14926557352b738ba595d964e10215cf":{"_cs":"457af3568844707246335970d133385c","text":"<p>Boilerplate for a ViewHelper at <code>Classes\/ViewHelpers\/[model-ucc]ViewHelper.php<\/code><\/p>\n\t\t\t\t<pre data-src=\"[model-ucc]ViewHelper.php\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-php\"><?php\n\nnamespace [vendor-ucc]\\[ext-ucc]\\ViewHelpers;\n\nuse Nng\\Nnhelpers\\ViewHelpers\\AbstractViewHelper;\nuse TYPO3Fluid\\Core\\Rendering\\RenderingContextInterface;\n\n\/**\n * [model-ucc]ViewHelper\n *\n * {namespace vh=[vendor-ucc]\\[ext-ucc]\\ViewHelpers}\n *\n * <vh:[model-lower] [field-lower]=\"...\" \/>\n * {vh:[model-lower]([field-lower]:'...')}\n *\n *\/\nclass [model-ucc]ViewHelper extends AbstractViewHelper {\n\n    \/**\n\t * @return void\n\t *\/\n\tpublic function initializeArguments() {\n\t\tparent::initializeArguments();\n    \t$this->registerArgument('[field-lower]', 'string', 'Return what?', false);\n\t}\n\t\n    \/**\n     * @return string\n     *\/\n    public static function renderStatic( array $arguments, \\Closure $renderChildrenClosure, RenderingContextInterface $renderingContext ) {\n\t\tforeach ($arguments as $k=>$v) {\n\t\t\t${$k} = $v;\n\t\t}\n\n\t\t\/\/ Example to get all current variables in the fluid template\n\t\t\/\/ $templateVars = \\nn\\t3::Template()->getVariables( $renderingContext );\n\n\t\tif (!$[field-lower]) $[field-lower] = $renderChildrenClosure();\n\t\treturn $[field-lower];\n    }\n    \n}<\/code><\/pre>"},"fa310dea4ecc2c39ce5aae52491a74c5":{"_cs":"53d9c8f6bde814049432a51eac13dabe","text":"<p>Boilerplate for a TagBasedViewHelper at <code>Classes\/ViewHelpers\/[model-ucc]ViewHelper.php<\/code><\/p>\n\t\t\t\t<pre data-src=\"[model-ucc]ViewHelper.php\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-php\"><?php\n\nnamespace [vendor-ucc]\\[ext-ucc]\\ViewHelpers;\n\nuse \\Nng\\Nnhelpers\\ViewHelpers\\AbstractTagBasedViewHelper;\n\n\/**\n * [model-ucc]ViewHelper\n *\n * {namespace vh=[vendor-ucc]\\[ext-ucc]\\ViewHelpers}\n *\n * <vh:[model-lower] [field-lower]=\"...\" \/>\n * {vh:[model-lower]([field-lower]:'...')}\n *\n *\/\nclass [model-ucc]ViewHelper extends AbstractTagBasedViewHelper {\n\n\tprotected $tagName = 'a';\n\n\tpublic function initializeArguments() {\n\t\tparent::initializeArguments();\n\t\t$this->registerArgument('[field-lower]', 'string', 'info', false);\n\t}\n\t\n\tpublic function render() {\n\n\t\t$args = ['item'];\n\t\tforeach ($args as $arg) ${$arg} = $this->arguments[$arg] ?: '';\n\n\t\t\/\/ Example to get all current variables in the fluid template\n\t\t\/\/ $templateVars = \\nn\\t3::Template()->getVariables( $this->renderingContext );\n\n\t\t$content = $this->renderChildren();\n\t\t$this->tag->setContent($content);\n\n\t\treturn $this->tag->render();\n\t}\n}<\/code><\/pre>"},"a47bae1ebeff067835cf701ef5426064":{"_cs":"2542101bc74e2f2a110490a20185f70f","text":"<p>\n\t\t\t\t\tGeneral method to extend the model of a foreign extension.\n\t\t\t\t<\/p>\n\t\t\t\t\n<p>\n\tIn <b>ext_localconf.php<\/b> register the proxy:\n<\/p>\n<pre><code class=\"language-php\">\\TYPO3\\CMS\\Core\\Utility\\GeneralUtility::makeInstance(\\TYPO3\\CMS\\Extbase\\Object\\Container\\Container::class)\n\t->registerImplementation(\\[ext-vendor-ucc]\\[ext-ext-ucc]\\Domain\\Model\\[model-ucc]::class, \\[vendor-ucc]\\[ext-ucc]\\Domain\\Model\\[model-ucc]::class);<\/code><\/pre>\n\n<br>\n<p>\n\tIn <b>Configuration\/Extbase\/Persistence\/Classes.php<\/b> map the classes:\n<\/p>\n<pre data-src=\"Classes.php\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-php\">&lt;?php\n\nreturn [\n\t\\[vendor-ucc]\\[ext-ucc]\\Domain\\Model\\[model-ucc]::class => [\n\t\t'tableName' => 'tx_[ext-ext-lower]_domain_model_[model-lower]',\n\t\t'recordType' => \\[ext-vendor-ucc]\\[ext-ext-ucc]\\Domain\\Model\\[model-ucc]::class,\n\t],\n];<\/code><\/pre>\n\n<br>\n<p>\n\tRegister in <b>ext_tables.sql<\/b> field in database:\n<\/p>\n<pre><code class=\"language-sql\">CREATE TABLE tx_[ext-ext-lower]_domain_model_[model-lower] (\n\t[field-lower] varchar(255) DEFAULT '' NOT NULL\n);<\/code><\/pre>\n\n<br>\n<p>\n\tRegister in <b>Configuration\/TCA\/Overrides\/tx_[ext-ext-lower]_domain_model_[model-lower].php<\/b> field in TCA:\n<\/p>\n<pre data-src=\"tx_[ext-ext-lower]_domain_model_[model-lower].php\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-php\">&lt;?php\ndefined('TYPO3') or die();\n\n$tmpColumns = [\n\t'[field-lower]' => [\n\t\t'exclude' => 1,\n\t\t'label' => 'title',\n\t\t'config' => [\n\t\t\t'type' => 'input'\n\t\t\t'size' => 15\n\t\t],\n\t]\n];\n\n\\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::addTCAcolumns(\n\t'tx_[ext-ext-lower]_domain_model_[model-lower]', $tmpColumns\n);\n\n\\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::addToAllTCAtypes(\n\t'tx_[ext-ext-lower]_domain_model_[model-lower]',\n\t'--linebreak--,' . join(',', array_keys($tmpColumns)),\n\t'',\n\t'after:title'\n);<\/code><\/pre>\n\n<br>\n<p>\n\tIn <b>Classes\/Domain\/Model\/[model-ucc].php<\/b> define model with getter \/ setter.\n<\/p>\n<pre data-src=\"[model-ucc].php\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-php\">&lt;?php\n\nnamespace [vendor-ucc]\\[ext-ucc]\\Domain\\Model;\n\nclass [model-ucc] extends \\[ext-vendor-ucc]\\[ext-ext-ucc]\\Domain\\Model\\[model-ucc] {\n\n\t\/**\n\t * @var string\n\t *\/\n\tprotected $[field-lower-ucc];\n\n\t\/**\n\t * @return string\n\t *\/\n\tpublic function get[field-ucc]() {\n\t\treturn $this->[field-lower-ucc];\n\t}\n\n\t\/**\n\t * @param string $[field-lower-ucc]\n\t *\/\n\tpublic function set[field-ucc]($[field-lower-ucc]) {\n\t\t$this->[field-lower-ucc] = $[field-lower-ucc];\n\t}\n}<\/code><\/pre>\n\n\n<br>\n<p>\n\t<b>Classes\/Domain\/Repository\/[model-ucc]Repository.php<\/b> Define repository (optional).\n<\/p>\n<pre data-src=\"[model-ucc]Repository.php\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-php\">&lt;?php\nnamespace [vendor-ucc]\\[ext-ucc]\\Domain\\Repository;\n\nclass [model-ucc]Repository extends \\[ext-vendor-ucc]\\[ext-ext-ucc]\\Domain\\Repository\\[model-ucc]Repository<\/code><\/pre>"},"9e5a64a3c5984f9597d83af0bcd3d2bb":{"_cs":"e89205ce5de625dcdacf3233142fcac2","text":"<p>\n\t\t\t\t\tNews uses its own proxy, which elegantly merges all extensions to the News model into a new model.<br>\n\t\t\t\t\tSee <a href=\"https:\/\/bit.ly\/3xUGrOo\">this link<\/a> for a detailed description.\n\t\t\t\t<\/p>\n\t\t\t\t\n<p>\n\tIn <b>ext_localconf.php<\/b> register the proxy:\n<\/p>\n<pre ><code class=\"language-php\">$GLOBALS['TYPO3_CONF_VARS']['EXT']['news']['classes']['Domain\/Model\/News'][] = '[ext-lower]';<\/code><\/pre>\n\n<br>\n<p>\n\tRegister in <b>ext_tables.sql<\/b> field in database:\n<\/p>\n<pre><code class=\"language-sql\">CREATE TABLE tx_news_domain_model_news (\n\t[field-lower] varchar(255) DEFAULT '' NOT NULL\n);<\/code><\/pre>\n\n<br>\n<p>\n\tRegister in <b>Configuration\/TCA\/Overrides\/tx_news_domain_model_news.php<\/b> field in TCA:\n<\/p>\n<pre data-src=\"tx_news_domain_model_news.php\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-php\"><?php\ndefined('TYPO3') or die();\n\n$tmpColumns = [\n\t'[field-lower]' => [\n\t\t'exclude' => 1,\n\t\t'label' => 'title',\n\t\t'config' => [\n\t\t\t'type' => 'input'\n\t\t\t'size' => 15\n\t\t],\n\t]\n];\n\n\\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::addTCAcolumns(\n\t'tx_news_domain_model_news', $tmpColumns\n);\n\n\\TYPO3\\CMS\\Core\\Utility\\ExtensionManagementUtility::addToAllTCAtypes(\n\t'tx_news_domain_model_news',\n\t'--linebreak--,' . join(',', array_keys($tmpColumns)),\n\t'',\n\t'after:title'\n);<\/code><\/pre>\n\n<br>\n<p>\n\tIn <b>Classes\/Domain\/Model\/News.php<\/b> define model with getter \/ setter.\n<\/p>\n<pre data-src=\"News.php\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-php\"><?php\n\nnamespace [vendor-ucc]\\[ext-ucc]\\Domain\\Model;\n\nclass News extends \\GeorgRinger\\News\\Domain\\Model\\News {\n\n\t\/**\n\t * @var string\n\t *\/\n\tprotected $[field-lower-ucc];\n\n\t\/**\n\t * @return string\n\t *\/\n\tpublic function get[field-ucc]() {\n\t\treturn $this->[field-lower-ucc];\n\t}\n\n\t\/**\n\t * @param string $[field-lower-ucc]\n\t *\/\n\tpublic function set[field-ucc]($[field-lower-ucc]) {\n\t\t$this->[field-lower-ucc] = $[field-lower-ucc];\n\t}\n}<\/code><\/pre>"},"e1e4d32147d8d7705c8987f0e7af8bd5":{"_cs":"457ebcec946cae09b7240b60854c27ee","text":"<p>Example of a configuration in <code>Configuration\/TypoScript\/setup.txt<\/code><\/p>\n\t\t\t\t<p>\n\t<b>Include JS \/ CSS only if specific layout is selected<\/b>\n<\/p>\n<pre><code class=\"language-typoscript\">lib.isMyLayout {\n\tvalue = pagets__nnfullscreen\n\tequals.data = levelfield:-1, backend_layout_next_level, slide\n\tequals.override.data = TSFE:page|backend_layout\n}\n\npage.includeJSFooterlibs {\n\tjquery = EXT:[ext-lower]\/Resources\/Public\/Js\/jquery.min.js\n\tjquery.if < lib.isMyLayout\n}\n\npage.includeCSS {\n\t5000 = EXT:[ext-lower]\/Resources\/Public\/Css\/bootstrap.min.css\n\t5000.if < lib.isFileTransferLayout\n}<\/code><\/pre>"},"ad3b41375340ec707c5929aef1d514b4":{"_cs":"8d7b56d28a89fd74eccc2d6785763609","text":"<pre><code class=\"language-css\">public function myControllerAction () {\n\n\t\/\/ The identifier can be any array, an ID (e.g. the pageUid) or a string.\n\t$cacheIdentfier = [__METHOD__=>$this->request->getArguments()];\n\n\t\/\/ If cache already exists, return it directly\n\tif ($cache = \\nn\\t3::Cache()->get( $cacheIdentfier )) {\n\t\treturn $cache;\n\t}\n\n\t\/\/ ... Here: Complicated logic, queries etc. ...\n\n\t\/\/ Cache and return result\n\t$cache = $this->view->render();\n\treturn \\nn\\t3::Cache()->set($cacheIdentfier, $cache);\n}<\/code><\/pre>"},"ed80bcdaf9d71e3bbb745ebabf7b5499":{"_cs":"b7cdfa11f7ad8898760b57e3977bf012","text":"<p>Make custom CSS classes for links, tables etc. available in the backend<\/p>\n\t\t\t\t<b>ext_localconf.php<\/b>\n<p>Register a new RTE configuration in <code>ext_localconf.php<\/code>:<\/p>\n<pre><code class=\"language-php\">\/\/ Register your own RTE configuration.\n$GLOBALS['TYPO3_CONF_VARS']['RTE']['Presets']['rte_[ext-lower]'] = 'EXT:[ext-lower]\/Configuration\/RTE\/rte.yaml';<\/code><\/pre>\n\n<br>\n<br>\n<b>pageTsConfig<\/b>\n<p>\nIn the PageTsConfig <code>Configuration\/TypoScript\/extensions\/rte.page<\/code> set the new configuration as default for all RTEs.<br>\nDon't forget to include the TypoScript!<\/p>\n<pre data-src=\"rte.page\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-tsconfig\"># Use your own configuration as default!\nRTE.default {\n\tpreset = rte_[ext-lower]\n}\n\n# show field for additionalParams in linkwizard\nRTE.default.buttons.link.queryParametersSelector.enabled = 1\n\n# Instead of a default for all: specific only for certain table \/ fields\nRTE.config {\n    tx_[ext-lower]_domain_model_[model-lower].[field-lower].preset = rte_[ext-lower]\n}\n\n# Goes to each CType separately:\nRTE {\n\tconfig.tt_content.bodytext.types {\n\t\ttext.preset = rte_[ext-lower]\n\t\ttextcolumn.preset = rte_[ext-lower]\n\t\ttexticon.preset = rte_[ext-lower]\n\t\ttextmedia.preset = rte_[ext-lower]\n\t\ttextpic.preset = rte_[ext-lower]\n\t\ttextteaser.preset = rte_[ext-lower]\n\t\tpanel.preset = rte_[ext-lower]\n\t}\n}<\/code><\/pre>\n\n<br>\n<br>\n<b>TypoScript Setup<\/b>\n<p>\nAdjustments to the TypoScript setup under <code>Configuration\/TypoScript\/extensions\/rte.setup<\/code>.<br>\nDon't forget to include the TypoScript!\n<\/p>\n<pre data-src=\"rte.setup\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-typoscript\">\/\/ Allow \/ set additional table classes in RTE table editor.\nlib.parseFunc_RTE.externalBlocks {\n    table.stdWrap.HTMLparser {\n        tags.table.fixAttrib.class {\n            default = ce-table\n            always = 1\n            list = ce-table,ce-table-0,ce-table-1,ce-table-2\n        }\n    }\n    table.stdWrap.wrap = <div class=\"table-responsive\">|<\/div>\n}<\/code><\/pre>\n    \n<br>\n<br>\n<b>YAML<\/b>\n<p>And the yaml configuration at <code>Configuration\/RTE\/rte.yaml<\/code>:<\/p>\n<pre data-src=\"rte.yaml\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-yaml\"># Load default processing options.\nimports:\n  - { resource: \"EXT:rte_ckeditor\/Configuration\/RTE\/Processing.yaml\" }\n  - { resource: \"EXT:rte_ckeditor\/Configuration\/RTE\/Editor\/Base.yaml\" }\n  - { resource: \"EXT:rte_ckeditor\/Configuration\/RTE\/Editor\/Plugins.yaml\" }\n      \n# Add configuration for the editor\n# For complete documentation see http:\/\/docs.ckeditor.com\/#!\/api\/CKEDITOR.config\neditor:\n  externalPlugins:\n    #linebreak:\n    # resource: \"EXT:[ext-lower]\/Resources\/Vendor\/ckeditor-linebreak\/plugin.js\"\n  config:\n    extraAllowedContent: \"*(*)[data-*]; span(shy)\"\n    language: 'en\n    contentsCss:\n      - \"EXT:rte_ckeditor\/Resources\/Public\/Css\/contents.css\"\n      - \"EXT:nnhelpers\/Resources\/Public\/Vendor\/fontawesome\/css\/all.min.css\"\n      - \"EXT:[ext-lower]\/Resources\/Public\/Css\/rte.css\"\n\n    stylesSet:\n      - { name: \"Big Button, gold\", element: \"a\", attributes: { class: \"cta-btn\"} }\n      - { name: \"Icon: Email\", element: \"a\", attributes: { class: \"ic-envelope\"} }\n\n    format_tags: \"p;subhead;leadin;author\"\n    format_subhead: { name: \"subhead\", element: \"h3\", attributes: { class: \"subhead\" } }\n    format_leadin: { name: \"lead-in\", element: \"h3\", attributes: { class: \"lead-in\" } }\n    format_author: { name: \"author-info\", element: \"h6\", attributes: { class: \"author-info\" } }\n    \n    toolbarGroups:\n      - { name: styles, groups: [ styles, format ] }\n      - { name: basicstyles, groups: [ basicstyles ] }\n      - { name: paragraph, groups: [ list, indent, blocks, align ] }\n      - { name: links, groups: [ links ] }\n      - { name: clipboard, groups: [ clipboard, cleanup, undo ] }\n      - { name: editing, groups: [ spellchecker ] }\n      - { name: insert, groups: [ insert ] }\n      - { name: tools, groups: [ specialchar ] }\n      - { name: document, groups: [ mode ] }\n      - { name: linebreak }\n\n    justifyClasses:\n      - text-left\n      - text-center\n      - text-right\n      - text-justify\n\n    extraPlugins:\n      - justify\n      - linebreak\n\n    removePlugins:\n      - image\n      \n    removeButtons:\n      - Strike\n      - anchor\n      - Outdent\n      - Indent\n      - JustifyBlock\n      \nprocessing:\n  allowTags:\n    - wbr<\/code><\/pre>\n\n<br>\n<br>\n<b>CSS for the backend<\/b>\n<p>Include CSS <code>Resources\/Public\/Css\/rte.css<\/code> (path defined in yaml)<\/p>\n<pre data-src=\"rte.css\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-css\">a.cta-btn {\n    display: inline-block;\n    padding: 5px 15px;\n    border-radius: 3px;\n    background: #c29939;\n    color: #fff;\n}<\/code><\/pre>"},"afb73e6c4ad04d1fe18232532b2df35e":{"_cs":"e0f209dafa944d33fcb4f75332370fbc","text":"<p>\n    <code>nn\\t3::t3Version()<\/code><br \/>\n    The Typo3 version as an integer (e.g. \"8\").\n<\/p>\n<p>\n    <code>$myClass = \\nn\\t3::injectClass( \\My\\Namespace\\ClassName::class );<\/code><br \/>\n    Instantiate class via ObjectManager.\n<\/p>\n<p>\n    <code>\\nn\\t3::debug( $obj, $title );<\/code><br \/>\n    The better debugger. Outputs line no. and method with, can also debug MySQL statements of the QueryBuilder.\n<\/p>\n<p>\n    <code>\\nn\\t3::call( $funcNameStr, $param1, ... );<\/code><br \/>\n    Calls a class\/method in the notation <code>'\\My\\Namespace\\ClassName->method'<\/code>\n<\/p>\n<p>\n    <code>nn\\t3::Exception( 'Damn.' );<\/code><br \/>\n    Throws an exception.\n<\/p>"},"e32499c9f0c1c199c4603f95e72ec0c3":{"_cs":"2fa13e1eeacb1ab09a277b274b01f662","text":"<h5>\n    Importing a FlexForm into another FlexForm.\n<\/h5>\n<p>\n    The form type <code>nnt3_flex<\/code> allows easy import of a FlexForm into another FlexForm.\n    The core type <code>flex<\/code> throws an error here.\n<\/p>\n<pre><code class=\"language-xml\"><sliderOpt>\n    <TCEforms>\n        <label>configuration<\/label>\n        <config>\n            <type>nnt3_flex<\/type>\n            <path>EXT:nnsite\/Configuration\/FlexForms\/slickslider_options.xml<\/path>\n        <\/config>\n    <\/TCEforms>\n<\/sliderOpt><\/code><\/pre>\n\n<br>\n\n<h5>\n    Define options for a select box via TypoScript and display them in the FlexForm.\n<\/h5>\n<pre><code class=\"language-xml\"><preset>\n    <TCEforms>\n        <label>default<\/label>\n        <config>\n            <type>select<\/type>\n            <items type=\"array\"><\/items>\n            <itemsProcFunc>nn\\t3\\Flexform->insertOptions<\/itemsProcFunc>\n            <typoscriptPath>plugin.tx_extname.settings.templates<\/typoscriptPath>\n            <!-- Alternatively: load settings from PageTSConfig: -->\n            <pageconfigPath>tx_extname.colors<\/pageconfigPath>\n            <insertEmpty>1<\/insertEmpty>\n            <hideKey>1<\/hideKey>\n        <\/config>\n    <\/TCEforms>\n<\/preset><\/code><\/pre>"},"5b4ac8aa1637b3519cfd18202590326b":{"_cs":"0736bff04709bc0bf2d1c1a0057cf1f5","text":"<h5>\n    Define FAL image in TCA\n<\/h5>\n<p>\n    Saves a few lines of code in the Configuration\/TCA.\n<\/p>\n<pre><code class=\"language-php\">\/\/ Example in Configuration\/TCA\/tx_[ext-lower]_domain_model_[model-lower].php\n'falprofileimage' => [\n    'config' => \\nn\\t3::TCA()->getFileFieldTCAConfig('falprofileimage', ['maxitems'=>1]),\n],<\/code><\/pre>\n\n<br>\n\n<h5>\n    Define color picker in TCA\n<\/h5>\n<pre><code class=\"language-php\">\/\/ Example in Configuration\/TCA\/tx_[ext-lower]_domain_model_[model-lower].php\n'bgcolor' => [\n    'config' => \\nn\\t3::TCA()->getColorPickerTCAConfig(),\n],<\/code><\/pre>\n\n<br>\n\n<h5>\n    Define RTE (ckeditor) in TCA.\n<\/h5>\n<pre><code class=\"language-php\">\/\/ Example in Configuration\/TCA\/tx_[ext-lower]_domain_model_[model-lower].php\n'bodytext' => [\n    'config' => \\nn\\t3::TCA()->getRteTCAConfig(),\n],<\/code><\/pre>\n\n<br>\n\n<h5>\n    Using options from TypoScript in TCA\n<\/h5>\n<p>\n    This makes it easier to define the options in the select box using TypoScript.\n<\/p>\n<pre><code class=\"language-php\">\/\/ Example in Configuration\/TCA\/tx_[ext-lower]_domain_model_[model-lower].php\n'config' => [\n    'type' => 'select',\n    'itemsProcFunc' => 'nn\\t3\\Flexform->insertOptions',\n    'pageconfigPath' => 'tx_nnsite.colors',\n    \/\/'typoscriptPath' => 'plugin.tx_nnsite.settings.templates',\n]\n\n\/\/ In pageTsConfig:\ntx_nnsite.colors {\n    10 = red\n    20 = green\n}<\/code><\/pre>\n\n<br>\n\n<h5>\n    Using country selection in TCA.\n<\/h5>\n<p>\n    Requirement: static_info_tables must be installed!\n<\/p>\n<pre><code class=\"language-php\">\/\/ Example in Configuration\/TCA\/tx_[ext-lower]_domain_model_[model-lower].php\n'config' => [\n    'type' => 'select',\n    'itemsProcFunc' => 'nn\\t3\\Flexform->insertCountries',\n    'insertEmpty' => true,\n]<\/code><\/pre>\n\n<br>\n\n\n<h5>\n    Importing a FlexForm into a TCA\n<\/h5>\n<p>\n    A FlexForm can also be imported into the configuration of a TCA field.<br>\n    <b>Important:<\/b> Define dependencies to e.g. mask in ext_emconf.php!\n<\/p>\n<pre><code class=\"language-php\">\/\/ Example in Configuration\/TCA\/Overrides\/tt_content.php\n\/\/ Important: Don't forget dependencies to e.g. mask in <code>ext_emconf.php<\/code>\nif ($_GET['route'] != '\/module\/tools\/MaskMask') {\n    if ($GLOBALS['TCA']['tt_content']['columns']['tx_mask_slideropt']) {\n        $GLOBALS['TCA']['tt_content']['columns']['tx_mask_slideropt']['config'] = \\nn\\t3::TCA()->insertFlexForm('FILE:EXT:nnsite\/Configuration\/FlexForm\/slickslider_options.xml');\n    }\n}<\/code><\/pre>\n\n<br>"},"77eb16971c4a635e456dbc73187b3de2":{"_cs":"240c64c460609f0e854c2bff7ffcb2a1","text":"<h5>\n    PIDinRootline\n<\/h5>\n<p>\n    Checks if specified page(s) are within the rootline.<br>\n    Since Typo3 v10 <code>[PIDinRootline = 34,36]<\/code> or <code>[34 in tree.rootLineIds || 36 in tree.rootLineIds]<\/code> does not work in user TSconfig.\n<\/p>\n<pre data-src=\"user.txt\" data-nndownload data-download-link-label=\"Download\"><code class=\"language-typoscript\">\/\/ Example: customize default upload folder depending on the page.\n\/\/ Comes in the `User TSconfig` file\noptions {\n\tdefaultUploadFolder = 1:\/imagearchive\/unsorted\/\n}\n\n\/\/ If the user is in the backend on page \/ SysFolder 364, then take other folder:\n[nnt3_pidInRootline(364)]\n\toptions.defaultUploadFolder = 1:\/uploads_calendar\/.\n[GLOBAL]\n\n\/\/ array of pids can also be specified\n[nnt3_pidInRootline([364, 365])]\n\toptions.defaultUploadFolder = 1:\/uploads_calendar\/.\n[GLOBAL]<\/code><\/pre>"},"2d3ca38034f8ba264e6380f5972e6270":{"_cs":"4f6f38573948c2c32586365956c72bbf","text":"<p>Various methods to work with arrays like merge, purge or remove empty values.\nMethods to use a value of an associative array as a key.<\/p>"},"b536f5120cde94e5f67518e76ae6bd23":{"_cs":"220f76ca9d7c7c9432f58a3dc002a938","text":"<p>Returns the first element of the array, without array_shift()<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Arrays( $objArr )->first();<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"afff75741c8f7d6af5cfb0f74c6d05c4":{"_cs":"b535c93b53afd07213f552b3776a0a18","text":"<p>Split a string \u00e2 or array \u00e2 at the separator, remove non-numeric\nand remove empty elements<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Arrays('1,a,b,2,3')->intExplode(); \/\/ [1,2,3]\n\\nn\\t3::Arrays(['1','a','2','3'])->intExplode(); \/\/ [1,2,3]<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"b6b70fc3da29ec8cc7ecd9e3266fa1fa":{"_cs":"ef9a791e4647a01530dcdcb3194131ec","text":"<p>Use a field in the array as the key of the array, e.g. to get a list,\nwhose key is always the UID of the associative array:<\/p>\n<p><strong>Example:<\/strong><\/p>\n<pre><code class=\"language-php\">$arr = [['uid'=>'1', 'title'=>'title A'], ['uid'=>'2', 'title'=>'title B']];\n\\nn\\t3::Arrays($arr)->key('uid'); \/\/ ['1'=>['uid'=>'1', 'title'=>'Title A'], '2'=>['uid'=>'2', 'title'=>'Title B']]\n\\nn\\t3::Arrays($arr)->key('uid', 'title'); \/\/ ['1'=>'Title A', '2'=>'Title B']<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"f2f1559068dafeb82f1eafcdae845fc2":{"_cs":"26a6d6056df63e38d86d15ca90ee1da6","text":"<p>Merge an associative array recursively with another array<\/p>\n<p><code>$addKeys<\/code> => if <code>false<\/code> only keys that also exist in <code>$arr1<\/code> will be overwritten.\n<code>$includeEmptyValues<\/code> => if <code>true<\/code> empty values in <code>$arr1<\/code> will be included as well\n<code>$enableUnsetFeature<\/code> => if <code>true<\/code>, <code>__UNSET<\/code> can be used as a value in <code>$arr2<\/code> to delete a value in <code>$arr1<\/code>\n<pre><code class=\"language-php\">$mergedArray = \\nn\\t3::Arrays( $arr1 )->merge( $arr2, $addKeys, $includeEmptyValues, $enableUnsetFeature );\n$mergedArray = \\nn\\t3::Arrays( $arr1 )->merge( $arr2 );\n$mergedArray = \\nn\\t3::Arrays()->merge( $arr1, $arr2 );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"0609f94ef3d2d3dcdf363c6d6ef6dc56":{"_cs":"2b6f29886ff765ef7e8392e3706730f2","text":"<p>Reduce\/distill associative array to specific elements:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Arrays( $objArr )->key('uid')->pluck('title'); \/\/ ['1'=>'Title A', '2'=>'Title B']\n\\nn\\t3::Arrays( $objArr )->key('uid')->pluck(['title', 'bodytext']); \/\/ ['1'=>['title'=>'title A', 'bodytext'=>'content'], '2'=>...]\n\\nn\\t3::Arrays( ['uid'=>1, 'pid'=>2] )->pluck(['uid'], true); \/\/ ['uid'=>1]<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"92ea88bd94e62254f90afb49577445a9":{"_cs":"575c4c17dd4d87167575a0c12b2f3966","text":"<p>Remove empty values from an array.<\/p>\n<pre><code class=\"language-php\">$clean = \\nn\\t3::Arrays( $arr1 )->removeEmpty();<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"7fe3fb5366e951540606e1d8cff9f80e":{"_cs":"2fcac271ff94dadb79163244cf21f2be","text":"<p>Returns this array object as a \"normal\" array.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Arrays( $objArr )->key('uid')->toArray();<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"3f0680c2d2c5578d30413152ee35b095":{"_cs":"61b751d1bca05261d47812d643e67f74","text":"<p>Split a string \u00e2 or array \u00e2 at the separator, remove empty elements.\nWorks with strings and arrays.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Arrays('1,,2,3')->trimExplode(); \/\/ [1,2,3]\n\\nn\\t3::Arrays('1,,2,3')->trimExplode( false ); \/\/ [1,'',2,3]\n\\nn\\t3::Arrays('1|2|3')->trimExplode('|'); \/\/ [1,2,3]\n\\nn\\t3::Arrays('1|2||3')->trimExplode('|', false); \/\/ [1,2,'',3]\n\\nn\\t3::Arrays('1|2,3')->trimExplode(['|', ',']); \/\/ [1,2,3]\n\\nn\\t3::Arrays(['1','','2','3'])->trimExplode(); \/\/ [1,2,3]<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"25c29f3ac191755b406bda7daf5bb44d":{"_cs":"fdb9cb5b21957c2b772eab60e9946067","text":"<p>Methods to check in the frontend if a user is logged in to the Typo3 backend and has e.g. admin rights.\nMethods to start a backend user if it does not exist (e.g. during a scheduler job)."},"0b282b51dd4dc39f4a04b585aa6af7ec":{"_cs":"02d2da4314a79f7abcc7f5d300e6cc74","text":"<p>Gets the current backend user.\nCorresponds to <code>$GLOBALS['BE_USER']<\/code> in earlier Typo3 versions.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::BackendUser()->get();<\/code><\/pre>\n<p><code>@return \\TYPO3\\CMS\\Backend\\FrontendBackendUserAuthentication<\/code><\/p>"},"80b15abbbb15a6f14d9b8eb74d228aef":{"_cs":"c31ebf0c83904ad718114668c1fcb31f","text":"<p>Gets user specific settings for the currently logged in backend user.\nSee <code>\\nn\\t3::BackendUser()->updateSettings()<\/code> for saving the data.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::BackendUser()->getSettings('myext'); \/\/ => ['wants'=>['drink'=>'coffee']]\n\\nn\\t3::BackendUser()->getSettings('myext', 'wants'); \/\/ => ['drink'=>'coffee']\n\\nn\\t3::BackendUser()->getSettings('myext', 'wants.drink'); \/\/ => 'coffee'<\/code><\/pre>\n<p><code>@return mixed<\/code><\/p>"},"7b83bd0b31e0f80328634ae7e53972f5":{"_cs":"7a94766667d663dc36b28d7697eb37d6","text":"<p>Checks if the BE user is an admin.\nPreviously: <code>$GLOBALS['TSFE']->beUserLogin<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::BackendUser()->isAdmin();<\/code><\/pre>\n<p><code>@return bool<\/code><\/p>"},"71de5cf11b4a13221e4caed103665026":{"_cs":"99312bd38292c220277131f60b6f6f1c","text":"<p>Perceives whether a BE user is logged in.\nExample: Show certain content in the frontend only if the user is logged in in the backend.\nPreviously: <code>$GLOBALS['TSFE']->beUserLogin<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::BackendUser()->isLoggedIn();<\/code><\/pre>\n<p><code>@return bool<\/code><\/p>"},"b5a51c403ce755f9298dafd8eaa3b00a":{"_cs":"1be92116d81632153ebb3008bff2b80e","text":"<p>Start (fake) backend user.\nSolves the problem that, for example, from the scheduler certain functions\nlike <code>log()<\/code> are not possible if no active BE user exists.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::BackendUser()->start();<\/code><\/pre>\n<p><code>@return \\TYPO3\\CMS\\Backend\\FrontendBackendUserAuthentication<\/code><\/p>"},"daa40ab4a80364ac62b604d190969965":{"_cs":"9795d854a69304e0b113f1587343196d","text":"<p>Saves user specific settings for the currently logged in backend user.\nThese settings are also available for the user after logout\/login.\nSee <code>nn\\t3::BackendUser()->getSettings('myext')<\/code> for reading out the data.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::BackendUser()->updateSettings('myext', ['wants'=>['drink'=>'coffee']]);<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"440f87a09a9b118158f53bdcda71a36f":{"_cs":"aba0909dc8189a9928cdcd31a027946e","text":"<p>Methods to read and write to the Typo3 cache.\nUses Typo3's caching framework, see <code>EXT:nnhelpers\/ext_localconf.php<\/code> for details<\/p>"},"05ad2f38ce583fe3a911889e17f171fd":{"_cs":"684aaa8cbde9c8c344f96dfc173f3041","text":"<p>Deletes caches.\nIf an <code>identifier<\/code> is specified, then only the caches of the specific\nidentifier will be deleted \u00e2 otherwise ALL caches of all extensions and pages.<\/p>\n<ul>\n<li>RAM caches<\/li>\n<li>CachingFramework caches set via <code>\\nn\\t3::Cache()->set()<\/code><\/li>\n<li>File caches set by <code>\\nn\\t3::Cache()->write()<\/code><\/li>\n<\/ul>\n<pre><code class=\"language-php\">\/\/ Clear ALL caches \u00e2 including the caches of other extensions, the pages etc.\n\\nn\\t3::Cache()->clear();\n\n\/\/ Delete only the caches with a given identifier.\n\\nn\\t3::Cache()->clear('nnhelpers');<\/code><\/pre>\n<p><code>@param string $identifier<\/code>\n<code>@return void<\/code><\/p>"},"adf67c31fdaa3203ecc2402b877833d5":{"_cs":"17e1b1be3bb455324251448df199e19e","text":"<p>Deletes the page cache. Alias to <code>\\nn\\t3::Page()->clearCache()<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Cache()->clearPageCache( 17 ); \/\/ Clear page cache for pid=17.\n\\nn\\t3::Cache()->clearPageCache(); \/\/ Clear cache for ALL pages<\/code><\/pre>\n<p><code>@param mixed $pid<\/code> pid of the page whose cache should be cleared or leave empty for all pages\n<code>@return void<\/code><\/p>"},"a4c908d583d9cf0862788bc52aad0c56":{"_cs":"a6e0bcc61787b211c7d5306fad9c5361","text":"<p>Loads contents of the Typo3 cache using an identifier.\nThe identifier is an arbitrary string or array that uniquely identifies the cache.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Cache()->get('myid');\n\\nn\\t3::Cache()->get(['pid'=>1, 'uid'=>'7']);\n\\nn\\t3::Cache()->get(['func'=>__METHOD__, 'uid'=>'17']);\n\\nn\\t3::Cache()->get([__METHOD__=>$this->request->getArguments()]);<\/code><\/pre>\n<p><code>@param mixed $identifier<\/code> String or array to identify the cache.\n<code>@param mixed $useRamCache<\/code> temporary cache in $GLOBALS instead of caching framework<\/p>\n<p><code>@return mixed<\/code><\/p>"},"a034e3e324d6a25265feef7a5fabc93d":{"_cs":"51da0622310d7bdf3c1b559a643e0e7c","text":"<p>Converts the given cache identifier into a usable string.\nCan also handle an array as identifier.<\/p>\n<p><code>@param mixed $indentifier<\/code>\n<code>@return string<\/code><\/p>"},"3aa6a3fabb02eed755a98977c7916c9d":{"_cs":"4820fc9af612882673dd5c1c36b4fc1e","text":"<p>Read static file cache.<\/p>\n<p>Reads the PHP file written via <code>\\nn\\t3::Cache()->write()<\/code>.<\/p>\n<pre><code class=\"language-php\">$cache = \\nn\\t3::Cache()->read( $identifier );<\/code><\/pre>\n<p>The PHP file is an executable PHP script with the <code>return<\/code> command.\nIt stores the cache contents in an array.<\/p>\n<pre><code class=\"language-php\"><?php\n    return ['_'=>...];<\/code><\/pre>\n<p><code>@return string|array<\/code><\/p>"},"22d3c9c593ade26549c02e17bbee666b":{"_cs":"51b694f96b720e11b29605788ef3d83a","text":"<p>Writes an entry into the Typo3 cache.\nThe identifier is an arbitrary string or array that uniquely identifies the cache.<\/p>\n<pre><code class=\"language-php\">\/\/ Classic application in the controller: get and set cache.\nif ($cache = \\nn\\t3::Cache()->get('myid')) return $cache;\n...\n$cache = $this->view->render();\nreturn \\nn\\t3::Cache()->set('myid', $cache);<\/code><\/pre>\n<pre><code class=\"language-php\">\/\/ Use RAM cache? Set TRUE as third parameter\n\\nn\\t3::Cache()->set('myid', $dataToCache, true);\n\n\/\/ set duration of cache to 60 minutes\n\\nn\\t3::Cache()->set('myid', $dataToCache, 3600);\n\n\/\/ You can also specify an array as key\n\\nn\\t3::Cache()->set(['pid'=>1, 'uid'=>'7'], $html);<\/code><\/pre>\n<p><code>@param mixed $indentifier<\/code> String or array to identify the cache.\n<code>@param mixed $data<\/code> Data to be written to the cache. (String or array)\n<code>@param mixed $useRamCache<\/code> <code>true<\/code>: temporary cache in $GLOBALS instead of caching framework.\n<code>integer<\/code>: how many seconds cache?<\/p>\n<p><code>@return mixed<\/code><\/p>\n."},"23ea5041b88ac1ea99fcc5ca3c34cc8f":{"_cs":"9ad540b7cd672d4d5e9d4354a1cb739b","text":"<p>Write static file cache.<\/p>\n<p>Writes a PHP file that can be loaded via <code>$cache = require('...')<\/code>.<\/p>\n<p>Similar to many core functions and extensions (e.g. mask) that put static PHP files\ninto the filesystem to better cache performance-heavy processes such as classpaths, annotation parsing, etc.\nbetter cache. Consciously <strong>not<\/strong> use the core functions to avoid any overhead and to be\nand to ensure maximum compatibility with core updates.<\/p>\n<pre><code class=\"language-php\">$cache = ['a'=>1, 'b'=>2];\n$identifier = 'myid';\n\n\\nn\\t3::Cache()->write( $identifier, $cache );\n$read = \\nn\\t3::Cache()->read( $identifier );<\/code><\/pre>\n<p>The example above generates a PHP file with this content:<\/p>\n<pre><code class=\"language-php\"><?php\nreturn ['_' => ['a'=>1, 'b'=>2]];<\/code><\/pre>\n<p><code>@return string|array<\/code><\/p>"},"3f207315aeea5c3d9ffc1c48fb6957d5":{"_cs":"e68dff206f7007c8f6ac065aa11b07e1","text":"<p>Read and render content elements and content of a backend column (<code>colPos<\/code>)<\/p>"},"52e9af7091d2a0803fa05f847d643563":{"_cs":"938ba9a0792aaaac034f0d45dc757ad7","text":"<p>Loads relations (<code>media<\/code>, <code>assets<\/code>, ...) to a <code>tt_content<\/code> data array.\nIf <code>EXT:mask<\/code> is installed, the corresponding method from mask is used.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Content()->addRelations( $data );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"32ae1b295587d7d5601da1f0fb01554e":{"_cs":"427ff74f67092c79e091be0227c2067c","text":"<p>Loads the content for a specified column (<code>colPos<\/code>) and page.\nIf no pageUid is specified, it uses the current page.\nWith <code>slide<\/code> the content elements of the parent page are fetched if no content element exists in the column on the given page.<\/p>\n<p>Fetch content of <code>colPos = 110<\/code> from the current page:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Content()->column( 110 );<\/code><\/pre>\n<p>Get content of <code>colPos = 110<\/code> from the current page. If there is no content in the column on the current page, use the content from the parent page:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Content()->column( 110, true );<\/code><\/pre>\n<p>Get content of <code>colPos = 110<\/code> from page with id <code>99<\/code>:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Content()->column( 110, 99 );<\/code><\/pre>\n<p>Get content of <code>colPos = 110<\/code> from page with id <code>99<\/code>. If there is no content in the column on page <code>99<\/code>, use the content from the parent page of page <code>99<\/code>:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Content()->column( 110, 99, true );<\/code><\/pre>\n<p>Also available as ViewHelper:<\/p>\n<pre><code class=\"language-php\">{nnt3:content.column(colPos:110)}\n{nnt3:content.column(colPos:110, slide:1)}\n{nnt3:content.column(colPos:110, pid:99)}\n{nnt3:content.column(colPos:110, pid:99, slide:1)}<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"e188b8dce660669e95cebfbfa7377263":{"_cs":"26081928a45d6b67df754c85a49337d3","text":"<p>Loads the \"raw\" <code>tt_content<\/code> data of a given column (<code>colPos<\/code>).<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Content()->columnData( 110 );\n\\nn\\t3::Content()->columnData( 110, true );\n\\nn\\t3::Content()->columnData( 110, true, 99 );<\/code><\/pre>\n<p>Also available as ViewHelper.\n<code>relations<\/code> defaults to <code>TRUE<\/code><\/p> in ViewHelper.\n<pre><code class=\"language-php\">{nnt3:content.columnData(colPos:110)}\n{nnt3:content.columnData(colPos:110, pid:99, relations:0)}<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"be24df656a516e6fdbd9e36fb8bc5635":{"_cs":"091cef9dd19b81cebb6bc684ea5571ce","text":"<p>Loads the data of a tt_content element as a simple array:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Content()->get( 1201 );<\/code><\/pre>\n<p>Load relations (<code>media<\/code>, <code>assets<\/code>, ...)<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Content()->get( 1201, true );<\/code><\/pre>\n<p>Translations \/ Localization:<\/p>\n<p>Do NOT translate element automatically if another language is set<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Content()->get( 1201, false, false );<\/code><\/pre>\n<p>Get element in a OTHER language than the one set in the frontend.\nTakes into account the fallback chain of the language set in the site config<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Content()->get( 1201, false, 2 );<\/code><\/pre>\n<p>Get element with its own fallback chain. Completely ignores the chain,\ndefined in the site config.\n<pre><code class=\"language-php\">\\nn\\t3::Content()->get( 1201, false, [2,3,0] );<\/code><\/pre>\n<p><code>@param int $ttContentUid<\/code> Content Uid in table tt_content.\n<code>@param bool $getRelations<\/code> Also get relations \/ FAL?\n<code>@param bool $localize<\/code> Override the entry?\n<code>@return array<\/code><\/p>"},"e2874780a4050901830b64e42959e133":{"_cs":"8e0e74e1ef648ae476f7460bea4d22b7","text":"<p>Get multiple content elements (from <code>tt_content<\/code>).<\/p>\n<p>The records are automatically localized \u00e2 except <code>$localize<\/code> is set to <code>false<\/code>\nset. See <code>nn\\t3::Content()->get()<\/code> for more <code>$localize<\/code> options.<\/p>\n<p>Using a list of UIDs:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Content()->getAll( 1 );\n\\nn\\t3::Content()->getAll( [1, 2, 7] );<\/code><\/pre>\n<p>Using filter criteria:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Content()->getAll( ['pid'=>1] );\n\\nn\\t3::Content()->getAll( ['pid'=>1, 'colPos'=>1] );\n\\nn\\t3::Content()->getAll( ['pid'=>1, 'CType'=>'mask_section_cards', 'colPos'=>1] );<\/code><\/pre>\n<p><code>@param mixed $ttContentUid<\/code> Content uids or constraints for querying the data.\n<code>@param bool $getRelations<\/code> Also get relations \/ FAL?\n<code>@param bool $localize<\/code> Override the entry?\n<code>@return array<\/code><\/p>"},"e403872bede989ec5eaba4e0837c505a":{"_cs":"a2deb241d0496b0fa71919f88a00df2e","text":"<p>Localize \/ translate data.<\/p>\n<p>Examples:<\/p>\n<p>Translate data, using the current language of the frontend.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Content()->localize( 'tt_content', $data );<\/code><\/pre>\n<p>Get data in a OTHER language than the one set in the frontend.\nTakes into account the fallback chain of the language set in the site config<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Content()->localize( 'tt_content', $data, 2 );<\/code><\/pre>\n<p>Get data with custom fallback chain. Completely ignores the chain,\ndefined in the site config.\n<pre><code class=\"language-php\">\\nn\\t3::Content()->localize( 'tt_content', $data, [3, 2, 0] );<\/code><\/pre>\n<p><code>@param string $table<\/code> database table.\n<code>@param array $data<\/code> Array containing the default language data (languageUid = 0).\n<code>@param mixed $localize<\/code> Specify how to translate. Boolean, uid or array with uids\n<code>@return array<\/code><\/p>"},"3b72f1c4b7f92263f97f998cf25309f9":{"_cs":"595aadef24b4379916363087cee2f4c7","text":"<p>Renders an <code>tt_content<\/code> element as HTML<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Content()->render( 1201 );\n\\nn\\t3::Content()->render( 1201, ['key'=>'value'] );<\/code><\/pre>\n<p>Also available as ViewHelper:<\/p>\n<pre><code class=\"language-php\">{nnt3:contentElement(uid:123, data:feUser.data)}<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"73bf9dedebed491b4aac8d561ebffb83":{"_cs":"df94a208545e5ac4f960aeae73efa8c7","text":"<p>Converting arrays to models, models to JSONs, arrays to ObjectStorages,\nHex colors to RGB, and much more that somehow has to do with converting things to\nto do.<\/p>"},"40a426af0a868033aaad77cc4b22eeec":{"_cs":"a696028eb0c5785d863807fbcb0f395e","text":"<p>Converts a model to an array.\nAlias to \\nn\\t3::Obj()->toArray();<\/p>\n<p>For memory problems due to recursion: Max depth specified!<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Convert($model)->toArray(2);\n\\nn\\t3::Convert($model)->toArray(); => ['uid'=>1, 'title'=>'example', ...]<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"f875ef82153def82cc518bad2fd48b39":{"_cs":"0e5cc44a4c334ba4809ca18765d9b706","text":"<p>Converts a human readable specification of bytes\/megabytes into a byte integer.\nExtremely tolerant of spaces, upper\/lower case, and commas instead of periods.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Convert('1M')->toBytes(); \/\/ -> 1048576\n\\nn\\t3::Convert('1 MB')->toBytes(); \/\/ -> 1048576\n\\nn\\t3::Convert('1kb')->toBytes(); \/\/ -> 1024\n\\nn\\t3::Convert('1,5kb')->toBytes(); \/\/ -> 1024\n\\nn\\t3::Convert('1.5Gb')->toBytes(); \/\/ -> 1610612736<\/code><\/pre>\n<p>For the reverse way (bytes to human readable notation like 1024 -> 1kb) there is a handy\nthere is a handy Fluid ViewHelper in the core:<\/p>\n<pre><code class=\"language-php\">{fileSize->f:format.bytes()}<\/code><\/pre>\n<p><code>@return integer<\/code><\/p>"},"8996fd744ba3cdc98382f57834ec59ce":{"_cs":"c6de659f565708923f06f33c0e722af2","text":"<p>Converts a <code>\\TYPO3\\CMS\\Core\\Resource\\FileReference<\/code> (or its <code>uid<\/code>)\ninto a <code>\\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Convert( $input )->toFileReference() => \\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference<\/code><\/pre>\n<p><code>@param $input<\/code> Can be <code>\\TYPO3\\CMS\\Core\\Resource\\FileReference<\/code> or <code>uid<\/code> of it.\n<code>@return \\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference<\/code><\/p>"},"04ecf68933f2e90c690ad38e62aad461":{"_cs":"6cde541636228cba10d9c9bcbc42183c","text":"<p>Converts (normalizes) a string to ISO-8859-1<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Convert('\u00c3\u00a4\u00c3\u00b6\u00c3\u00bc')->toIso();<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"436ff4f0b73cbc415ae7c322e51bd237":{"_cs":"66351b66d2f98cbb4b5285243151f8af","text":"<p>Converts a model to a JSON<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Convert($model)->toJson() => ['uid'=>1, 'title'=>'example', ...]<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"760e8b616fffbada0a69b89f1a786f52":{"_cs":"9160e48d3852d7c22f33a822abcd49b6","text":"<p>Converts an array to a model.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Convert($array)->toModel( \\Nng\\Model\\Name::class ) => \\Nng\\Model\\Name<\/code><\/pre>\n<p>Can also automatically create FileReferences.\nIn this example, a new model of type <code>\\Nng\\Model\\Name<\/code> is created and then\nthen persisted in the database. The <code>falMedia<\/code> field is an ObjectStorage\nwith <code>FileReferences<\/code>. The FileReferences are created automatically!<\/p>\n<pre><code class=\"language-php\">$data = [\n    'pid' => 6,\n    'title' => 'New record',\n    'description' => 'the text',\n    'falMedia' => [\n        ['title'=>'Image 1', 'publicUrl'=>'fileadmin\/_tests\/5e505e6b6143a.jpg'],\n        ['title'=>'Image 2','publicUrl'=>'fileadmin\/_tests\/5e505fbf5d3dd.jpg'],\n        ['title'=>'image 3','publicUrl'=>'fileadmin\/_tests\/5e505f435061e.jpg'],\n    ]\n];\n$newModel = \\nn\\t3::Convert( $data )->toModel( \\Nng\\Model\\Name::class );\n$modelRepository->add( $newModel );\n\\nn\\t3::Db()->persistAll();<\/code><\/pre>\n<p>Example: create a news model from an array:<\/p>\n<pre><code class=\"language-php\">$entry = [\n    'pid' => 12,\n    'title' => 'news-title',\n    'description' => '<p>My News<\/p>',\n    'falMedia' => [['publicUrl' => 'fileadmin\/image.jpg', 'title'=>'image'], ...],\n    'categories' => [1, 2]\n];\n$model = \\nn\\t3::Convert( $entry )->toModel( \\GeorgRinger\\News\\Domain\\Model\\News::class );\n$newsRepository->add( $model );\n\\nn\\t3::Db()->persistAll();<\/code><\/pre>\n<p><strong>Note<\/strong>\nTo update an already existing model with data from an array there is\nthere is the method <code>$updatedModel = \\nn\\t3::Obj( $prevModel )->merge( $data );<\/code><\/p>\n<p><code>@return mixed<\/code><\/p>"},"1ef5dc8775311fe03010e016435d0272":{"_cs":"3dbae30f26b8b03db2f8b8ad400828b7","text":"<p>Converts something to an ObjectStorage<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Convert($something)->toObjectStorage()\n\\nn\\t3::Convert($something)->toObjectStorage( \\My\\Child\\Type::class )\n\n\\nn\\t3::Convert()->toObjectStorage([['uid'=>1], ['uid'=>2], ...], \\My\\Child\\Type::class )\n\\nn\\t3::Convert()->toObjectStorage([1, 2, ...], \\My\\Child\\Type::class )<\/code><\/pre>\n<p><code>@return ObjectStorage<\/code><\/p>"},"0ced4b3e62a610133bd05daad31f2bc4":{"_cs":"30174063ce9836abcf11b96583c0a859","text":"<p>Converts a color value to another number format<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Convert('#ff6600')->toRGB(); \/\/ -> 255,128,0<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"1bd95a6d17760f2347a1590d14ea71bb":{"_cs":"3b1732ac9782b3130f346a53397bd22e","text":"<p>Converts a list to an <code>ObjectStorage<\/code> with <code>SysCategory<\/code><\/p>\n<pre><code class=\"language-php\">Not yet implemented!<\/code><\/pre>\n<p><code>@return ObjectStorage<\/code><\/p>"},"41a8bd138df2b6ac412f2d4847a30926":{"_cs":"705f416f13d0f4dd43c5a265b14e82ff","text":"<p>Converts (normalizes) a string to UTF-8<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Convert('\u00c3\u00a4\u00c3\u00b6\u00c3\u00bc')->toUTF8();<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"9d01206a2ebaff53a539183ff1d3ba63":{"_cs":"5f32164b35e734c056aea793ce251f68","text":"<p>Simplify access to the most used database operations for writing, reading, deleting.<\/p>"},"d6a2951b9922755f9b62de11053390df":{"_cs":"7487563f210088520b612b945d053f30","text":"<p>Debug the <code>QueryBuilder<\/code> statement.<\/p>\n<p>Puts out the complete compiled query as a readable string, as it will be executed later in the database.\ne.g. <code>SELECT FROM fe_users WHERE ...<\/code><\/p>\n<pre><code class=\"language-php\">\/\/ Output statement directly to the browser.\n\\nn\\t3::Db()->debug( $query );\n\n\/\/ Return statement as string, do not output automatically\necho \\nn\\t3::Db()->debug( $query, true );<\/code><\/pre>\n<p><code>@param mixed $query<\/code>\n<code>@param boolean $return<\/code>\n<code>@return string<\/code><\/p>"},"b00b1ba37c8185726e372f637f99ad80":{"_cs":"866150c379563a89542d1204746c9deb","text":"<p>Delete database entry. Small and fine.\nEither a table name and the UID can be passed - or a model.<\/p>\n<p>Delete a record by table name and uid or any constraint:<\/p>\n<pre><code class=\"language-php\">\/\/ Delete by uid.\n\\nn\\t3::Db()->delete('table', $uid);\n\n\/\/ Delete using a custom field\n\\nn\\t3::Db()->delete('table', ['uid_local'=>$uid]);\n\n\/\/ delete the entry completely and irrevocably (not only by flag deleted = 1)\n\\nn\\t3::Db()->delete('table', $uid, true);\n<\/code><\/pre>\n<p>Deleting a record by model:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Db()->delete( $model );<\/code><\/pre>\n<p><code>@param mixed $table<\/code>\n<code>@param array $constraint<\/code>\n<code>@param boolean $reallyDelete<\/code>\n<code>@return mixed<\/code><\/p>"},"568bfbfcf41d655c214c95191d905e0b":{"_cs":"17ad5aef0ad7c757e161639756862456","text":"<p>Keep in key\/val array only elements whose keys also exist in\nexist in TCA for specific table<\/p>\n<p><code>@param array $data<\/code>\n<code>@param string $table<\/code>\n<code>@return array<\/code><\/p>"},"43e2797479a693f0e795c046f7a51327":{"_cs":"c0d84d9579a47de040fe620fc5bdeba9","text":"<p>Get ALL entry from a database table.<\/p>\n<p>The data is returned as an array \u00e2 this is (unfortunately) still the absolute most\nmost performant way to fetch many records from a table, since no <code>DataMapper<\/code>\nhas to parse the individual rows.<\/p>\n<pre><code class=\"language-php\">\/\/ Get all records. \"hidden\" will be taken into account.\n\\nn\\t3::Db()->findAll('fe_users');\n\n\/\/ Also fetch records which are \"hidden\".\n\\nn\\t3::Db()->findAll('fe_users', true);<\/code><\/pre>\n<p><code>@param string $table<\/code>\n<code>@param boolean $ignoreEnableFields<\/code>\n<code>@return array<\/code><\/p>"},"5b9b8a5098feaf750632209d0bed2c12":{"_cs":"e70f9848707cbb6537ac72363438817e","text":"<p>Finds an entry based on the UID.\nWorks even if frontend has not been initialized yet,\ne.g. while AuthentificationService is running or in the scheduler.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Db()->findByUid('fe_user', 12);\n\\nn\\t3::Db()->findByUid('fe_user', 12, true);<\/code><\/pre>\n<p><code>@param string $table<\/code>\n<code>@param int $uid<\/code>\n<code>@param boolean $ignoreEnableFields<\/code>\n<code>@return array<\/code><\/p>"},"d2534d57ba00a57a115a0301764d0daf":{"_cs":"e803da8a7861efd367ff68c9c7e311cd","text":"<p>Finds records by multiple UIDs<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Db()->findByUids('fe_user', [12,13]);\n\\nn\\t3::Db()->findByUids('fe_user', [12,13], true);<\/code><\/pre>\n<p><code>@param string $table<\/code>\n<code>@param int|array $uids<\/code>\n<code>@param boolean $ignoreEnableFields<\/code>\n<code>@return array<\/code><\/p>"},"e6019dfdd19ad86b42656b067f4f3270":{"_cs":"667b723c0e19893d2c2109b9a4335bbe","text":"<p>Finds ALL entries based on a desired field value.\nWorks even if frontend has not been initialized yet<\/p>\n<pre><code class=\"language-php\">\/\/ SELECT FROM fe_users WHERE email = 'david@99grad.de'\n\\nn\\t3::Db()->findByValues('fe_users', ['email'=>'david@99grad.de']);\n\n\/\/ SELECT FROM fe_users WHERE uid IN (1,2,3)\n\\nn\\t3::Db()->findByValues('fe_users', ['uid'=>[1,2,3]]);<\/code><\/pre>\n<p><code>@param string $table<\/code>\n<code>@param array $whereArr<\/code>\n<code>@param boolean $useLogicalOr<\/code>\n<code>@param boolean $ignoreEnableFields<\/code>\n<code>@return array<\/code><\/p>"},"afe6d8199191c7bcfc01d381b61a2324":{"_cs":"e9b6a64c023a27b17a28ba9bc8e4a1a0","text":"<p>Finds ALL entries that contain a value from the <code>$values<\/code> array in the <code>$column<\/code> column.\nWorks even if the frontend has not been initialized yet.\nAlias to <code>\\nn\\t3::Db()->findByValues()<\/code><\/p>\n<pre><code class=\"language-php\">\/\/ SELECT FROM fe_users WHERE uid IN (1,2,3)\n\\nn\\t3::Db()->findIn('fe_users', 'uid', [1,2,3]);\n\n\/\/ SELECT FROM fe_users WHERE username IN ('david', 'martin')\n\\nn\\t3::Db()->findIn('fe_users', 'username', ['david', 'martin']);<\/code><\/pre>\n<p><code>@param string $table<\/code>\n<code>@param string $column<\/code>\n<code>@param array $values<\/code>\n<code>@param boolean $ignoreEnableFields<\/code>\n<code>@return array<\/code><\/p>"},"a0c82d8a5a8e0bd304e18371ccd32a8f":{"_cs":"a04e76431acc9344866df1848f329c20","text":"<p>Inversion to <code>\\nn\\t3::Db()->findIn()<\/code>:<\/p>\n<p>Finds ALL entries that do NOT contain a value from the <code>$values<\/code> array in the <code>$column<\/code> column.\nWorks even if the frontend has not been initialized yet.<\/p>\n<pre><code class=\"language-php\">\/\/ SELECT FROM fe_users WHERE uid NOT IN (1,2,3)\n\\nn\\t3::Db()->findNotIn('fe_users', 'uid', [1,2,3]);\n\n\/\/ SELECT FROM fe_users WHERE username NOT IN ('david', 'martin')\n\\nn\\t3::Db()->findNotIn('fe_users', 'username', ['david', 'martin']);<\/code><\/pre>\n<p><code>@param string $table<\/code>\n<code>@param string $colName<\/code>\n<code>@param array $values<\/code>\n<code>@param boolean $ignoreEnableFields<\/code>\n<code>@return array<\/code><\/p>"},"f47c33457007339c05ad1d450162f4fb":{"_cs":"b4b4a01c0eaa16ad2705a6a2dd08a762","text":"<p>Finds ONE entry based on desired field values.<\/p>\n<pre><code class=\"language-php\">\/\/ SELECT FROM fe_users WHERE email = 'david@99grad.de'\n\\nn\\t3::Db()->findOneByValues('fe_users', ['email'=>'david@99grad.de']);\n\n\/\/ SELECT FROM fe_users WHERE firstname = 'david' AND username = 'john'.\n\\nn\\t3::Db()->findOneByValues('fe_users', ['firstname'=>'david', 'username'=>'john']);\n\n\/\/ SELECT FROM fe_users WHERE firstname = 'david' OR username = 'john'.\n\\nn\\t3::Db()->findOneByValues('fe_users', ['firstname'=>'david', 'username'=>'john'], true);<\/code><\/pre>\n<p><code>@param string $table<\/code>\n<code>@param array $whereArr<\/code>\n<code>@param boolean $useLogicalOr<\/code>\n<code>@param boolean $ignoreEnableFields<\/code>\n<code>@return array<\/code><\/p>"},"163a8641f618766acbffacc41636c5eb":{"_cs":"b017044811ccc9529b7b0dd9522c8e50","text":"<p>Get one or more domain models\/entities by <code>uid<\/code>\nA single <code>$uid<\/code> or a list of <code>$uids<\/code> can be passed.<\/p>\n<p>Returns the \"real\" model\/object including all relations,\nanalogous to a query about the repository.\n<pre><code class=\"language-php\">\/\/ Get a single model by its uid.\n$model = \\nn\\t3::Db()->get( 1, \\Nng\\MyExt\\Domain\\Model\\Name::class );\n\n\/\/ Get an array of models by their uids\n$modelArray = \\nn\\t3::Db()->get( [1,2,3], \\Nng\\MyExt\\Domain\\Model\\Name::class );\n\n\/\/ Returns also hidden models\n$modelArrayWithHidden = \\nn\\t3::Db()->get( [1,2,3], \\Nng\\MyExt\\Domain\\Model\\Name::class, true );<\/code><\/pre>\n<p><code>@param int $uid<\/code>\n<code>@param string $modelType<\/code>\n<code>@param boolean $ignoreEnableFields<\/code>\n<code>@return object<\/code><\/p>"},"77dc53bb60487b514e9d4ae8751477b8":{"_cs":"7e13a0964910411708fa396da49f5158","text":"<p>Get a table column (TCA) for specific table<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Db()->getColumn( 'tablename', 'fieldname' );<\/code><\/pre>\n<p><code>@param string $table<\/code>\n<code>@param string $colName<\/code>\n<code>@param boolean $useSchemaManager<\/code>\n<code>@return array<\/code><\/p>"},"31818f0a19bdcecba2f8e3a0a1fd8de3":{"_cs":"e161ed58aeca36b8ede47b563d075322","text":"<p>Get localized label of a specific TCA field<\/p>\n<p><code>@param string $column<\/code>\n<code>@param string $table<\/code>\n<code>@return string<\/code><\/p>"},"d2f798f78503dfe9580316d5153e8ff7":{"_cs":"0425bf0c12bc4746c62ccb4ec8f81c7b","text":"<p>Get all table columns (TCA) for specific table<\/p>\n<pre><code class=\"language-php\">\/\/ Get fields based on the TCA array.\n\\nn\\t3::Db()->getColumns( 'tablename' );\n\n\/\/ get fields from the SchemaManager\n\\nn\\t3::Db()->getColumns( 'tablename', true );<\/code><\/pre>\n<p><code>@param string $table<\/code>\n<code>@param boolean $useSchemaManager<\/code>\n<code>@return array<\/code><\/p>"},"ae0c5b0c905bbaf44d0fc7c0a20ec9f1":{"_cs":"b587d7ed14aa72e79381a88c234d4307","text":"<p>Get fields of a table by a specific type<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Db()->getColumnsByType( 'tx_news_domain_model_news', 'slug' );<\/code><\/pre>\n<p><code>@param string $table<\/code>\n<code>@param string $colType<\/code>\n<code>@param boolean $useSchemaManager<\/code>\n<code>@return array<\/code><\/p>"},"d2199c03e45c571fb2c091a0b9036b5e":{"_cs":"0d319ad50f1871bf0c5520db531e8570","text":"<p>Get a \"raw\" connection to the database.\nOnly useful in real exceptional cases.<\/p>\n<pre><code class=\"language-php\">$connection = \\nn\\t3::Db()->getConnection();\n$connection->fetchAll( 'SELECT FROM tt_news WHERE 1;' );<\/code><\/pre>\n<p><code>@return \\TYPO3\\CMS\\Core\\Database\\Connection<\/code><\/p>"},"509d26f90c6ed9ce6ad5b4cd40165eed":{"_cs":"0d40fe6b7d0da1fdbbe3508ba9f062b0","text":"<p>Get delete column for specific table<\/p>\n<p>This column is used as a flag for deleted records.\nNormally: <code>deleted<\/code> = 1<\/p>\n<p><code>@param string $table<\/code>\n<code>@return string<\/code><\/p>"},"72ee6479dd5724e2882500cace97f397":{"_cs":"90f1a9db011bb9e40a223e55d22e805b","text":"<p>GetQueryBuilder for a table<\/p>\n<pre><code class=\"language-php\">$queryBuilder = \\nn\\t3::Db()->getQueryBuilder( 'fe_users' );<\/code><\/pre>\n<p>Example:<\/p>\n<pre><code class=\"language-php\">$queryBuilder = \\nn\\t3::Db()->getQueryBuilder( 'fe_users' );\n$queryBuilder->select('name')->from( 'fe_users' );\n$queryBuilder->andWhere( $queryBuilder->expr()->eq( 'uid', $queryBuilder->createNamedParameter(12) ));\n$rows = $queryBuilder->execute()->fetchAll();<\/code><\/pre>\n<p><code>@param string $table<\/code>\n<code>@return QueryBuilder<\/code><\/p>"},"9cb53a89e3fa52e91455222cac4e996d":{"_cs":"4977297ece0b5fef4e7905b19f2aacf8","text":"<p>Get the repository instance for a model (or model class name)<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Db()->getRepositoryForModel( \\My\\Domain\\Model\\Name::class );\n\\nn\\t3::Db()->getRepositoryForModel( $myModel );<\/code><\/pre>\n<p><code>@param mixed $className<\/code>\n<code>@return \\TYPO3\\CMS\\Extbase\\Persistence\\Repository<\/code><\/p>"},"a003e1b097e7cef850158f07b8c98278":{"_cs":"f5b8963250bdc00d14a0857b759a99ac","text":"<p>Get table name for a model (or a model class name).\nAlias to <code>\\nn\\t3::Obj()->getTableName()<\/code><\/p>\n<pre><code class=\"language-php\">\/\/ tx_myext_domain_model_entry\n\\nn\\t3::Db()->getTableNameForModel( $myModel );\n\n\/\/ tx_myext_domain_model_entry\n\\nn\\t3::Db()->getTableNameForModel( $myModel );<\/code><\/pre>\n<p><code>@param mixed $className<\/code>\n<code>@return string<\/code><\/p>"},"35bc1476db13b51e131918e143e8311e":{"_cs":"f0c53c62fe573273c20cba339705060f","text":"<p>Removes default constraints to the StoragePID, hidden and\/or deleted\nto a query or repository.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Db()->ignoreEnableFields( $entryRepository );\n\\nn\\t3::Db()->ignoreEnableFields( $query );<\/code><\/pre>\n<p>Example of a custom query:<\/p>\n<pre><code class=\"language-php\">$table = 'tx_myext_domain_model_entry';\n$queryBuilder = \\nn\\t3::Db()->getQueryBuilder( $table );\n$queryBuilder->select('uid','title','hidden')->from( $table );\n\\nn\\t3::Db()->ignoreEnableFields( $queryBuilder, true, true );\n$rows = $queryBuilder->execute()->fetchAll();<\/code><\/pre>\n<p>If that doesn't do the trick or gets too complicated, see:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Db()->statement();<\/code><\/pre>\n<p><code>@param mixed $queryOrRepository<\/code>\n<code>@param boolean $ignoreStoragePid<\/code>\n<code>@param boolean $ignoreHidden<\/code>\n<code>@param boolean $ignoreDeleted<\/code>\n<code>@param boolean $ignoreStartEnd<\/code>\n<code>@return mixed<\/code><\/p>"},"1103095c26379a93aaf4906175a276e0":{"_cs":"8addf1941a7c0fd3599f83f7ae92df30","text":"<p>Insert database entry. Simple and foolproof.\nEither the table name and an array can be passed - or a domain model.<\/p>\n<p>Inserting a new record by table name and data array:<\/p>\n<pre><code class=\"language-php\">$insertArr = \\nn\\t3::Db()->insert('table', ['bodytext'=>'...']);<\/code><\/pre>\n<p>Insert a new model. The repository is determined automatically.\nThe model will be persisted directly.\n<pre><code class=\"language-php\">$model = new \\My\\Nice\\Model();\n$persistedModel = \\nn\\t3::Db()->insert( $model );<\/code><\/pre>\n<p><code>@param mixed $tableNameOrModel<\/code>\n<code>@param array $data<\/code>\n<code>@return mixed<\/code><\/p>"},"3835a3ba66d4512e4ed93bd630efdea2":{"_cs":"335a46a8eb244d0c3ccf69502742c1f6","text":"<p>Set sorting for a repository or a query.<\/p>\n<pre><code class=\"language-php\">$ordering = ['title' => \\TYPO3\\CMS\\Extbase\\Persistence\\QueryInterface::ORDER_DESCENDING];\n\\nn\\t3::Db()->orderBy( $queryOrRepository, $ordering );\n\n\/\/ asc and desc can be used as synonyms\n$ordering = ['title' => 'asc'];\n$ordering = ['title' => 'desc'];\n\\nn\\t3::Db()->orderBy( $queryOrRepository, $ordering );<\/code><\/pre>\n<p>Can also be used to sort by a list of values (e.g. <code>uids<\/code>).\nThis is done by passing an array for the value of the single ordering:<\/p>\n<pre><code class=\"language-php\">$ordering = ['uid' => [3,7,2,1]];\n\\nn\\t3::Db()->orderBy( $queryOrRepository, $ordering );<\/code><\/pre>\n<p><code>@param mixed $queryOrRepository<\/code>\n<code>@param array $ordering<\/code>\n<code>@return mixed<\/code><\/p>"},"0292f8a23d42a8c29c33e9ea964bc697":{"_cs":"46ecd91921f88f5d30e44af882b9b481","text":"<p>PersistAll.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Db()->persistAll();<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"109259cc8d844a8b20240328dade2311":{"_cs":"e14226dc1090ba96277e4a0437938f22","text":"<p>A replacement for the <code>mysqli_real_escape_string()<\/code> method.\n<p>Should be used only in case of emergency for low-level queries.\nIt is better to use <code>preparedStatements<\/code>.<\/p>\n<p>Works only for SQL, not for DQL.<\/p>\n<pre><code class=\"language-php\">$sword = \\nn\\t3::Db()->quote('test'); \/\/ => 'test'\n$sword = \\nn\\t3::Db()->quote('test';SET\"); \/\/ => 'test\\';SET'\n$sword = \\nn\\t3::Db()->quote([1, 'test', '2']); \/\/ => [1, \"'test'\", '2']\n$sword = \\nn\\t3::Db()->quote('\"; DROP TABLE fe_user;#');<\/code><\/pre>\n<p><code>@param string|array $value<\/code>\n<code>@return string|array<\/code><\/p>"},"1191d948506cd0ee7ddd6d6a9393f4e0":{"_cs":"7f98b01da424fc025185d45c7cb70a2a","text":"<p>Create database record OR update an existing record.<\/p>\n<p>Decides independently whether the entry must be inserted into the database via <code>UPDATE<\/code> or <code>INSERT<\/code>\nor an existing record must be updated. The data will be\npersisted directly!<\/p>\n<p>Example for passing a table name and an array:<\/p>\n<pre><code class=\"language-php\">\/\/ no uid passed? Then INSERT a new record\n\\nn\\t3::Db()->save('table', ['bodytext'=>'...']);\n\n\/\/ pass uid? Then UPDATE existing data\n\\nn\\t3::Db()->save('table', ['uid'=>123, 'bodytext'=>'...']);<\/code><\/pre>\n<p>Example for passing a domain model:<\/p>\n<pre><code class=\"language-php\">\/\/ new model? Will be added by $repo->add()\n$model = new \\My\\Nice\\Model();\n$model->setBodytext('...');\n$persistedModel = \\nn\\t3::Db()->save( $model );\n\n\/\/ existing model? Will be updated by $repo->update()\n$model = $myRepo->findByUid(123);\n$model->setBodytext('...');\n$persistedModel = \\nn\\t3::Db()->save( $model );<\/code><\/pre>\n<p><code>@param mixed $tableNameOrModel<\/code>\n<code>@param array $data<\/code>\n<code>@return mixed<\/code><\/p>"},"e1dbda7f67b40346a3832cfb20597eb5":{"_cs":"1c038b67080efcbbfe7f4e697439fd50","text":"<p>Add a constraint for sys_file_reference to a QueryBuilder.\nRestricts the results to whether there is a FAL relation.<\/p>\n<pre><code class=\"language-php\">$queryBuilder = \\nn\\t3::Db()->getQueryBuilder( $table );\n\n\/\/ Get only records that have at least one SysFileReference for falfield.\n\\nn\\t3::Db()->setFalConstraint( $queryBuilder, 'tx_myext_tablename', 'falfield' );\n\n\/\/ ... which do NOT have a SysFileReference for falfield\n\\nn\\t3::Db()->setFalConstraint( $queryBuilder, 'tx_myext_tablename', 'falfield', false );\n\n\/\/ ... which have EXACTLY 2 SysFileReferences\n\\nn\\t3::Db()->setFalConstraint( $queryBuilder, 'tx_myext_tablename', 'falfield', 2 );\n\n\/\/ ... which have 2 or less (less than or equal) SysFileReferences\n\\nn\\t3::Db()->setFalConstraint( $queryBuilder, 'tx_myext_tablename', 'falfield', 2, 'lte' );<\/code><\/pre>\n<p><code>@param \\TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder $queryBuilder<\/code>\n<code>@param string $tableName<\/code>\n<code>@param string $falFieldName<\/code>\n<code>@param boolean $numFal<\/code>\n<code>@param boolean $operator<\/code>\n<code>@return \\TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder<\/code><\/p>"},"02b2daaccf83f8939f86e7bda183a17c":{"_cs":"9211c1e8cdb1fd30f7d35bd17c4cedb2","text":"<p>Constrain the constraint to records that are NOT in one of the specified categories.\nOpposite and alias to <code>\\nn\\t3::Db()->setSysCategoryConstraint()<\/code><\/p>\n<pre><code class=\"language-php\">$queryBuilder = \\nn\\t3::Db()->getQueryBuilder( $table );\n\\nn\\t3::Db()->setNotInSysCategoryConstraint( $queryBuilder, [1,3,4], 'tx_myext_tablename', 'categories' );<\/code><\/pre>\n<p><code>@param \\TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder $queryBuilder<\/code>\n<code>@param array $sysCategoryUids<\/code>\n<code>@param string $tableName<\/code>\n<code>@param string $categoryFieldName<\/code>\n<code>@return \\TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder<\/code><\/p>"},"d1e5f3f76ce007e1c73de31af0d8a28e":{"_cs":"5736d66fe46408588a1e415d35817476","text":"<p>Add constraint for sys_category \/ sys_category_record_mm to a QueryBuilder.\nRestricts the results to the specified sys-categories UIDs.<\/p>\n<pre><code class=\"language-php\">$queryBuilder = \\nn\\t3::Db()->getQueryBuilder( $table );\n\\nn\\t3::Db()->setSysCategoryConstraint( $queryBuilder, [1,3,4], 'tx_myext_tablename', 'categories' );<\/code><\/pre>\n<p><code>@param \\TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder $querybuilder<\/code>\n<code>@param array $sysCategoryUids<\/code>\n<code>@param string $tableName<\/code>\n<code>@param string $categoryFieldName<\/code>\n<code>@param boolean $useNotIn<\/code>\n<code>@return \\TYPO3\\CMS\\Core\\Database\\Query\\QueryBuilder<\/code><\/p>"},"c83da6aed2daecb80cac5d9b73ff99d2":{"_cs":"7477ee1811b409548d6dd7a7dd4cddfa","text":"<p>Sorts results of a query by an array and specific field.\nResolves the problem that a <code>->in()<\/code> query does not return results\nin the order of the given IDs. Example:\n<code>$query->matching($query->in('uid', [3,1,2]));<\/code> does not necessarily return\nreturned in the order <code>[3,1,2]<\/code>.<\/p>\n<pre><code class=\"language-php\">$insertArr = \\nn\\t3::Db()->sortBy( $storageOrArray, 'uid', [2,1,5]);<\/code><\/pre>\n<p><code>@param mixed $objectArray<\/code>\n<code>@param string $fieldName<\/code>\n<code>@param array $uidList<\/code>\n<code>@return array<\/code><\/p>"},"847efdf03e3958c9b91dc986648f2769":{"_cs":"054d62a60176858e03069bea99c42aa6","text":"<p>Submit a \"raw\" query to the database.\nCloser to the database is not possible. You are responsible for everything yourself.\nInjections are only opposed by your (hopefully sufficient :) intelligence.\n<p>Helps e.g. with queries of tables, which are not part of the Typo3 installation and are therefore\ntherefore could not be reached via the normal QueryBuilder.<\/p>\n<pre><code class=\"language-php\">\/\/ ALWAYS escape variables!\n$keyword = \\nn\\t3::Db()->quote('search term');\n$rows = \\nn\\t3::Db()->statement( \"SELECT FROM tt_news WHERE bodytext LIKE '%${keyword}%'\");\n\n\/\/ or better use prepared statements:\n$rows = \\nn\\t3::Db()->statement( 'SELECT FROM tt_news WHERE bodytext LIKE :str', ['str'=>\"%${keyword}%\"] );<\/code><\/pre>\n<p>For a <code>SELECT<\/code> statement, the rows from the database are returned as an array.\nFor all other statements (e.g. <code>UPDATE<\/code> or <code>DELETE<\/code>) the number of affected rows is returned.<\/p>\n<p><code>@param string $statement<\/code>\n<code>@param array $params<\/code>\n<code>@return mixed<\/code><\/p>"},"3b4717b95d041031665a25384c9616df":{"_cs":"bb122753f31fc1592118af232611af49","text":"<p>Exists a specific DB table?<\/p>\n<pre><code class=\"language-php\">$exists = \\nn\\t3::Db()->tableExists('table');<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"a5ad271fe8de0fb31beba88f3104d2f9":{"_cs":"27ef918f11aabd7ab8a161ee0ba156cb","text":"<p>Clear database table.\nDeletes all entries in the specified table and resets the auto-increment value to <code>0<\/code>\n<pre><code class=\"language-php\">\\nn\\t3::Db()->truncate('table');<\/code><\/pre>\n<p><code>@param string $table<\/code>\n<code>@return boolean<\/code><\/p>"},"1513e31eb71cbdb7693de69bd5755d61":{"_cs":"768990716b4fa0fd33f723f52162da24","text":"<p>Restore deleted database entry.\nThis is done by setting the flag for \"deleted\" (<code>deleted<\/code>) back to <code>0<\/code>.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Db()->undelete('table', $uid);\n\\nn\\t3::Db()->undelete('table', ['uid_local'=>$uid]);<\/code><\/pre>\n<p><code>@param string $table<\/code>\n<code>@param array $constraint<\/code>\n<code>@return boolean<\/code><\/p>"},"eeb855ae6923be7a0ac340c448503c34":{"_cs":"b9040c9b346e125cd75e964b30dd6ae7","text":"<p>Update database entry. Quick and easy.\nThe update can happen either by table name and data array.\nOr you can pass a model.<\/p>\n<p>Examples:<\/p>\n<pre><code class=\"language-php\">\/\/ UPDATES table SET title='new' WHERE uid=1\n\\nn\\t3::Db()->update('table', ['title'=>'new'], 1);\n\n\/\/ UPDATE table SET title='new' WHERE email='david@99grad.de' AND pid=12\n\\nn\\t3::Db()->update('table', ['title'=>'new'], ['email'=>'david@99grad.de', 'pid'=>12, ...]);<\/code><\/pre>\n<p>With <code>true<\/code> instead of a <code>$uid<\/code> ALL records of the table will be updated.<\/p>\n<pre><code class=\"language-php\">\/\/ UPDATE table SET test='1' WHERE 1\n\\nn\\t3::Db()->update('table', ['test'=>1], true);<\/code><\/pre>\n<p>Instead of a table name, a simple model can also be passed.\nThe repository will be determined automatically and the model will be persisted directly.\n<pre><code class=\"language-php\">$model = $myRepo->findByUid(1);\n\\nn\\t3::Db()->update( $model );<\/code><\/pre>\n<p><code>@param mixed $tableNameOrModel<\/code>\n<code>@param array $data<\/code>\n<code>@param int $uid<\/code>\n<code>@return mixed<\/code><\/p>"},"ad1273d83197be5f4e7abffa1980cea3":{"_cs":"8192ed530e6d5c2153232918d69056cf","text":"<p>Manipulating DOM and XML.\nStill a work in progress :)<\/p>"},"f03f00cbfc36d04ad21616116cdc8750":{"_cs":"2388ded568da9023830eb18cc80a5a10","text":"<p>Replaces links and paths to images etc. in source code with absolute URL.\ne.g. for sending mails\n<code>@return string<\/code><\/p>"},"d9280db700fb7d96803a19fe1ff97807":{"_cs":"cbae424a5a8ba048c85b1cd81294e3a1","text":"<p>Encrypting and hashing passwords<\/p>"},"67ca13622d30f85648b4437bfe691d68":{"_cs":"dc3a38115fb256bf85d4846b6c36f894","text":"<p>Checks if the hash of a password and a password match.\nApplication: Compare the password hash of a fe_user in the database with the supplied password.\n<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Encrypt()->checkPassword('99grad', '$1$wtnFi81H$mco6DrrtdeqiziRJyisdK1.');<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"9bc009dc65b75063cd0aaa97a5b3ccfe":{"_cs":"afcc6ad490ca7a0ba41486fe09b5d67e","text":"<p>Create a signature for a JWT (Json Web Token).\nThe signature will later be transmitted by the user as part of the token.<\/p>\n<pre><code class=\"language-php\">$signature = \\nn\\t3::Encrypt()->createJwtSignature(['alg'=>'HS256', 'typ'=>'JWT'], ['test'=>123]);<\/code><\/pre>\n<p><code>@param array $header<\/code>\n<code>@param array $payload<\/code>\n<code>@return string<\/code><\/p>"},"2a44ab942110380d47d67e10eec5d236":{"_cs":"241060415f81d3f195f5b379e0562f42","text":"<p>Decrypts a string or an array.\nTo encrypt the data, <code>\\nn\\t3::Encrypt()->encode()<\/code> can be used.\nSee <code>\\nn\\t3::Encrypt()->encode()<\/code> for a complete example.\n<pre><code class=\"language-php\">\\nn\\t3::Encrypt()->decode( '...' );<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"a9a2f3542fa78f0ec3f9617ac101999a":{"_cs":"e928e633a0b358ad2d3ba51f24c30cbc","text":"<p>Encrypts a string or an array<\/p>\n<p>In contrast to <code>\\nn\\t3::Encrypt()->hash()<\/code>, an encrypted value can be decrypted by <code>\\nn\\t3::Encrypt()->decode()<\/code>\ncan be decrypted again. This method is therefore <strong>not<\/strong> suitable for storing sensitive data such as passwords in a database.\nin a database. Nevertheless, the protection is relatively high, as even identical data encrypted with the same\nencrypted with the same salting key look different.<\/p>\n<p>For the encryption, a salting key is generated and stored in the extension manager of <code>nnhelpers<\/code>\nThis key is unique for each installation. If it is changed, then already encrypted data cannot be decrypted again.\nbe decrypted again.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Encrypt()->encode( 'mySecretSomething' );\n\\nn\\t3::Encrypt()->encode( ['some'=>'secret'] );<\/code><\/pre>\n<p>Complete example with encryption and decryption:<\/p>\n<pre><code class=\"language-php\">$encryptedResult = \\nn\\t3::Encrypt()->encode( ['password'=>'mysecretsomething'] );\necho \\nn\\t3::Encrypt()->decode( $encryptedResult )['password'];\n\n$encryptedResult = \\nn\\t3::Encrypt()->encode( 'some_secret_phrase' );\necho \\nn\\t3::Encrypt()->decode( $encryptedResult );<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"26c72ead1dc6a726e7933f4ccf0eb281":{"_cs":"71ac0f0cf62f4b9bad804e1740da5f22","text":"<p>Returns the class name of the current hash algorithm of an encrypted password,\ne.g. to know at fe_user how the password was encrypted in the DB.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Encrypt()->getHashInstance('$P$CIz84Y3r6.0HX3saRwYg0ff5M0a4X1.');\n\/\/ => \\TYPO3\\CMS\\Core\\Crypto\\PasswordHashing\\PhpassPasswordHash<\/code><\/pre>\n<p><code>@return class<\/code><\/p>"},"43890e049c7ca5a5251baaaf5baa5565":{"_cs":"c873a1c85f45b6eb2b760c325260007c","text":"<p>Get the enryption \/ salting key from the extension configuration for <code>nnhelpers<\/code>\nIf no key has been set in the extension manager, it will be generated automatically.\nand stored in the <code>LocalConfiguration.php<\/code>\n<pre><code class=\"language-php\">\\nn\\t3::Encrypt()->getSaltingKey();<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"220dc14e47015c2dda10c1ba1cc4baf0":{"_cs":"a26245df7cf3772ee0ce20145789a6dc","text":"<p>Simple hashing, e.g. when checking a uid against a hash.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Encrypt()->hash( $uid );<\/code><\/pre>\n<p>Also acts as a ViewHelper:<\/p>\n<pre><code class=\"language-php\">{something->nnt3:encrypt.hash()}<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"82d31042cdb4e5632e90554fca26458b":{"_cs":"fa37624fcb8cbd75b02383bd1f7b7711","text":"<p>Checks if hash needs to be updated because it does not correspond to the current encryption algorithm.\nWhen updating Typo3 to a new LTS, the hashing algorithm of the passwords in the database is also often\nis improved. This method checks whether the passed hash is still up to date or needs to be updated.<\/p>\n<p>Returns <code>true<\/code> if an update is required.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Encrypt()->hashNeedsUpdate('$P$CIz84Y3r6.0HX3saRwYg0ff5M0a4X1.'); \/\/ true<\/code><\/pre>\n<p>An automatic password update could look like this in a manual FE user authentication service:<\/p>\n<pre><code class=\"language-php\">$uid = $user['uid']; \/\/ uid of the FE user.\n$authResult = \\nn\\t3::Encrypt()->checkPassword( $passwordHashInDatabase, $clearTextPassword );\nif ($authResult && \\nn\\t3::Encrypt()->hashNeedsUpdate( $passwordHashInDatabase )) {\n    \\nn\\t3::FrontendUserAuthentication()->setPassword( $uid, $clearTextPassword );\n}<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"cdb3e706015d3a5be723b3aa56855580":{"_cs":"6f9000c0b86898a301a7df43e0c4e349","text":"<p>Get session hash for <code>fe_sessions.ses_id<\/code>\nCorresponds to the value stored in the database for the cookie <code>fe_typo_user<\/code>\n<p>In TYPO3 < v10 an unchanged value is returned here. As of TYPO3 v10, the session ID is stored in the\ncookie <code>fe_typo_user<\/code> is no longer stored directly in the database, but hashed.\nSee: <code>TYPO3\\CMS\\Core\\Session\\Backend\\DatabaseSessionBackend->hash()<\/code>.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Encrypt()->hashSessionId( $sessionIdFromCookie );<\/code><\/pre>\n<p>Example:<\/p>\n<pre><code class=\"language-php\">$cookie = $_COOKIE['fe_typo_user'];\n$hash = \\nn\\t3::Encrypt()->hashSessionId( $cookie );\n$sessionFromDatabase = \\nn\\t3::Db()->findOneByValues('fe_sessions', ['ses_id'=>$hash]);<\/code><\/pre>\n<p>Used by, among others: <code>nn\\t3::FrontendUserAuthentication()->loginBySessionId()<\/code>.<\/p>\n<p><code>@return string<\/code><\/p>"},"8dd0ba263877d327c2cc8fc033934f6d":{"_cs":"b77c1c99438bc7c450b22482738d17be","text":"<p>Create a JWT (Json Web Token), sign it and return it <code>base64<\/code>-encoded.<\/p>\n<p><strong>Don't forget:<\/strong> A JWT is \"forgery-proof\" because the signature hash can only be generated with the\nwith the correct key\/salt \u00e2 but all the data in the JWT is\nby <code>base64_decode()<\/code>. A JWT is not suitable to store sensitive data like passwords or\npasswords or logins!<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Encrypt()->jwt(['test'=>123]);<\/code><\/pre>\n<p><code>@param array $payload<\/code>\n<code>@return string<\/code><\/p>"},"6e902a18e2dbf70d1969106ff2bd7ed5":{"_cs":"831f3c877acb25c400f6fe911128bfcc","text":"<p>Parse a JWT (Json Web Token) and verify the signature.\nIf the signature is valid (and thus the payload has not been tampered with), the payload is returned.\npayload is returned. If the signature is invalid, <code>FALSE<\/code> is returned.\n<pre><code class=\"language-php\">\\nn\\t3::Encrypt()->parseJwt('adhjdf.fsdfkjds.HKdfgfksfdsf');<\/code><\/pre>\n<p><code>@param string $token<\/code>\n<code>@return array|false<\/code><\/p>"},"d3beef1ae111a2f1efe561418dd346ef":{"_cs":"473266912ac031c9f24a24c6d78d30fa","text":"<p>Hashing of a password according to Typo3 principle.\nApplication: Overwrite password of a fe_user in the database<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Encrypt()->password('99grad');<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"4d30050986da8b33219567a9a8b614bf":{"_cs":"4532d585c156ed5abac3ec931087151c","text":"<p>Everything you need to know about the environment of the application.\nFrom the language ID of the user, the baseUrl to what extensions are at the start.<\/p>"},"8c32029d73e53f638e477eaa214f4331":{"_cs":"12333027c85fc540be15daf72225a4d6","text":"<p>Check if extension is loaded<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Environment()->extLoaded('news');<\/code><\/pre>"},"133992b2e1024a08f9006a59f087fd21":{"_cs":"9530692716eef31444fbc90871a57e70","text":"<p>get absolute path to an extension.\ne.g. <code>\/var\/www\/website\/ext\/nnsite\/<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Environment()->extPath('extname');<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"46329cc4144beb1e3e712a145fd58289":{"_cs":"e8812b7988a311e9defd365732b5b938","text":"<p>get relative path (from current script) to an extension.\ne.g. <code>..\/typo3conf\/ext\/nnsite\/<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Environment()->extRelPath('extname');<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"c41f035fef7b91cafc4e143b70f201c8":{"_cs":"f63c39298bef4ce76ec16c494127bc5e","text":"<p>Returns the baseUrl (<code>config.baseURL<\/code>), including http(s) protocol e.g. <a href=\"https:\/\/www.webseite.de\/\">https:\/\/www.webseite.de\/<\/a><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Environment()->getBaseURL();<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"85ea2b569d8a7dbecde1b87df8282921":{"_cs":"9d0c29d46ed91e2ef687a14d0e0404ae","text":"<p>Get the cookie domain e.g. www.webseite.de<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Environment()->getCookieDomain()<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"3c5fd6ee5de5f465cf8a0150c2c514be":{"_cs":"4b937f9566c8e1c9fc7666c26643ad7d","text":"<p>Get all countries available in the system<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Environment()->getCountries();<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"720f7044fbf0cf7d1efacc5d57e9403b":{"_cs":"79000d0267f0abdb6606672b18819d1f","text":"<p>Get a country from the <code>static_countries<\/code> table.\nby its country code (e.g. <code>DE<\/code>)<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Environment()->getCountryByIsocode( 'DE' );\n\\nn\\t3::Environment()->getCountryByIsocode( 'DEU', 'cn_iso_3' );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"930b6be418ab3dd44bcab90cca833688":{"_cs":"2c66c0902d8a0bc56aa0064b21b9595f","text":"<p>Returns the default language. In TYPO3 this is always the language with ID <code>0<\/code>\nThe languages must be set in the YAML site configuration.\n<pre><code class=\"language-php\">\/\/ 'en'\n\\nn\\t3::Environment()->getDefaultLanguage();\n\n\/\/ 'de-DE'\n\\nn\\t3::Environment()->getDefaultLanguage('hreflang');\n\n\/\/ ['title'=>'German', 'typo3Language'=>'de', ...]\n\\nn\\t3::Environment()->getDefaultLanguage( true );<\/code><\/pre>\n<p><code>@param string|boolean $returnKey<\/code>\n<code>@return string|array<\/code><\/p>"},"f117f4628a8c68a4ebb6754daf515cce":{"_cs":"f842fb311e43acfdd603d68566cdea67","text":"<p>Get the domain e.g. www.webseite.de<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Environment()->getDomain();<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"845ae00a90eab8d9feb86b710744b54e":{"_cs":"67484073f68dbbabeba1342439eb3f1c","text":"<p>Get configuration from <code>ext_conf_template.txt<\/code> (Backend, Extension Configuration)<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Environment()->getExtConf('nnhelpers', 'varname');<\/code><\/pre>\n<p>Also acts as a ViewHelper:<\/p>\n<pre><code class=\"language-php\">{nnt3:ts.extConf(path:'nnhelper')}\n{nnt3:ts.extConf(path:'nnhelper.varname')}\n{nnt3:ts.extConf(path:'nnhelper', key:'varname')}<\/code><\/pre>\n<p><code>@return mixed<\/code><\/p>"},"604b81bf57a72e996c5d417f0c05e19c":{"_cs":"551f79024b384094f418cb247ea8953e","text":"<p>Get the current language (as a number) of the frontend.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Environment()->getLanguage();<\/code><\/pre>\n<p><code>@return int<\/code><\/p>"},"fef3ac9738b7e78e3ddcb81c40f43fa5":{"_cs":"9919a125ea6a9b7c50eef3d0bdff2a46","text":"<p>Returns a list of languages to be used if, for example, a page or an element\ne.g. a page or element does not exist in the desired language.<\/p>\n<p>Important: The fallback chain will contain the current language or the language passed in $langUid\nin the first place.<\/p> <p>Important: The fallback chain contains the current language in the first place.\n<pre><code class=\"language-php\">\/\/ Use settings for current language (see Site-Config YAML).\n\\nn\\t3::Environment()->getLanguageFallbackChain(); \/\/ --> e.g. [0] or [1,0]\n\n\/\/ get settings for a specific language\n\\nn\\t3::Environment()->getLanguageFallbackChain( 1 );\n\/\/ --> [1,0] - if fallback is defined in site config and fallbackMode is set to \"fallback\".\n\/\/ --> [1] - if there is no fallback or the fallbackMode is set to \"strict\"<\/code><\/pre>\n<p><code>@param string|boolean $returnKey<\/code>\n<code>@return string|array<\/code><\/p>"},"7340d415d7808aa72fe5ffa93babc0ec":{"_cs":"a6adeb206bdb316a0cc85914ba76f6c2","text":"<p>Get the current language (as an abbreviation like \"de\") in the frontend<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Environment()->getLanguageKey();<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"763c17106be1c1132ba8c0cafedd4f61":{"_cs":"ea71dd15a5cec9c6890fd77796dde539","text":"<p>Returns a list of all defined languages.\nThe languages must be defined in the YAML site configuration.\n<pre><code class=\"language-php\">\/\/ [['title'=>'German', 'typo3Language'=>'de', ....], ['title'=>'English', 'typo3Language'=>'en', ...]]\n\\nn\\t3::Environment()->getLanguages();\n\n\/\/ ['de'=>['title'=>'German', 'typo3Language'=>'de'], 'en'=>['title'=>'English', 'typo3Language'=>'en', ...]]\n\\nn\\t3::Environment()->getLanguages('iso-639-1');\n\n\/\/ ['de'=>0, 'en'=>1]\n\\nn\\t3::Environment()->getLanguages('typo3Language', 'languageId');\n\n\/\/ [0=>'de', 1=>'en']\n\\nn\\t3::Environment()->getLanguages('languageId', 'typo3Language');<\/code><\/pre>\n<p><code>@param string $key<\/code>\n<code>@param string $value<\/code>\n<code>@return string|array<\/code><\/p>"},"ed030320d175ccf0f592d0a3f96036d6":{"_cs":"d5c577027f2d874b432e1e755d95ea10","text":"<p>Get configuration from <code>LocalConfiguration.php<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Environment()->getLocalConf('FE.cookieName');<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"89d2ac96c24b2354fc7890e6b9ce7809":{"_cs":"9960db80c009c64edd3f3137cb50d4c4","text":"<p>Get absolute path to Typo3 root directory. e.g. <code>\/var\/www\/website\/<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Environment()->getPathSite()<\/code><\/pre>\n<p>formerly: <code>PATH_site<\/code><\/p>"},"158637144107a47286feea1643ba9af9":{"_cs":"37fc587902aa76cec6225822a9438d1d","text":"<p>Return maximum upload size for files from the frontend.\nThis is the value set in php.ini and may be overridden by the .htaccess file.\noverridden by the .htaccess.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Environment()->getPostMaxSize(); \/\/ e.g. '1048576' for 1MB<\/code><\/pre>\n<p><code>@return integer<\/code><\/p>"},"1fead780b6e8c1614800044a8311cd80":{"_cs":"08d0dc98d11622513f73a502b8ced742","text":"<p>Return the list of PSR4 prefixes<\/p>\n<p>This is an array of all the folders that need to be parsed by class when TYPO3 autoloads \/ bootstraps.\nby classes during the autoloading \/ bootstrap process. In a TYPO3 extension this is by default the folder <code>Classes<\/code>\nThe list is generated by Composer\/TYPO3.<\/p>\n<p>The returned value is an array. Key is <code>Vendor\\Namespace\\<\/code>, value is an array with paths to the folders,\nwhich will be searched recursively for classes. It doesn't matter if TYPO3 is running in composer mode or not.\nmode or not.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Environment()->getPsr4Prefixes();<\/code><\/pre>\n<p>Example return:<\/p>\n<pre><code class=\"language-php\">[\n    'Nng\\Nnhelpers\\' => ['\/path\/to\/composer\/..\/..\/public\/typo3conf\/ext\/nnhelpers\/Classes', ...],\n    'Nng\\Nnrestapi\\' => ['\/path\/to\/composer\/..\/..\/public\/typo3conf\/ext\/nnrestapi\/Classes', ...]\n]<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"19f6546dbbfccc5c601b02f8914fc5af":{"_cs":"ecdb8b32a6810b88859b3572262693de","text":"<p>Get relative path to Typo3 root directory. e.g. <code>..\/<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Environment()->getRelPathSite()<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"391c8a3bf31c4997da07182f82d8e08b":{"_cs":"4226b2a5ecc8935b9a23ee1b6c3ebfd6","text":"<p>Get the current <code>site<\/code> object.\nThis object can be used to access the configuration from the site YAML file, e.g. as of TYPO3 9.<\/p>\n<p>In the context of a MiddleWare, the <code>site<\/code> may not yet be parsed \/ loaded.\nIn this case, the <code>$request<\/code> can be passed from the MiddleWare to get the site.<\/p>\n<p>See also <code>\\nn\\t3::Settings()->getSiteConfig()<\/code> to get the site configuration.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Environment()->getSite();\n\\nn\\t3::Environment()->getSite( $request );\n\n\\nn\\t3::Environment()->getSite()->getConfiguration();\n\\nn\\t3::Environment()->getSite()->getIdentifier();<\/code><\/pre>\n<p><code>@return \\TYPO3\\CMS\\Core\\Site\\Entity\\Site<\/code><\/p>"},"8dc623ad91d689d88778ddbd02f4484d":{"_cs":"31c1331f687664fe41302b18a7c9a40b","text":"<p>Get the absolute path to the <code>\/var<\/code> directory of Typo3.\n<p>This directory stores temporary cache files.\nDepending on the version of Typo3 and the installation type (Composer or Non-Composer mode)\nthis directory can be found in different locations.<\/p> <p\n<pre><code class=\"language-php\">\/\/ \/full\/path\/to\/typo3temp\/var\/\n$path = \\nn\\t3::Environment()->getVarPath();<\/code><\/pre>"},"9963bc926071224e3476a6c3710bd6d6":{"_cs":"022aad39cfa722935d892dc7856d149c","text":"<p>Check if we are in the backend context<\/p>\n<pre><code class=\"language-php\"> \\nn\\t3::Environment()->isBackend();<\/code><\/pre>\n<p><code>@return bool<\/code><\/p>"},"847571f1696c7eb025d7e2e8df343dc7":{"_cs":"bdf3b8d7f82f994fca045fb0c36bbb78","text":"<p>Check if we are in the frontend context<\/p>\n<pre><code class=\"language-php\"> \\nn\\t3::Environment()->isFrontend();<\/code><\/pre>\n<p><code>@return bool<\/code><\/p>"},"af4909783779779651bfdafd1dae3cb8":{"_cs":"da4a7b6c316849852e07082a07c7aa86","text":"<p>Checks if installation is running on local server<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Environment()->isLocalhost()<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"db8bfc93e11360dbb76d6d79fc88af19":{"_cs":"25d22d664a89725728773724d1e8f85f","text":"<p>Get the version of Typo3, as an integer, e.g. \"8\".\nAlias to <code>\\nn\\t3::t3Version()<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Environment()->t3Version();\n\nif (\\nn\\t3::t3Version() >= 8) {\n    \/\/ only for >= Typo3 8 LTS\n}<\/code><\/pre>\n<p><code>@return int<\/code><\/p>"},"7a583b4dd18b9c64a174e56c7287d52a":{"_cs":"76ffb8b95f0d66858e6a71e1bb6c0add","text":"<p>Output errors and exceptions<\/p>"},"7632d8820617d453ecda65af576e3d9b":{"_cs":"c0045d24716a0a2c9cb1409fb6aee973","text":"<p>Throwing an error with backtrace<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Errors()->Error('Damn', 1234);<\/code><\/pre>\n<p>Is an alias to:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Error('Damn', 1234);<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"539dc7e71db989fc102fa7ff241d82dd":{"_cs":"c9fdfca209cfa03873727e6c66ad45fa","text":"<p>Throwing a Typo3 exception with backtrace<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Errors()->Exception('Damn', 1234);<\/code><\/pre>\n<p>Is an alias to:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Exception('Damn', 1234);<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"ba6d913020bd7cc08668e98120d6b06b":{"_cs":"06a86e74af3ebe45bdf1555a780adc80","text":"<p>Methods to create sysFile and sysFileReference entries.<\/p>\n<p>Checklist:<\/p>\n<pre><code class=\"language-php\">\\TYPO3\\CMS\\Extbase\\Persistence\\Generic\\ObjectStorage\n |\n └─ \\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference\n        ... getOriginalResource()\n                |\n                └─ \\TYPO3\\CMS\\Core\\Resource\\FileReference\n                    ... getOriginalFile()\n                            |\n                            └─ \\TYPO3\\CMS\\Core\\Resource\\File<\/code><\/pre>"},"def11d77af7145bf807c81a609b93909":{"_cs":"0e4d7a6ca84ffc4c4af856605756feb1","text":"<p>Convert a file to a FileReference object and append it to the\nto the property or ObjectStorage of a model.\nSee also: <code>\\nn\\t3::Fal()->setInModel( $member, 'falslideshow', $imagesToSet );<\/code> with the\narray of multiple images can be attached to an ObjectStorage.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Fal()->attach( $model, $fieldName, $filePath );\n\\nn\\t3::Fal()->attach( $model, 'image', 'fileadmin\/user_uploads\/image.jpg' );\n\\nn\\t3::Fal()->attach( $model, 'image', ['publicUrl'=>'fileadmin\/user_uploads\/image.jpg'] );\n\\nn\\t3::Fal()->attach( $model, 'image', ['publicUrl'=>'fileadmin\/user_uploads\/image.jpg', 'title'=>'Title...'] );<\/code><\/pre>\n<p><code>@return \\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference<\/code><\/p>"},"0c915248cbd5b7049fbd17ca09aee2a1":{"_cs":"4f2770c6eb0fc82364a3c9653da71971","text":"<p>Deletes the cache for the image sizes of a FAL including the converted images.\nIf e.g. the f:image-ViewHelper is used, all calculated image sizes will be\nare stored in the table sys_file_processedfile. If the original image changes\nan image from the cache may be accessed.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Fal()->clearCache( 'fileadmin\/file.jpg' );\n\\nn\\t3::Fal()->clearCache( $fileReference );\n\\nn\\t3::Fal()->clearCache( $falFile );<\/code><\/pre>\n<p><code>@param $filenameOrSysFile<\/code> FAL or path (string) to the file.\n<code>@return void<\/code><\/p>"},"bc3e405b3a3d9fe3f0259b5191dc8a17":{"_cs":"75dd29d3148295b9f4e7424faf03b236","text":"<p>Creates a \\File (FAL) object (sys_file)<\/p>\n<pre><code>nn\\t3::Fal()-&gt;createFalFile( $storageConfig, $srcFile, $keepSrcFile, $forceCreateNew );<\/pre><\/code>\n<p><code>@param string $storageConfig<\/code> Path\/folder where FAL file should be stored (e.g. 'fileadmin\/projectdata\/').\n<code>@param string $srcFile<\/code> Source file to be converted to FAL (e.g. 'uploads\/tx_nnfesubmit\/example.jpg').\nCan also be URL to YouTube\/Vimeo video (e.g. <a href=\"https:\/\/www.youtube.com\/watch?v=7Bb5jXhwnRY\">https:\/\/www.youtube.com\/watch?v=7Bb5jXhwnRY<\/a>)\n<code>@param boolean $keepSrcFile<\/code> Copy source file only, not move it?\n<code>@param boolean $forceCreateNew<\/code> Should new file always be created? If not, it returns already existing File object if necessary<\/p>\n<p><code>@return \\Nng\\Nnhelpers\\Domain\\Model\\File|\\TYPO3\\CMS\\Core\\Resource\\File|boolean<\/code><\/p>"},"3a40b60b702107638be65f2a00c81b7f":{"_cs":"68162e09aecc72f04e047e0fd2547ac8","text":"<p>Convert a file to a FileReference object and prepare it for <code>attach()<\/code> to an existing\nPrepare model and field \/ property. The FileReference will <strong>not<\/strong> be attached to the model automatically.\nautomatically attached to the model. To set the FAL directly in the model, the helper can use\n<code>\\nn\\t3::Fal()->attach( $model, $field, $itemData )<\/code> can be used.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Fal()->createForModel( $model, $fieldName, $filePath );\n\\nn\\t3::Fal()->createForModel( $model, 'image', 'fileadmin\/user_uploads\/image.jpg' );\n\\nn\\t3::Fal()->createForModel( $model, 'image', ['publicUrl'=>'fileadmin\/user_uploads\/image.jpg'] );\n\\nn\\t3::Fal()->createForModel( $model, 'image', ['publicUrl'=>'fileadmin\/user_uploads\/image.jpg', 'title'=>'Title...'] );<\/code><\/pre>\n<p><code>@return \\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference<\/code><\/p>"},"eb6cb2ba5a20f0f4192c620eb1849fa8":{"_cs":"5055344a8efa2316a20ce4861e0dea42","text":"<p>Creates new entry in <code>sys_file<\/code>\nSearches all <code>sys_file_storage<\/code> entries to see if the path to the $file already exists as storage.\nIf not, a new storage will be created.\n<pre><code class=\"language-php\">\\nn\\t3::Fal()->createSysFile( 'fileadmin\/image.jpg' );\n\\nn\\t3::Fal()->createSysFile( '\/var\/www\/mysite\/fileadmin\/image.jpg' );<\/code><\/pre>\n<p><code>@return false|\\TYPO3\\CMS\\Core\\Resource\\File<\/code><\/p>"},"55f7ff8f80c197d866d97890acdb9995":{"_cs":"847d7f74648ebfe2f4a6e6f151f13ff0","text":"<p>Deletes all physical thumbnail files generated for an image including the records in the <code>sys_file_processedfile<\/code> table.\nthe records in the <code>sys_file_processedfile<\/code> table.\n<p>The original image passed as argument <code>$path<\/code> will not be deleted.\nThe whole thing forces the regeneration of thumbnails for an image if, for example, the source image has changed.\nsource image has changed but the filename has remained the same.<\/p>\n<p>Another use case: clean files on the server, because e.g. sensitive, personal data should be\ndata should be deleted incl. all generated thumbnails.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Fal()->deleteProcessedImages( 'fileadmin\/path\/sample.jpg' );\n\\nn\\t3::Fal()->deleteProcessedImages( $sysFileReference );\n\\nn\\t3::Fal()->deleteProcessedImages( $sysFile );<\/code><\/pre>\n<p><code>@return mixed<\/code><\/p>"},"336d12d0cdf2e6a9023705c497c9105f":{"_cs":"71047c9972f40f8a4ae954241a16f687","text":"<p>Deletes a SysFile (record from table <code>sys_file<\/code>) and all associated SysFileReferences.\nA radical way to completely remove an image from Typo3 indexing.<\/p>\n<p>The physical file will not be deleted from the server!\nSee <code>\\nn\\t3::File()->unlink()<\/code> to delete the physical file.\nSee <code>\\nn\\t3::Fal()->detach( $model, $field );<\/code> for deleting from a model.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Fal()->deleteSysFile( 1201 );\n\\nn\\t3::Fal()->deleteSysFile( 'fileadmin\/path\/to\/image.jpg' );\n\\nn\\t3::Fal()->deleteSysFile( \\TYPO3\\CMS\\Core\\Resource\\File );\n\\nn\\t3::Fal()->deleteSysFile( \\TYPO3\\CMS\\Core\\Resource\\FileReference );<\/code><\/pre>\n<p><code>@param $uidOrObject<\/code><\/p>\n<p><code>@return integer<\/code><\/p>"},"0ed5efe693d15d27afa203aac1bf7e30":{"_cs":"7877181924296f728419633194ce91c3","text":"<p>Deletes a SysFileReference.\nSee also <code>\\nn\\t3::Fal()->detach( $model, $field );<\/code> for deleting from a model.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Fal()->deleteSysFileReference( 112 );\n\\nn\\t3::Fal()->deleteSysFileReference( \\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference );<\/code><\/pre>\n<p><code>@param $uidOrFileReference<\/code><\/p>\n<p><code>@return mixed<\/code><\/p>"},"6f87bc339d6179e5b58bf248ff82f549":{"_cs":"81d0c86db9f281b557eb86acb782d374","text":"<p>Deletes an ObjectStorage from a model or removes a single\nsingle Object from the Model or an ObjectStorage.\nIn the example, <code>image<\/code> can be an ObjectStorage or a single <code>FileReference<\/code>:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Fal()->detach( $model, 'image' );\n\\nn\\t3::Fal()->detach( $model, 'image', $singleObjToRemove );<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"b81ffc77b5fb946a9bf076da5635b5e7":{"_cs":"3f87d6382ecc0a4d6bd09af1579fec04","text":"<p>Checks if a SysFileReference to the same SysFile already exists for a record<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Fal()->fileReferenceExists( $sysFile, ['uid_foreign'=>123, 'tablenames'=>'tt_content', 'field'=>'media'] );<\/code><\/pre>\n<p><code>@param $sysFile<\/code>\n<code>@param array $params<\/code> => uid_foreign, tablenames, fieldname.\n<code>@return FileReference|false<\/code><\/p>"},"7fe4e0899e50203b64c51b265a122679":{"_cs":"f95faa84763347e06f5ead408d52252f","text":"<p>Creates a FileRefence object (table: <code>sys_file_reference<\/code>) and associates it with a record.\nExample: Uploaded JPG should be attached as FAL to tt_news record<\/p>\n<p><strong>Parameters:<\/strong><\/p>\n<table>\n<thead>\n<tr>\n<th>key<\/th>\n<th>description<\/th>\n<\/tr>\n<\/thead>\n<tbody>\n<tr>\n<td><code>src<\/code><\/td>\n<td>Path to source file (can also be http link to YouTube video)<\/td>\n<\/tr>\n<tr>\n<td><code>dest<\/code><\/td>\n<td>Path to destination folder (optional if file should be moved\/copied)<\/td>\n<\/tr>\n<tr>\n<td><code>table<\/code><\/td>\n<td>Target table to which the FileReference should be assigned (e.g. <code>tx_myext_domain_model_entry<\/code>)<\/td>\n<\/tr>\n<tr>\n<td><code>title<\/code><\/td>\n<td>title<\/td>\n<\/tr>\n<tr>\n<td><code>description<\/code><\/td>\n<td>description<\/td>\n<\/tr>\n<tr>\n<td><code>link<\/code><\/td>\n<td>link<\/td>\n<\/tr>\n<tr>\n<td><code>crop<\/code><\/td>\n<td>crop<\/td>\n<\/tr>\n<tr>\n<td><code>table<\/code><\/td>\n<td>Target table to which the FileReference should be assigned (e.g. <code>tx_myext_domain_model_entry<\/code>)<\/td>\n<\/tr>\n<tr>\n<td><code>sorting<\/code><\/td>\n<td>(int) sorting<\/td>\n<\/tr>\n<tr>\n<td><code>field<\/code><\/td>\n<td>Column name of the target table to which the FileReference should be assigned (e.g. <code>image<\/code>)<\/td>\n<\/tr>\n<tr>\n<td><code>uid<\/code><\/td>\n<td>(int) uid of the record in the target table (<code>tx_myext_domain_model_entry.uid<\/code>)<\/td>\n<\/tr>\n<tr>\n<td><code>pid<\/code><\/td>\n<td>(int) pid of the record in the destination table<\/td>\n<\/tr>\n<tr>\n<td><code>cruser_id<\/code><\/td>\n<td>cruser_id of the record in the destination table<\/td>\n<\/tr>\n<tr>\n<td><code>copy<\/code><\/td>\n<td>src file do not move but copy (default: <code>true<\/code>)<\/td>\n<\/tr>\n<tr>\n<td><code>forceNew<\/code><\/td>\n<td>Force new file in destination folder (otherwise checks if file already exists) default: <code>false<\/code><\/td>\n<\/tr>\n<tr>\n<td><code>single<\/code><\/td>\n<td>Make sure that same FileReference is linked only 1x per record (default: <code>true<\/code>)<\/td>\n<\/tr>\n<\/tbody>\n<\/table>\n<p><strong>Example:<\/strong><\/p>\n<pre><code class=\"language-php\">$fal = \\nn\\t3::Fal()->fromFile([\n    'src' => 'fileadmin\/test\/image.jpg',\n    'dest' => 'fileadmin\/test\/fal\/',\n    'pid' => 132,\n    'uid' => 5052,\n    'table' => 'tx_myext_domain_model_entry',\n    'field' => 'fallistimage'\n]);<\/code><\/pre>\n<p><code>@return \\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference<\/code><\/p>"},"fd03a7aa6d0f82fa4888dc589de3f421":{"_cs":"04fcc71b24219c7cad62020ded3af755","text":"<p>Get a \\File (FAL) object (<code>sys_file<\/code>)<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Fal()->getFalFile( 'fileadmin\/image.jpg' );<\/code><\/pre>\n<p><code>@param string $srcFile<\/code>\n<code>@return \\TYPO3\\CMS\\Core\\Resource\\File|boolean<\/code><\/p>"},"aa1aa36fe2da1cb77acfc4fdecdcd6e6":{"_cs":"748f90f1ba772ad85b5e289c1c5b2d84","text":"<p>Get a SysFile from the CombinedIdentifier notation ('1:\/uploads\/example.txt').\nIf file does not exist FALSE will be returned<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Fal()->getFileObjectFromCombinedIdentifier( '1:\/uploads\/example.txt' );<\/code><\/pre>\n<p><code>@param string $file<\/code> Combined Identifier ('1:\/uploads\/example.txt')\n<code>@return file|boolean<\/code><\/p>"},"232441fbc2b640921e52f10a77fd3479":{"_cs":"8bd2fee4d93a154b02094158293c8e0e","text":"<p>Get the URL to a FileReference or a FalFile.\nAlias to <code>\\nn\\t3::File()->getPublicUrl()<\/code>.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Fal()->getFilePath( $fileReference ); \/\/ results in e.g. 'fileadmin\/images\/01.jpg'<\/code><\/pre>\n<p><code>@param \\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference|\\TYPO3\\CMS\\Core\\Resource\\FileReference $falReference<\/code>\n<code>@return string<\/code><\/p>"},"afc9d3693531b606fff450c0f651b783":{"_cs":"31dc4df4ea37d5d4c5848d423277a12b","text":"<p>Gets a SysFileReference based on the uid.\nAlias to <code>\\nn\\t3::Convert( $uid )->toFileReference()<\/code>;<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Fal()->getFileReferenceByUid( 123 );<\/code><\/pre>\n<p><code>@param $uid<\/code>\n<code>@return \\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference<\/code><\/p>"},"cee95457808621b418449c9fee893032":{"_cs":"f8e3f455dee5402ee16b89005752084e","text":"<p>Gets\/converts to a \\TYPO3\\CMS\\Core\\Resource\\FileReference Object (sys_file_reference).\n\"Smart\" variant to <code>\\TYPO3\\CMS\\Extbase\\Service\\ImageService->getImage()<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Fal()->getImage( 1 );\n\\nn\\t3::Fal()->getImage( 'path\/to\/image.jpg' );\n\\nn\\t3::Fal()->getImage( $fileReference );<\/code><\/pre>\n<p><code>@param string|\\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference $src<\/code>\n<code>@return \\TYPO3\\CMS\\Core\\Resource\\FileReference|boolean<\/code><\/p>"},"7bdb591dd321dfeef2cca579f453054e":{"_cs":"b44e1d962e46262b96c0eb9329b44636","text":"<p>Calculates an image using <code>maxWidth<\/code>, <code>maxHeight<\/code>, <code>cropVariant<\/code> etc.\nReturns URI to the image as a string. Helpful when calculating thumbnails in the backend.\nAlias to <code>\\nn\\t3::File()->process()<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->process( 'fileadmin\/images\/portrait.jpg', ['maxWidth'=>200] );\n\\nn\\t3::File()->process( '1:\/images\/portrait.jpg', ['maxWidth'=>200] );\n\\nn\\t3::File()->process( $sysFile, ['maxWidth'=>200] );\n\\nn\\t3::File()->process( $sysFileReference, ['maxWidth'=>200, 'cropVariant'=>'square'] );<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"6a2ea7279748f3b5526bf995f3b5ff08":{"_cs":"2019f220c102b7e8372fa018434be598","text":"<p>Replaces a <code>FileReference<\/code> or <code>ObjectStorage<\/code> in a model with images.\nTypical use case: A FAL image should be editable via an upload form in the frontend.\nin the frontend.<\/p>\n<p>For each image it is checked if a <code>FileReference<\/code> already exists in the model.\nExisting FileReferences will <strong>not<\/strong> be overwritten, otherwise captions or cropping annotations would be lost.\ncaptions or cropping instructions would be lost!<\/p>\n<p><strong>Attention!<\/strong> The model will be persisted automatically!<\/p>\n<pre><code class=\"language-php\">$newModel = new \\My\\Extension\\Domain\\Model\\Example();\n\\nn\\t3::Fal()->setInModel( $newModel, 'falslideshow', 'path\/to\/file.jpg' );\necho $newModel->getUid(); \/\/ Model has been persisted!<\/code><\/pre>\n<p><strong>Example with a simple FileReference in the Model:<\/strong><\/p>\n<pre><code class=\"language-php\">$imageToSet = 'fileadmin\/images\/portrait.jpg';\n\\nn\\t3::Fal()->setInModel( $member, 'falprofileimage', $imageToSet );\n\n\\nn\\t3::Fal()->setInModel( $member, 'falprofileimage', ['publicUrl'=>'01.jpg', 'title'=>'title', 'description'=>'...'] );<\/code><\/pre>\n<p><strong>Example with an ObjectStorage in the model:<\/strong><\/p>\n<pre><code class=\"language-php\">$imagesToSet = ['fileadmin\/images\/01.jpg', 'fileadmin\/images\/02.jpg', ...];\n\\nn\\t3::Fal()->setInModel( $member, 'falslideshow', $imagesToSet );\n\n\\nn\\t3::Fal()->setInModel( $member, 'falslideshow', [['publicUrl'=>'01.jpg'], ['publicUrl'=>'02.jpg']] );\n\\nn\\t3::Fal()->setInModel( $member, 'falvideos', [['publicUrl'=>'https:\/\/youtube.com\/?watch=zagd61231'], ...] );<\/code><\/pre>\n<p><strong>Example with videos:<\/strong><\/p>\n<pre><code class=\"language-php\">$videosToSet = ['https:\/\/www.youtube.com\/watch?v=GwlU_wsT20Q', ...];\n\\nn\\t3::Fal()->setInModel( $member, 'videos', $videosToSet );<\/code><\/pre>\n<p><code>@param mixed $model<\/code> The model to change.\n<code>@param string $fieldName<\/code> Property (field name) of the ObjectStorage or FileReference.\n<code>@param mixed $imagesToAdd<\/code> String \/ array of images<\/p>\n<p><code>@return mixed<\/code><\/p>"},"21009e4fbb086a91b9113087f3b792db":{"_cs":"d4e795a66b855691a39662366d916ee4","text":"<p>Convert a FileReference to an array.\nContains publicUrl, title, alternative, crop etc. of the FileReference.\nAlias to <code>\\nn\\t3::Obj()->toArray( $fileReference );<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Fal()->toArray( $fileReference ); \/\/ results in ['publicUrl'=>'fileadmin\/...', 'title'=>'...']<\/code><\/pre>\n<p><code>@param \\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference $falReference<\/code>\n<code>@return array<\/code><\/p>"},"851c73b21884c19da1dd381a381f01a6":{"_cs":"db97defe718bee774cb45c3844506879","text":"<p>Deletes a SysFile and all associated SysFileReferences.\nAlias to <code>\\nn\\t3::Fal()->deleteSysFile()<\/code><\/p>\n<p><code>@return integer<\/code><\/p>"},"c904b4bb66a57c6d8c94117fee10b7d6":{"_cs":"f30b3c661135fe9e535fd19c7d4dbf73","text":"<p>Update the data in <code>sys_file_metadata<\/code> and <code>sys_file<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Fal()->updateMetaData( 'fileadmin\/file.jpg' );\n\\nn\\t3::Fal()->updateMetaData( $fileReference );\n\\nn\\t3::Fal()->updateMetaData( $falFile );<\/code><\/pre>\n<p><code>@param $filenameOrSysFile<\/code> FAL or path (string) to the file.\n<code>@param $data<\/code> Array with data to be updated.\nIf empty, image data will be read automatically\n<code>@return void<\/code><\/p>"},"1fe7c91bb105301a652234aa9e8aad64":{"_cs":"abfe1a62cc82354e61a1df46918f6338","text":"<p>Methods related to the file system:\nReading, writing, copying, moving, and cleaning up files.<\/p>"},"ff3439aeb6374252ec001fd1455b5c75":{"_cs":"db7ea7dbfb4fc05500bc0a1bbc936110","text":"<p>Absolute path to a file on the server.<\/p>\n<p>Returns the complete path from the server root, e.g. from <code>\/var\/www\/...<\/code>\nIf the path was already absolute, it will be returned unchanged.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->absPath('fileadmin\/image.jpg'); \/\/ => \/var\/www\/website\/fileadmin\/image.jpg\n\\nn\\t3::File()->absPath('\/var\/www\/website\/fileadmin\/image.jpg'); \/\/ => \/var\/www\/website\/fileadmin\/image.jpg\n\\nn\\t3::File()->absPath('EXT:nnhelpers'); \/\/ => \/var\/www\/website\/typo3conf\/ext\/nnhelpers\/<\/code><\/pre>\n<p>In addition to the file path as a string, all conceivable objects can also be passed:<\/p>\n<pre><code class=\"language-php\">\/\/ \\TYPO3\\CMS\\Core\\Resource\\Folder\n\\nn\\t3::File()->absPath( $folderObject ); => \/var\/www\/website\/fileadmin\/image.jpg\n\n\/\/ \\TYPO3\\CMS\\Core\\Resource\\File\n\\nn\\t3::File()->absPath( $fileObject ); => \/var\/www\/website\/fileadmin\/image.jpg\n\n\/\/ \\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference\n\\nn\\t3::File()->absPath( $fileReference ); => \/var\/www\/website\/fileadmin\/image.jpg<\/code><\/pre>\n<p>Also acts as a ViewHelper:<\/p>\n<pre><code class=\"language-php\">{nnt3:file.absPath(file:'path\/to\/image.jpg')}<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"b88b27f548e717e2107b62320dcd7576":{"_cs":"87b8eda4f88c54869922c14a36d79543","text":"<p>Generate absolute URL to a file.\nReturns the full path to the file including <code>https:\/\/...\/<\/code>.<\/p>\n<pre><code class=\"language-php\">\/\/ => https:\/\/www.myweb.de\/fileadmin\/bild.jpg\n\\nn\\t3::File()->absUrl( 'fileadmin\/image.jpg' );\n\n\/\/ => https:\/\/www.myweb.de\/fileadmin\/bild.jpg\n\\nn\\t3::File()->absUrl( 'https:\/\/www.myweb.de\/fileadmin\/bild.jpg' );\n\n\/\/ => \/var\/www\/vhost\/somewhere\/fileadmin\/image.jpg\n\\nn\\t3::File()->absUrl( 'https:\/\/www.myweb.de\/fileadmin\/bild.jpg' );<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"6646514bbf111556138e932e9a36af5f":{"_cs":"79653463de3a9c233aa417a56baafb2f","text":"<p>Gives path to file \/ folder WITH absolute path<\/p>\n<p>Example:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->addPathSite('fileadmin\/test.jpg');\n \/\/ ==> returns var\/www\/website\/fileadmin\/test.jpg<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"bbde35f5877aab5fe3eded24cacfa60c":{"_cs":"5960543f4cbf46c0a5221b0095f5a8b9","text":"<p>Replaces the suffix for a file name.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->suffix('image', 'jpg'); \/\/ => image.jpg\n\\nn\\t3::File()->suffix('image.png', 'jpg'); \/\/ => image.jpg\n\\nn\\t3::File()->suffix('path\/to\/image.png', 'jpg'); \/\/ => path\/to\/image.jpg<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"af74c70cf24450cfaa202c11bac1bd63":{"_cs":"043764db266b1ce1aba875c9234e21aa","text":"<p>cleans a filename<\/p>\n<pre><code class=\"language-php\">$clean = \\nn\\t3::File()->cleanFilename('fileadmin\/n\u00c3\u00b6:so not.jpg'); \/\/ 'fileadmin\/noe_so_not.jpg'<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"85b5dd9b9bf0837d72f659a1f50f68de":{"_cs":"4b4f427637758a3989c59aa2daec4ec9","text":"<p>Copies a file.\nReturns <code>false<\/code> if the file could not be copied.\nReturns (new) filename if the copy was successful.<\/p>\n<pre><code class=\"language-php\">$filename = \\nn\\t3::File()->copy('fileadmin\/image.jpg', 'fileadmin\/image-copy.jpg');<\/code><\/pre>\n<p><code>@param string $src<\/code> Path to the source file.\n<code>@param string $dest<\/code> Path to the destination file.\n<code>@param boolean $renameIfFileExists<\/code> Rename file if file with same name already exists at destination location\n<code>@return string|boolean<\/code><\/p>"},"b9ea776b18f1df9c968b6517ec81a03d":{"_cs":"079f63685f95f41db9c771bc2dfe3149","text":"<p>Create a folder in the <code>fileadmin\/<\/code>\nTo create a folder outside of <code>fileadmin<\/code>, use the <code>\\nn\\t3::File()->mkdir()<\/code> method.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->createFolder('tests');<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"230093d07e03de029f0bcd54f70f2302":{"_cs":"f13232f16d01b49194a54b44391cb9cc","text":"<p>Download a single file or a zipped archive.<\/p>\n<p>Download as a ZIP requires the PHP extension <code>gmp<\/code>. If extension is not available,\nwill be switched to <code>.tar<\/code> variant. On Mac, the function uses the\nsecurity warnings of the Finder, the function uses <code>tar<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->download( 'fileadmin\/test.pdf' );\n\\nn\\t3::File()->download( $fileReference );\n\\nn\\t3::File()->download( $sysFile );\n\\nn\\t3::File()->download( 'fileadmin\/test.pdf', 'download.pdf' );<\/code><\/pre>\n<p>Passing an array will start a tar\/zip download.\nBy passing an associative array with filename as key and path in archive as value.\nThe file and folder structure in the zip archive can be determined.\n<pre><code class=\"language-php\">\\nn\\t3::File()->download( ['fileadmin\/test-1.pdf', 'fileadmin\/test-2.pdf'], 'archive.zip' );\n\\nn\\t3::File()->download( ['fileadmin\/test-1.pdf'=>'one.pdf', 'fileadmin\/test-2.pdf'=>'two.pdf'], 'archive.zip' );\n\\nn\\t3::File()->download( ['fileadmin\/test-1.pdf'=>'zip-folder-1\/one.pdf', 'fileadmin\/test-2.pdf'=>'zip-folder-2\/two.pdf'], 'archive.zip' );<\/code><\/pre>\n<p><code>@param mixed $files<\/code> String or array of files to load.\n<code>@param mixed $filename<\/code> Optional: Overwrite filename when downloading.\n<code>@return void<\/code><\/p>"},"61ed15ef10b4f8f7ec78be48152794b7":{"_cs":"c2762556ad05f6710ad6526cea9bcc37","text":"<p>Perceives whether a file exists.\nReturns absolute path to the file.\n<pre><code class=\"language-php\">\\nn\\t3::File()->exists('fileadmin\/image.jpg');<\/code><\/pre>\n<p>Also acts as a ViewHelper:<\/p>\n<pre><code class=\"language-php\">{nnt3:file.exists(file:'path\/to\/image.jpg')}<\/code><\/pre>\n<p><code>@return string|boolean<\/code><\/p>"},"368461cf324427fa7c0bc678a534d41b":{"_cs":"2041d1f127b17986694976c43ba24e8e","text":"<p>Save EXIF data for file in JSON<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->extractExifData( 'yellowstone.jpg' );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"2eb814a60399b7abe14a76689c2936d9":{"_cs":"2bbf4d0153cdcc3d2ace17f2e7d8cdf6","text":"<p>Get image info + EXIF data for file.\nAlso looks for JSON file that may have been generated after processImage()<\/p>\n<p><code>@return array<\/code><\/p>"},"755c673b4446bc049a5530623cd9c3fe":{"_cs":"5635d01c1713637431b3e3e69900acd1","text":"<p>Get ALL EXIF data for file<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->getExif( 'yellowstone.jpg' );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"8bec7d10d8a347e2f4b32fa40bd25c89":{"_cs":"4a1934294d079fb7846de48f1131404b","text":"<p>Returns the folder to a file<\/p>\n<p>Example:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->getFolder('fileadmin\/test\/example.txt');\n\/\/ ==> returns 'fileadmin\/test\/'<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"9d14633e97e56a59d6e9a02805ba2e07":{"_cs":"83f2ee2bd841a33fe42de900bfcbf061","text":"<p>Get EXIF image data for file<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->getImageData( 'yellowstone.jpg' );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"cd4a97cbf41b6a19b38c29dc832879e5":{"_cs":"5cac054a74f95ba7b77dab9361834000","text":"<p>getimagesize for file.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->getImageSize( 'yellowstone.jpg' );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"d841ca24f0058e8318838c277910ef46":{"_cs":"2f77ce98bd5b1af8910a11ca93efa4f0","text":"<p>Fetch GEO data for file.\nAddress data will be retrieved automatically if possible<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->getLocationData( 'yellowstone.jpg' );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"2b23bf92543a6053ce6e5498dc8e6c5b":{"_cs":"1687a0ea7c70891f327a50ddd7952656","text":"<p>Returns the path of a file based on a filename and storage.\nExample:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->getPath('media\/image.jpg', $storage);\n\/\/ ==> returns '\/var\/www\/...\/fileadmin\/media\/image.jpg'.\n\\nn\\t3::File()->getPath('fileadmin\/media\/image.jpg');\n\/\/ ==> returns '\/var\/www\/...\/fileadmin\/media\/image.jpg'<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"d346056f85d63aa855391810011cc45b":{"_cs":"d7c3b6fe1bdc698600b7a426c1d8705d","text":"<p>Gets path to file, relative to Typo3 installation directory (PATH_site).\nCan handle all types of objects.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->getPublicUrl( $falFile ); \/\/ \\TYPO3\\CMS\\Core\\Resource\\FileReference\n\\nn\\t3::File()->getPublicUrl( $fileReference ); \/\/ \\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference\n\\nn\\t3::File()->getPublicUrl( $folder ); \/\/ \\TYPO3\\CMS\\Core\\Resource\\Folder\n\\nn\\t3::File()->getPublicUrl( $folder, true ); \/\/ https:\/\/...\/fileadmin\/bild.jpg<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"0104caed5b650b45ea6b9ef8d8bf0f38":{"_cs":"9ffb23220c649b03db365311cf5a4540","text":"<p>Returns the relative path of a file to the specified storage.<\/p>\n<p>Example:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->getRelativePathInStorage('fileadmin\/media\/image.jpg', $storage);\n\/\/ ==>returns 'media\/image.jpg'<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"7d3fd807fbd2e850db71d5b47b25b49e":{"_cs":"ab00821f8727884d201c29ee4ffc99fa","text":"<p>Finds a matching sys_file_storage to a file or folder path.\nSearches all sys_file_storage entries and compares,\nif the basePath of the storage matches the path of the file.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->getStorage('fileadmin\/test\/example.txt');\n\\nn\\t3::File()->getStorage( $falFile );\n\\nn\\t3::File()->getStorage( $sysFileReference );\n\/\/returns ResourceStorage with basePath \"fileadmin\/\"<\/code><\/pre>\n<p><code>@return ResourceStorage<\/code><\/p>"},"57fa5ed6a6f4a00e6dbc1901bb725305":{"_cs":"9587ac8205f4bd92cd2d6067932fda02","text":"<p>Indicates whether the file type is allowed<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->isForbidden('image.jpg'); => returns 'true'.\n\\nn\\t3::File()->isForbidden('hack.php'); => returns 'false'<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"ed704f7ab140cfde39b575a8f1cd0e3b":{"_cs":"05e0076c39c81962383f7aab4fd65bbd","text":"<p>Indicates whether the file can be converted to an image<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->isConvertableToImage('image.jpg'); => returns true\n\\nn\\t3::File()->isConvertableToImage('text.ppt'); => returns false<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"07d7275dced9d910e58edf9cbb1e032a":{"_cs":"89f42c57e3d8078036cef1bb8e1f6aec","text":"<p>Indicates if it is a video on YouTube \/ Vimeo.\nIf yes, an array with embedding details will be returned<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->isExternalVideo('http:\/\/...');<\/code><\/pre>\n<p><code>@return array|boolean<\/code><\/p>"},"b6b849515fd03d3c7d803349f136ef2f":{"_cs":"f7acfe4e925807a2915457866686fc15","text":"<p>Returns whether specified path is a folder<\/p>\n<p>Example:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->isFolder('fileadmin'); \/\/ => returns true<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"23362abf42cf96503929f517f120145c":{"_cs":"80ecd1fce6f75436ea8966bb8e3af68c","text":"<p>Indicates whether the file type is forbidden<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->isForbidden('image.jpg'); => returns 'false'.\n\\nn\\t3::File()->isForbidden('hack.php'); => returns true\n\\nn\\t3::File()->isForbidden('.htaccess'); => returns true<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"051987e104c3cf0ee19036a48aa5d0c7":{"_cs":"8038a14699f7d019e70bb81c554f3b16","text":"<p>Indicates whether the file is a video<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->isVideo('path\/to\/video.mp4'); => returns true<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"be159ca2e3e1b774105c94372140de3b":{"_cs":"7653dc3703d6ce5b75424298b2940b2e","text":"<p>Create a folder<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->mkdir( 'fileadmin\/my\/folder\/' );\n\\nn\\t3::File()->mkdir( '1:\/my\/folder\/' );<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"cae7044fcc6523dda9705d7670b39b24":{"_cs":"587214398fa44473526b1195225e4946","text":"<p>Moves a file<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->move('fileadmin\/image.jpg', 'fileadmin\/image-copy.jpg');<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"b2f39bbfb0d18d2dcdc0b2813bff96d6":{"_cs":"926125fcba1bfed6fe54918179a09a3a","text":"<p>Move an upload file to the destination directory<\/p>\n<p>Can be absolute path to the upload tmp file \u00e2 or a <code>TYPO3\\CMS\\Core\\Http\\UploadedFile<\/code>,\nwhich can be fetched in the controller via <code>$this->request->getUploadedFiles()<\/code>\n<pre><code class=\"language-php\">\\nn\\t3::File()->moveUploadedFile('\/tmp\/xjauGSaudsha', 'fileadmin\/image-copy.jpg');\n\\nn\\t3::File()->moveUploadedFile( $fileObj, 'fileadmin\/image-copy.jpg');<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"4ea1b18ad40e2232d27433e5412b5b52":{"_cs":"5ed091167883f9d86517d613f974bec2","text":"<p>Resolves ..\/..\/ specifications in path.\nWorks with both existing paths (per realpath) and\nnon-existing paths.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->normalizePath( 'fileadmin\/test\/..\/image.jpg' ); => fileadmin\/image.jpg<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"8a406f82101c795df162459d2929ef73":{"_cs":"32a73b8731421ac0b1f894c6343fef0f","text":"<p>Calculates an image using <code>maxWidth<\/code>, <code>maxHeight<\/code> etc.\nSimple version of <code>\\nn\\t3::File()->processImage()<\/code>\nCan be used when it comes to generating resized images only\nwithout taking into account camera alignment corrections etc.<\/p>\n<p>Since the crop settings are stored in FileReference and not File,\n<code>cropVariant<\/code> only works if a <code>FileReference<\/code> is passed.\n<pre><code class=\"language-php\">\\nn\\t3::File()->process( 'fileadmin\/imgs\/portrait.jpg', ['maxWidth'=>200] );\n\\nn\\t3::File()->process( '1:\/images\/portrait.jpg', ['maxWidth'=>200] );\n\\nn\\t3::File()->process( $sysFile, ['maxWidth'=>200] );\n\\nn\\t3::File()->process( $sysFile, ['maxWidth'=>200, 'absolute'=>true] );\n\\nn\\t3::File()->process( $sysFileReference, ['maxWidth'=>200, 'cropVariant'=>'square'] );<\/code><\/pre>\n<p>Using the <code>$returnProcessedImage = true<\/code> parameter, not the file path to the new image.\nbut the processedImage object is returned.\n<pre><code class=\"language-php\">\\nn\\t3::File()->process( 'fileadmin\/imgs\/portrait.jpg', ['maxWidth'=>200], true );<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"ea12b16268a681e3b1dcf90c08fcc9e8":{"_cs":"1027494ebcb65540d822a12cf38cfc88","text":"<p>Can be called directly after upload_copy_move().\nCorrects the orientation of the image, which may have been stored in EXIF data.\nFor simple <code>maxWidth<\/code> statements use the <code>\\nn\\t3::File()->process()<\/code> method.<\/p>\n<p>Statements for $processing:<\/p>\n<p><code>correctOrientation<\/code> => correct rotation (e.g. because photo was uploaded from smartphone)<\/p>\n<p><code>@return string<\/code><\/p>"},"50656b914ef362b504fb7466df4b46fe":{"_cs":"4bd0919ac4a6709d9af264ca6ddc8871","text":"<p>Get the contents of a file<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->read('fileadmin\/text.txt');<\/code><\/pre>\n<p><code>@return string|boolean<\/code><\/p>"},"a4eec01b4722471d876cc160c8c1ed43":{"_cs":"253f2bf11f60cf2ba780adf1cdca301a","text":"<p>relative path (from the current script) to a file \/ directory.\nIf no path is given, the Typo3 root directory will be returned.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->relPath( $file ); => ..\/fileadmin\/image.jpg\n\\nn\\t3::File()->relPath(); => ..\/<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"692c48e308729a26c8d463c731a92692":{"_cs":"940de6f3ae0ee01df8ea76ba8da8ebca","text":"<p>EXT: Resolve prefix to relative path<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->resolvePathPrefixes('EXT:extname'); => \/typo3conf\/ext\/extname\/\n\\nn\\t3::File()->resolvePathPrefixes('EXT:extname\/'); => \/typo3conf\/ext\/extname\/\n\\nn\\t3::File()->resolvePathPrefixes('EXT:extname\/image.jpg'); => \/typo3conf\/ext\/extname\/image.jpg\n\\nn\\t3::File()->resolvePathPrefixes('1:\/uploads\/image.jpg', true); => \/var\/www\/website\/fileadmin\/uploads\/image.jpg<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"14749cac651a6faa99264093daef10dc":{"_cs":"5e46818376846e5941f699cfd9e1ec81","text":"<p>Send PHP header for download.\nIf the file physically exists, the <code>filesize<\/code> will be determined automatically.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->sendDownloadHeader( 'download.jpg' );\n\\nn\\t3::File()->sendDownloadHeader( 'path\/to\/file\/download.jpg' );\n\\nn\\t3::File()->sendDownloadHeader( 'fakedatei.jpg', 1200 );<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"ab3b986cfe3e3e1b8ace4e6b1de7c150":{"_cs":"575724163e19df361adf592932ab723b","text":"<p>Returns file size to a file in bytes.\nIf file does not exist, 0 is returned<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->size('fileadmin\/image.jpg');<\/code><\/pre>\n<p><code>@return integer<\/code><\/p>"},"e9d0e85dc5c53a2c9f8e82aad546a2c2":{"_cs":"c0643a6f27f9a8deeb1b6741459ae17f","text":"<p>Gives path to file \/ folder WITHOUT absolute path.\nOptionally, a prefix can be specified.<\/p>\n<p>Example:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->stripPathSite('var\/www\/website\/fileadmin\/test.jpg'); ==> fileadmin\/test.jpg\n\\nn\\t3::File()->stripPathSite('var\/www\/website\/fileadmin\/test.jpg', true); ==> var\/www\/website\/fileadmin\/test.jpg\n\\nn\\t3::File()->stripPathSite('fileadmin\/test.jpg', true); ==> var\/www\/website\/fileadmin\/test.jpg\n\\nn\\t3::File()->stripPathSite('fileadmin\/test.jpg', '..\/..\/'); ==> ..\/..\/fileadmin\/test.jpg<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"f4ae93c7096ffda3945cc8bf007a40f0":{"_cs":"fbf6929e52327019846ee6243222bdf4","text":"<p>Returns the suffix of the file<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->suffix('image.jpg'); => returns 'jpg'<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"32d9f99c34427f3c02bc93614310086e":{"_cs":"dbb64f7f0652c204b24f70ef04f76026","text":"<p>Returns the suffix for a specific mime type \/ content type.\nVery reduced version \u00e2 only a few types covered.\nExtensive version: <a href=\"https:\/\/bit.ly\/3B9KrNA\">https:\/\/bit.ly\/3B9KrNA<\/a><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->suffixForMimeType('image\/jpeg'); => returns 'jpg'<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"f21095779e4e228b2bbf31ecd4b5c69f":{"_cs":"89738a3b090f63768575f670cba304d5","text":"<p>returns the type of the file based on the file suffix<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->type('image.jpg'); => returns 'image'.\n\\nn\\t3::File()->type('text.doc'); => returns 'document'<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"9b203ac93c4358b9314f0223a8a25388":{"_cs":"3c69fa1b93c07ba44796dc686e7875a3","text":"<p>Creates a unique filename for the file, if there is already\nfile with the same name already exists in the target directory.\nalready exists in the target directory<\/p>\n<pre><code class=\"language-php\">$name = \\nn\\t3::File()->uniqueFilename('fileadmin\/01.jpg'); \/\/ 'fileadmin\/01-1.jpg'<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"5f474f46e3c2d6230c3f525b4100fa42":{"_cs":"0239bf029d86f96d4462964b95d7d1fe","text":"<p>Deletes a file completely from the server.\nAlso deletes all <code>sys_file<\/code> and <code>sys_file_references<\/code> that reference the file.\nFor safety, PHP or HTML files cannot be deleted.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->unlink('fileadmin\/image.jpg'); \/\/ Path to the image.\n\\nn\\t3::File()->unlink('\/abs\/path\/to\/file\/fileadmin\/image.jpg'); \/\/ absolute path to the image\n\\nn\\t3::File()->unlink('1:\/my\/image.jpg'); \/\/ Combined identifier notation\n\\nn\\t3::File()->unlink( $model->getImage() ); \/\/ \\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference\n\\nn\\t3::File()->unlink( $falFile ); \/\/ \\TYPO3\\CMS\\Core\\Resource\\FileReference<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"6d0508bd80855cbee85bc4c5108756b3":{"_cs":"f01f867a6cc674bbef8decfa468d6a2c","text":"<p>Create a folder and\/or file.\nAlso creates the folders if they do not exist.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::File()->write('fileadmin\/some\/deep\/folder\/');\n\\nn\\t3::File()->write('1:\/some\/deep\/folder\/');\n\\nn\\t3::File()->write('fileadmin\/some\/deep\/folder\/file.json', 'TEXT');<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"a63caaba94d3246b62cbd31f8bec3b16":{"_cs":"0f4042f91d3a10de90a706a653bc7006","text":"<p>Load and parse FlexForms<\/p>"},"4627beaf302cf6bc8d505bb06d02deac":{"_cs":"950e3ef62aac172650c0b89f4cf05ce2","text":"<p>Loads FAL media specified in directly in the FlexForm<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Flexform()->getFalMedia( 'falmedia' );\n\\nn\\t3::Flexform()->getFalMedia( 'settings.falmedia' );\n\\nn\\t3::Flexform()->getFalMedia( 1201, 'falmedia' );<\/code><\/pre>\n<pre><code class=\"language-php\">$cObjData = \\nn\\t3::Tsfe()->cObjData();\n$falMedia = \\nn\\t3::Flexform()->getFalMedia( $cObjData['uid'], 'falmedia' );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"f1f62ab3d618ebe62a7dd69ea69ed974":{"_cs":"b3c86fb2ba531233055c8d65434d895e","text":"<p>Gets the flexform of a given content element as an array<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Flexform()->getFlexform( 1201 );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"bfe5518b7f48db2378cb75090cbd3ec3":{"_cs":"d21f21bf97bac4858ac4a4eae9529a75","text":"<p>Inserts options from TypoScript into a FlexForm or TCA for selection<\/p>\n<pre><code class=\"language-php\"><config>\n    <type>select<\/type>\n    <items type=\"array\"><\/items>\n    <itemsProcFunc>nn\\t3\\Flexform->insertCountries<\/itemsProcFunc>\n    <insertEmpty>1<\/insertEmpty>\n<\/config><\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"20be279ec4542703f0fefa9d4d2a6ac9":{"_cs":"3316ebb6f825ce4b0764d25c1aa034eb","text":"<p>Inserts options from TypoScript into a FlexForm or TCA for selection<\/p>\n<pre><code class=\"language-php\"><config>\n    <type>select<\/type>\n    <items type=\"array\"><\/items>\n    <itemsProcFunc>nn\\t3\\Flexform->insertOptions<\/itemsProcFunc>\n    <typoscriptPath>plugin.tx_extname.settings.templates<\/typoscriptPath>\n    <!-- Alternatively: load settings from PageTSConfig: -->\n    <pageconfigPath>tx_extname.colors<\/pageconfigPath>\n    <insertEmpty>1<\/insertEmpty>\n    <hideKey>1<\/hideKey>\n<\/config><\/code><\/pre>\n<p>With typoscript, different types of structure are allowed:<\/p>\n<pre><code class=\"language-php\">plugin.tx_extname.settings.templates {\n    # direct key => label pairs\n    small = small design\n    # ... or: label set in subarray.\n    mid {\n        label = Mid Design\n    }\n    # ... or: key set in subarray, practical e.g. for CSS classes\n    10 {\n        label = Big Design\n        classes = big big-thing\n    }\n    # ... or a userFunc. Returns one of the variants above as an array\n    30 {\n        userFunc = nn\\t3\\Flexform->getOptions\n    }\n}<\/code><\/pre>\n<p>The selection can be limited to specific controller actions in the TypoScript.\nIn this example, the \"Yellow\" option will only be displayed if in the <code>switchableControllerAction<\/code>\n<code>Category->list<\/code> was selected.<\/p>\n<pre><code class=\"language-php\">plugin.tx_extname.settings.templates {\n    yellow {\n        label = yellow\n        controllerAction = Category->list,...\n    }\n}<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"896d53a555ac0621d55e4b272fd3273a":{"_cs":"d78da65ad9c8e4a87b33c947376dea7d","text":"<p>Converts a Flexform XML to an array<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Flexform()->parse('<?xml...>');<\/code><\/pre>\n<p>Also acts as a ViewHelper:<\/p>\n<pre><code class=\"language-php\">{rawXmlString->nnt3:parse.flexForm()->f:debug()}<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"56b00e24e36e4f057f8d0091b0219000":{"_cs":"d41d8cd98f00b204e9800998ecf8427e","text":""},"6d9b1ec3a66c691815d1eba35e6408aa":{"_cs":"88c7526cc97c07f6dae1280f0b5e1034","text":"<p>Get the current FE user.\nAlias to <code><nn\\t3::FrontendUser()->getCurrentUser();<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::FrontendUser()->get();<\/code><\/pre>\n<p>Also acts as a ViewHelper:<\/p>\n<pre><code class=\"language-php\">{nnt3:frontendUser.get(key:'first_name')}\n{nnt3:frontendUser.get()->f:variable.set(name:'feUser')}<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"fbd84bc752443dfa9a64a0bbd47b5963":{"_cs":"be7ba488373e518f7c1820694850da34","text":"<p>Return all existing user groups.\nReturns an associative array, key is the <code>uid<\/code>, value is the <code>title<\/code>.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::FrontendUser()->getAvailableUserGroups();<\/code><\/pre>\n<p>Alternatively, <code>true<\/code> can be used to return the complete dataset for the user groups.\ncan be returned:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::FrontendUser()->getAvailableUserGroups( true );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"99d97f8c2ead4f5bca1da50b6405fdd9":{"_cs":"5623e65b816fb0b2abdad31548da1312","text":"<p>Get the cookie name of the frontend user cookie.\nUsually <code>fe_typo_user<\/code>, unless it was changed in the LocalConfiguration.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::FrontendUser()->getCookieName();<\/code><\/pre>\n<p>return string<\/p>"},"8da06c7357414e4a6ed89f12d7016a58":{"_cs":"c760bb61bfc1ca55a4cc5c6a1c014f11","text":"<p>Get array with the data of the current FE user.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::FrontendUser()->getCurrentUser();<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"4aac9accf12f62b199db2eca42aa30c1":{"_cs":"54a5ee364eb3d28474c93ae68f4f1783","text":"<p>Get user groups of the current FE user as array.\nThe uids of the usergroups will be used as key in the returned array.<\/p>\n<pre><code class=\"language-php\">\/\/ Minimal version: By default Typo3 returns only title, uid and pid.\n\\nn\\t3::FrontendUser()->getCurrentUserGroups(); \/\/ [1 => ['title'=>'Group A', 'uid' => 1, 'pid'=>5]]\n\n\/\/ With true the complete record for the fe_user_group can be read from the DB\n\\nn\\t3::FrontendUser()->getCurrentUserGroups( true ); \/\/ [1 => [... all fields of the DB]]<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"704d3f6b33ce45aa28e8d56e40eee6fb":{"_cs":"7c82da6e3ec601193d22264dabb51c43","text":"<p>GetUID of the current frontend user<\/p>\n<pre><code class=\"language-php\">$uid = \\nn\\t3::FrontendUser()->getCurrentUserUid();<\/code><\/pre>\n<p><code>@return int<\/code><\/p>"},"38b00f5f5fe011f8a8baf464170a3692":{"_cs":"3542b63d649df658f08d7813f9525a73","text":"<p>Get user groups of the current FE user.\nAlias to <code>nn\\t3::FrontendUser()->getCurrentUserGroups();<\/code><\/p>\n<pre><code class=\"language-php\">\/\/ load only title, uid and pid of the groups.\n\\nn\\t3::FrontendUser()->getGroups();\n\/\/ load complete record of groups\n\\nn\\t3::FrontendUser()->getGroups( true );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"a15c72534bd578efdc67833a02697ff3":{"_cs":"7b242a766bc1213f334ef651a7f14c47","text":"<p>Get language UID of the current user<\/p>\n<pre><code class=\"language-php\">$languageUid = \\nn\\t3::FrontendUser()->getLanguage();<\/code><\/pre>\n<p><code>@return int<\/code><\/p>"},"5de2d4ead28ab390c3d80809767e6a71":{"_cs":"92180bf44cc41a6000e7bc21ea9d6c65","text":"<p>Get the current user session<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::FrontendUser()->getSession();<\/code><\/pre>\n<p><code>@return \\TYPO3\\CMS\\Core\\Session\\UserSession<\/code><\/p>"},"ae077b03545f6971941ccc2fd7def02e":{"_cs":"fcf77d30d48efea65a94156f93d8854c","text":"<p>Get session data for FE user<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::FrontendUser()->getSessionData('store')<\/code><\/pre>\n<p><code>@return mixed<\/code><\/p>"},"f1162a76b314ea0177f94b2500aaeb42":{"_cs":"51ccfc2129ffc733a7de8da81ef488e0","text":"<p>Get session id of current frontend user<\/p>\n<pre><code class=\"language-php\">$sessionId = \\nn\\t3::FrontendUser()->getSessionId();<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"f0718ca9e660ccb858768d1c61f7fbe6":{"_cs":"d5f2d1460044b75cbc8186fb26ec71d8","text":"<p>Checks if the user has a specific role<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::FrontendUser()->hasRole( $roleUid );<\/code><\/pre>\n<p><code>@param $role<\/code>\n<code>@return bool<\/code><\/p>"},"c2f4df2a4c28b7f1d009312a198f446a":{"_cs":"bf5531e83d9478f4408308e01742a33a","text":"<p>Checks if the current frontend user is within a specific user group<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::FrontendUser()->isInUserGroup( 1 );\n\\nn\\t3::FrontendUser()->isInUserGroup( ObjectStorage<FrontendUserGroup> );\n\\nn\\t3::FrontendUser()->isInUserGroup( [FrontendUserGroup, FrontendUserGroup, ...] );\n\\nn\\t3::FrontendUser()->isInUserGroup( [['uid'=>1, ...], ['uid'=>2, ...]] );<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"660bf2da4a7859d479bf904439be2434":{"_cs":"52780656b6916d95d9c3d0065994f998","text":"<p>Performs if the user is currently logged in as FE-User.\nEarlier: isset($GLOBALS['TSFE']) && $GLOBALS['TSFE']->loginUser<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::FrontendUser()->isLoggedIn();<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"1a5aff64ea68ca55dfdd74c0145270ff":{"_cs":"ad69c686010f4d906808a78d704fbb4e","text":"<p>Log in user manually.\nFrom v10: Alias to <code>\\nn\\t3::FrontendUserAuthentication()->loginByUsername( $username );<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::FrontendUser()->login('99degree');\n\\nn\\t3::FrontendUser()->login('99degrees', 'password');<\/code><\/pre>\n<p><code>@param $username<\/code>\n<code>@param $password<\/code>\n@throws \\ReflectionException<\/p>"},"81caae4f6ccf786dad05cdc71be251c3":{"_cs":"cf74503cd21f678c9204b3071360951d","text":"<p>Manually log out current FE-USer<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::FrontendUser()->logout();<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"f1a4f96560fe9f32760f39483ada481b":{"_cs":"560046841ad57f573f92e75d10d80d5f","text":"<p>Delete current <code>fe_typo_user<\/code> cookie manually<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::FrontendUser()->removeCookie()<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"dd20d81d1a942a5d339325a7bb77bee3":{"_cs":"dda562ab903943a228abd1f47ef65852","text":"<p>Converts an array or comma-separated list of user group UIDs to.\n<code>fe_user_groups<\/code> data from the database. Checks for inherited subgroups.\n<pre><code class=\"language-php\">\\nn\\t3::FrontendUser()->resolveUserGroups( [1,2,3] );\n\\nn\\t3::FrontendUser()->resolveUserGroups( '1,2,3' );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"564d4de6281680231b309c47f7271461":{"_cs":"a52ac7b3d89049660c5fc8768240e28e","text":"<p>Set the <code>fe_typo_user<\/code> cookie manually.<\/p>\n<p>If no <code>sessionID<\/code> is passed, Typo3 itself searches for the session ID of the FE user.<\/p>\n<p>When calling this method from a MiddleWare, the <code>Request<\/code> should be passed as well.\nThis allows, for example, the global <code>$_COOKIE<\/code> value and the <code>cookieParams.fe_typo_user<\/code> to be passed in the request\nbefore authentication via <code>typo3\/cms-frontend\/authentication<\/code> in a separate middleware.\ncan be set. Helpful if crossdomain authentication is required (e.g.\nPer Json Web Token \/ JWT).<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::FrontendUser()->setCookie();\n\\nn\\t3::FrontendUser()->setCookie( $sessionId );\n\\nn\\t3::FrontendUser()->setCookie( $sessionId, $request );<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"f24e76d6ade72861cf5ecc1e03ea3848":{"_cs":"cee56f8429f98e9eadd3825b67c3ba59","text":"<p>Change password of a FE user.\nAlias to <code>\\nn\\t3::FrontendUserAuthentication()->setPassword()<\/code>.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::FrontendUser()->setPassword( 12, '123password$#' );\n\\nn\\t3::FrontendUser()->setPassword( $frontendUserModel, '123password#$' );<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"d74f3970cc5f2a2124858c181341d4e6":{"_cs":"755c833544060ca5fe723bc52f191f28","text":"<p>Set session data for FE user<\/p>\n<pre><code class=\"language-php\">\/\/ Merge session data for `shop` with new data (already existing keys in `shop` will not be deleted)\n\\nn\\t3::FrontendUser()->setSessionData('store', ['a'=>1]);\n\n\/\/ Overwrite session data for `shop` (`a` from the example above will be deleted).\n\\nn\\t3::FrontendUser()->setSessionData('store', ['b'=>1], false);<\/code><\/pre>\n<p><code>@return mixed<\/code><\/p>"},"c2a2eca7f643910bec780e26823f7007":{"_cs":"a79357183851d5f110c0f36c77250455","text":"<p>Frontend user methods: from logging in to changing passwords<\/p>"},"e50af2714b6a6643ddd419c77050a51a":{"_cs":"e64c35097c95aa775b5c055bba616d5f","text":"<p>Login of a FE user based on the username and password<\/p>\n<pre><code class=\"language-php\">\/\/ Verify credentials and start feUser session.\n\\nn\\t3::FrontendUserAuthentication()->login( '99grad', 'password' );\n\n\/\/ Check only, do not start feUser session\n\\nn\\t3::FrontendUserAuthentication()->login( '99grad', 'password', false );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"a44794d40d14455996604ad1b655b9f0":{"_cs":"a8bccf66f219588f635e1cb582b1a3c5","text":"<p>Login of a FE user using a session ID.<\/p>\n<p>The session ID corresponds to the TYPO3 cookie <code>fe_typo_user<\/code>. Usually there is one entry for each\neach fe-user session there is an entry in the <code>fe_sessions<\/code> table. Up to Typo3 v10, the\nthe <code>ses_id<\/code> column corresponded exactly to the cookie value.<\/p>\n<p>As of Typo3 v10, the value is additionally hashed.<\/p>\n<p>See also <code>\\nn\\t3::Encrypt()->hashSessionId( $sessionId );<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::FrontendUserAuthentication()->loginBySessionId( $sessionId );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"860d16135bc76a8b83ee93486a0e8536":{"_cs":"11bf05b92fc6d66f213edd3bf64a35ba","text":"<p>Login of a FE user based on the username<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::FrontendUserAuthentication()->loginByUsername( '99grad' );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"cdc82b0df8d7d9c4d846c228f289aa50":{"_cs":"42b5910eb04f4569d6aaa10ad4a545a3","text":"<p>Login of a FE user using any field.\nNo password required.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::FrontendUserAuthentication()->loginField( $value, $fieldName );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"4f9bcaaf91f003cc2ba6dbc4d9c0b0b5":{"_cs":"ef75bb04df8f1272362629d5286145f7","text":"<p>Login of a FE user using a fe_user.uid<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::FrontendUserAuthentication()->loginUid( 1 );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"4bdd9ec410b818c6725bcc1e0a4feaf1":{"_cs":"0993dbdd29ecc4826db56f2b78dcfafd","text":"<p>Create a new frontend user session in the <code>fe_sessions<\/code> table.\nYou can pass either the <code>fe_users.uid<\/code> or the <code>fe_users.username<\/code>\n<p>The user will not be logged in automatically. Instead, only a valid session will be created and\nis created and prepared in the database, which Typo3 can later use for authentication.\n<p>Returns the session ID.<\/p>\n<p>The session ID here is exactly the same as the value in the <code>fe_typo_user<\/code> cookie - but not necessarily the\nvalue stored in <code>fe_sessions.ses_id<\/code>. The value in the database is hashed from TYPO3 v11 onwards.\nhashed.<\/p>\n<pre><code class=\"language-php\">$sessionId = \\nn\\t3::FrontendUserAuthentication()->prepareSession( 1 );\n$sessionId = \\nn\\t3::FrontendUserAuthentication()->prepareSession( 'david' );\n\n$hashInDatabase = \\nn\\t3::Encrypt()->hashSessionId( $sessionId );<\/code><\/pre>\n<p>If the session is to be rebuilt with an existing SessionId, an optional,\n(non-hashed) SessionId can be passed as an optional second parameter:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::FrontendUserAuthentication()->prepareSession( 1, 'mycookiewert' );\n\\nn\\t3::FrontendUserAuthentication()->prepareSession( 1, $_COOKIE['fe_typo_user'] );<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"661575ede1942cd0492b6a3b8b1fa41d":{"_cs":"ac94e53ee3521abaef4b10e789303a43","text":"<p>Change the password of a FE user<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::FrontendUserAuthentication()->setPassword( 12, '123Password#$' );\n\\nn\\t3::FrontendUserAuthentication()->setPassword( $frontendUserModel, '123Password#$' );<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"b9df5709737a6b38fc2a37a7385ced01":{"_cs":"2fb031b671a73ceddfbcba8bd3f844e7","text":"<p>Calculate and convert geo-locations and data.<\/p>\n<p>To convert geo-coordinates into address data and vice versa, a Google Maps ApiKey must be\nmust be created and stored in the Extension Manager for nnhelpers. Alternatively you can\ncan specify a custom ApiKey during initialization:<\/p>\n<pre><code class=\"language-php\">nn\\t3::Geo( $myApiKey )->getCoordinates('...');<\/code><\/pre>"},"bf8ac8c9a6a8c726917c99e13ef6030d":{"_cs":"ffc3db6ea8130eb54c9f8a3a0ce373c6","text":"<p>Convert geo-coordinates to address data (reverse geo coding).\nIf the extension <code>nnaddress<\/code> is installed, it will be used for the resolution.<\/p>\n<pre><code class=\"language-php\">\/\/ Return the first result.\n\\nnt3::Geo()->getAddress( 8.250693320181336, 50.08060702093021 );\n\n\/\/ Return ALL results\n\\nnnnt3::Geo()->getAddress( 8.250693320181336, 50.08060702093021, true );\n\n\/\/ Return ALL results in English\n\\nnt3::Geo()->getAddress( 8.250693320181336, 50.08060702093021, true, 'en' );\n\n\/\/ $lng and $lat can also be passed as an array\n\\nnt3::Geo()->getAddress( ['lat'=>50.08060702093021, 'lng'=>8.250693320181336] );\n\n\/\/ Use your own API key?\n\\nnt3::Geo( $apiKey )->getAddress( 8.250693320181336, 50.08060702093021 );<\/code><\/pre>\n<p>Example return:<\/p>\n<pre><code class=\"language-php\">[\n    'lat' => 50.0805069,\n    'lng' => 8.2508677,\n    'street' => 'Blumenstrass 2',\n    'zip' => '65189',\n    'city' => 'Wiesbaden',\n    ...\n]<\/code><\/pre>\n<p><code>@param array|float $lng<\/code>\n<code>@param float|bool $lat<\/code>\n<code>@param bool $returnAll<\/code>\n<code>@return array<\/code><\/p>"},"e5b694d3455dcc8029c757fda62650d1":{"_cs":"17e64fb98081a6885c51c6729d2c05dd","text":"<p>Get api key for methods in this class.\nThe api key can be specified either when initializing <code>nn\\t3::Geo()<\/code>\nor in the extension manager for <code>nnhelpers<\/code>.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Geo( $myApiKey )->getCoordinates('Blumenstrasse 2, 65189 Wiesbaden');\n\\nn\\t3::Geo(['apiKey'=>$myApiKey])->getCoordinates('Blumenstrasse 2, 65189 Wiesbaden');<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"a2d7420d29ac744444b6ced138fcd421":{"_cs":"99d4d08f19fe89ea423988ef9c1af9a0","text":"<p>Convert address data to geo-coordinates (Geo Coding).\nIf the extension <code>nnaddress<\/code> is installed, it will be used for the resolution.\n<pre><code class=\"language-php\">\/\/ Query by string, return first result.\n\\nn\\t3::Geo()->getCoordinates( 'Blumenstrasse 2, 65189 Wiesbaden' );\n\n\/\/ Query by array\n\\nn\\t3::Geo()->getCoordinates( ['street'=>'Blumenstrasse 2', 'zip'=>'65189', 'city'=>'Wiesbaden', 'country'=>'DE'] );\n\n\/\/ Return all results\n\\nn\\t3::Geo()->getCoordinates( 'Blumenstrasse 2, 65189 Wiesbaden', true );\n\n\/\/ Return all results in English\n\\nn\\t3::Geo()->getCoordinates( 'Blumenstrasse 2, 65189 Wiesbaden', true, 'en' );\n\n\/\/ Use your own API\n\\nn\\t3::Geo( $apiKey )->getCoordinates( 'Blumenstrasse 2, 65189 Wiesbaden' );\n<\/code><\/pre>\n<p>Example for return:<\/p>\n<pre><code class=\"language-php\">[\n    'lat' => 50.0805069,\n    'lng' => 8.2508677,\n    'street' => 'Blumenstrass 2',\n    'zip' => '65189',\n    'city' => 'Wiesbaden',\n    ...\n]<\/code><\/pre>\n<p><code>@param array|string $address<\/code>\n<code>@return array<\/code><\/p>"},"2c91be773fb101758ea772a5a262ad9d":{"_cs":"4cef2de3d64cf5c76181cd21f605d910","text":"<p>Normalizes a result from GeoCoding<\/p>\n<p><code>@param array $row<\/code>\n<code>@return array<\/code><\/p>"},"7216136f3ac8249a02438ead428dec9a":{"_cs":"f7157648bf74b05e6d116864c7c802e9","text":"<p>Convert GPS coordinates to readable latitude\/longitude coordinates<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Geo()->toGps( ['50\/1', '4\/1', '172932\/3125'], 'W' );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"624ce954388c4f361c6a61c5cde0deb5":{"_cs":"391ed7b78e8ae4931d38712d2eb55981","text":"<p>Make simple redirects, build URLs<\/p>"},"e7e725e8326ce4eee3c09297dff7dca6":{"_cs":"d53006b706fc542cafee08a380d9a59f","text":"<p>Build URI, works in frontend and backend context.\nTakes into account realURL<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Http()->buildUri( 123 );\n\\nn\\t3::Http()->buildUri( 123, ['test'=>1], true );<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"e8146fb9f020a3dd1188ead059fd793f":{"_cs":"8b1b08075e839cb16820274190602644","text":"<p>Redirect to a page<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Http()->redirect( 'https:\/\/www.99grad.de' );\n\\nn\\t3::Http()->redirect( 10 ); \/\/ => path\/to\/pageId10\n\\nn\\t3::Http()->redirect( 10, ['test'=>'123'] ); \/\/ => path\/to\/pageId10&test=123\n\\nn\\t3::Http()->redirect( 10, ['test'=>'123'], 'tx_myext_plugin' ); \/\/ => path\/to\/pageId10&tx_myext_plugin[test]=123<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"c6515eef71a7f610af87615609a2943e":{"_cs":"d057aba2ea6a176819207f52d524a599","text":"<p>Wrapper for methods around the localization of Typo3<\/p>"},"8d3d9e7e0274c5ed6abec67c6f97618d":{"_cs":"5953a04241c1165d2a385552e5380f92","text":"<p>Get localization for a specific key<\/p>\n<p>Uses the translations specified in the <code>xlf<\/code> of an extension.\nThese files are located by default in <code>EXT:extname\/Resources\/Private\/Language\/locallang.xlf<\/code>\nor <code>EXT:extname\/Resources\/Private\/Language\/en.locallang.xlf<\/code> for the respective translation.\n<pre><code class=\"language-php\">\/\/ Simple example:\n\\nn\\t3::LL()->get(''LLL:EXT:myext\/Resources\/Private\/Language\/locallang_db.xlf:my.identifier');\n\\nn\\t3::LL()->get('tx_nnaddress_domain_model_entry', 'nnaddress');\n\n\/\/ Replace arguments in string: 'After the %s comes the %s' or 'Before the %2$s comes the %1$s'.\n\\nn\\t3::LL()->get('tx_nnaddress_domain_model_entry', 'nnaddress', ['one', 'two']);\n\n\/\/ explode() the result at a separator character\n\\nn\\t3::LL()->get('tx_nnaddress_domain_model_entry', 'nnaddress', null, ',');\n\n\/\/ Translate to a language other than the current frontend language.\n\\nn\\t3::LL()->get('tx_nnaddress_domain_model_entry', 'nnaddress', null, null, 'en');\n\\nn\\t3::LL()->get('LLL:EXT:myext\/Resources\/Private\/Language\/locallang_db.xlf:my.identifier', null, null, 'en');<\/code><\/pre>\n<p><code>@param string $id<\/code>\n<code>@param string $extensionName<\/code>\n<code>@param array $args<\/code>\n<code>@param string $explode<\/code>\n<code>@param string $langKey<\/code>\n<code>@param string $altLangKey<\/code>\n<code>@return mixed<\/code><\/p>"},"f41f5cc5a4fa10cd62592888d1992e47":{"_cs":"5bf9d786b000b3a6832f87017bd91db9","text":"<p>Translates a text via DeepL.\nAn API key must be entered in the Extension Manager.\nDeepL allows the translation of up to 500,000 characters \/ month free of charge.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::LL()->translate( 'The horse doesn't eat cucumber salad' );\n\\nn\\t3::LL()->translate( 'The horse does not eat cucumber salad', 'EN' );\n\\nn\\t3::LL()->translate( 'The horse doesn't eat cucumber salad', 'EN', 'DE' );<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"30cecb91cbd0c5eb22b177b00f70ee76":{"_cs":"221d1330f650463c34a5d09e74c33489","text":"<p>Log to the <code>sys_log<\/code><\/p> table."},"232d63dcc19c258fcc0fdb3f13e65903":{"_cs":"bc58a748e33512808a986810f45641f1","text":"<p>Write a warning in the sys_log table.\nShorthand for \\nn\\t3::Log()->log(..., 'error');<\/p>\n<pre><code class=\"language-php\"> \\nn\\t3::Log()->error( 'extname', 'text', ['die'=>'data'] );<\/code><\/pre>\n<p>return void<\/p>"},"cb03377045262c771c996f604c1bf785":{"_cs":"5baa4fca4915a2f2801eac8dcb3ba432","text":"<p>Write an info to the sys_log table.\nShorthand for \\nn\\t3::Log()->log(..., 'info');<\/p>\n<pre><code class=\"language-php\"> \\nn\\t3::Log()->error( 'extname', 'text', ['die'=>'data'] );<\/code><\/pre>\n<p>return void<\/p>"},"c199210ebbb29eed09b2b8f8b5a8c717":{"_cs":"7185abf536bc729f7e828161bc2d6cb3","text":"<p>Writes an entry in the <code>sys_log<\/code> table.\nThe severity level can be specified, e.g. <code>info<\/code>, <code>warning<\/code> or <code>error<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Log()->log( 'extname', 'All bad.', ['nix'=>'good'], 'error' );\n\\nn\\t3::Log()->log( 'extname', 'Everything nice.' );<\/code><\/pre>\n<p><code>@return mixed<\/code><\/p>"},"0c8420f1e2cb79421e3e4caa72c90294":{"_cs":"bf35116a662d36c64a1a189cbfb31eeb","text":"<p>Helper for the mail dispatch<\/p>"},"977a915835a3d4af81d2738ad94efe2e":{"_cs":"48cf3b7edab0b7175912194420f3a344","text":"<p>Send an email.<\/p>\n<pre><code class=\"language-php\">$html = \\nn\\t3::Template()->render('MailTemplate', ['varKey'=>'varValue'], 'tx_extname_plugin');\n\n\\nn\\t3::Mail()->send([\n    'html' => $html,\n    'plaintext' => Optional: text version\n    'fromEmail' => sender email\n    'fromName' => sender name\n    'toEmail' => recipient email\n    'subject' => subject\n    'attachments' => [...],\n    'emogrify' => convert CSS styles to inline styles (default: `true`)\n    'absPrefix' => convert relative paths into absolute ones (default: `true`).\n]);<\/code><\/pre>\n<p>Embed images with <code><img data-embed=\"1\" src=\"...\" \/><\/code>\nFile attachments with <code><a data-embed=\"1\" href=\"...\" \/><\/code>\n<code>@return void<\/code><\/p>"},"64d46e7ca7bc1dcd4591f85c1101527f":{"_cs":"a090d919125d5d1a1e266b0ca20cba65","text":"<p>Simplifies the use of FlashMessages.<\/p>\n<p>In the backend: FlashMessages are automatically output at the top<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Message()->OK('Title', 'Infotext');\n\\nn\\t3::Message()->ERROR('Title', 'Infotext');<\/code><\/pre>\n<p>On the frontend: FlashMessages can be output via ViewHelper<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Message()->OK('Title', 'Infotext');\n<nnt3:flashMessages \/>\n<f:flashMessages queueIdentifier='core.template.flashMessages' \/>\n\n\\nn\\t3::Message()->setId('top')->OK('title', 'infotext');\n<nnt3:flashMessages id='top' \/>\n<f:flashMessages queueIdentifier='top' \/><\/code><\/pre>\n<p>... or rendered as HTML and returned:<\/p>\n<pre><code class=\"language-php\">echo \\nn\\t3::Message()->render('top');\necho \\nn\\t3::Message()->render();<\/code><\/pre>"},"c8eba072d23699339c0beca6ef7135c1":{"_cs":"0319e6c8c67e60378ace2c44ef788564","text":"<p>Emits an \"ERROR\" flash message<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Message()->ERROR('Title', 'Infotext');<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"060bba5d6418e910ad651ebeb2726a36":{"_cs":"b7dca3833cb32846f5881277afe25f7e","text":"<p>Emits an \"OK\" flash message<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Message()->OK('Title', 'Infotext');<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"60c828661cc225cf760f8c8fdf3ebb96":{"_cs":"5a91c75eec2c553d131af5cb16018ed3","text":"<p>Emits a \"WARNING\" flash message<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Message()->WARNING('Title', 'Infotext');<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"a5be265a54f342aaaec9d4ce3c709e7e":{"_cs":"79daa46507c8298c73747fa22b759ada","text":"<p>Saves a flash message to the message queue for frontend or backend.\n<code>@return void<\/code><\/p>"},"e019295020619262be3fae75e5ba93b1":{"_cs":"6d55231767be39c35efbfb2f72cf5a0b","text":"<p>Deletes all flash messages.\nOptionally, a queue ID can be specified<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Message()->flush('above');\n\\nn\\t3::Message()->flush();<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"f5eee1dd2c10114b1b37afa8840fb4ea":{"_cs":"869aa2ae4a5141308f8fda1f362c1dbe","text":"<p>Renders the flash messages in the queue.\nSimple example:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Message()->OK('Yes', 'No');\necho \\nn\\t3::Message()->render();<\/code><\/pre>\n<p>Example with a queue ID:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Message()->setId('above')->OK('Yes', 'No');\necho \\nn\\t3::Message()->render('top');<\/code><\/pre>\n<p>Output in the fluid via the ViewHelper:<\/p>\n<pre><code class=\"language-php\"><nnt3:flashMessages id=\"top\" \/>\n{nnt3:flashMessages()}<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"d683b79315d847a0ff4875357b8d61d7":{"_cs":"6f6f211b52d1672a609e0743602ef597","text":"<p>Determines which MessageQueue to use<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Message()->setId('top')->OK('title', 'infotext');<\/code><\/pre>\n<p>Output to Fluid via ViewHelper:<\/p>\n<pre><code class=\"language-php\"><nnt3:flashMessages id=\"top\" \/>\n{nnt3:flashMessages(id:'top')}<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"6eaab7157d289a25e3b3674a61d91a0f":{"_cs":"e99d41f51093a456af7af39de1dfbe2e","text":"<p>Everything you need for objects and models.<\/p>"},"066a9ee2ae680de1b982fe3e7ff5b29e":{"_cs":"518324d705d88c5df0dc225bb89e94de","text":"<p>Access a key in an object or array.\nkey must be single string, not path<\/p>\n<p>\\nn\\t3::Obj()->accessSingleProperty( $obj, 'uid' );\n\\nn\\t3::Obj()->accessSingleProperty( $obj, 'fal_media' );\n\\nn\\t3::Obj()->accessSingleProperty( $obj, 'falMedia' );<\/p>\n<p><code>@param mixed $obj<\/code> Model or array.\n<code>@param string $key<\/code> the key to fetch<\/p>\n<p><code>@return mixed<\/code><\/p>"},"76f70651c4ddc271f92252933d3e4e09":{"_cs":"b3f443e1c34ca48d9a6e8ac3fc825388","text":"<p>Compares two objects, returns array with differences.\nIf a property of objA does not exist in objB, it is ignored.<\/p>\n<pre><code class=\"language-php\">\/\/ returns array with differences.\n\\nn\\t3::Obj()->diff( $objA, $objB );\n\n\/\/ ignores the uid and title fields\n\\nn\\t3::Obj()->diff( $objA, $objB, ['uid', 'title'] );\n\n\/\/ Compares ONLY the title and bodytext fields\n\\nn\\t3::Obj()->diff( $objA, $objB, [], ['title', 'bodytext'] );\n\n\/\/ options\n\\nn\\t3::Obj()->diff( $objA, $objB, [], [], ['ignoreWhitespaces'=>true, 'ignoreTags'=>true, 'ignoreEncoding'=>true] );<\/code><\/pre>\n<p><code>@param mixed $objA<\/code> An object, array or model.\n<code>@param mixed $objB<\/code> The Object or Model to compare.\n<code>@param array $fieldsToIgnore<\/code> List of properties that can be ignored. Empty = none\n<code>@param array $fieldsToCompare<\/code> List of properties to compare. Blank = all\n<code>@param boolean $options<\/code> Options \/ tolerances when comparing.\n<code>ignoreWhitespaces<\/code> => ignore spaces\n<code>ignoreEncoding<\/code> => ignore UTF8 \/ ISO encoding\n<code>ignoreTags<\/code> => ignore HTML tags<\/p>\n<p><code>@return array<\/code><\/p>"},"458fcbd92b552e4add10bb1862499e0c":{"_cs":"032f4030a0c026a5d67cb77305a968c1","text":"<p>converts to array<\/p>\n<p><code>@param mixed $obj<\/code><\/p>\n<p><code>@return array<\/code><\/p>"},"77bb51e22c8e077135f0de2448c009ce":{"_cs":"c027d805e594fe3ef7b216a02bb327b9","text":"<p>Access a value in the object using the key.\nAlias to <code>\\nn\\t3::Obj()->accessSingleProperty()<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Obj()->get( $obj, 'title' );\n\\nn\\t3::Obj()->get( $obj, 'falMedia' );\n\\nn\\t3::Obj()->get( $obj, 'fal_media' );<\/code><\/pre>\n<p><code>@param mixed $obj<\/code> Model or array.\n<code>@param string $key<\/code> the key \/ property<\/p>\n<p><code>@return mixed<\/code><\/p>"},"b961e636bc01959003f5a7b41fbd332d":{"_cs":"8ae7ccb5ee6b17de8b9d9a94d1d3fc7a","text":"<p>Get info about the classSchema of a model<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Obj()->getClassSchema( $myModel\\Name::class );\n\\nn\\t3::Obj()->getClassSchema( $myModel );<\/code><\/pre>\n<p>return DataMap<\/p>"},"b59ea4ec314bec3d6e421526df589cad":{"_cs":"cc964706cf6b0c2fe71bdd77ec63f9e0","text":"<p>Access ALL keys to be fetched in an object<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Obj()->getKeys( $model ); \/\/ ['uid', 'title', 'text', ...]\n\\nn\\t3::Obj()->getKeys( $model ); \/\/ ['uid', 'title', 'text', ...]\n\\nn\\t3::Obj()->getKeys( \\Nng\\MyExt\\Domain\\Model\\Demo::class ); \/\/ ['uid', 'title', 'text', ...]<\/code><\/pre>\n<p><code>@param mixed $obj<\/code> Model, array or class name.\n<code>@return array<\/code><\/p>"},"aeb2001ad72859f2e9821722207dc31a":{"_cs":"51191b858e578b5a6a96f5b94b191f5b","text":"<p>Get info about the arguments of a method.\n<code>Also takes into account the typehinting specified by<\/code>@param<code>, e.g. to<\/code>ObjectStorage<ModelName><code>.<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Obj()->getMethodArguments( \\My\\Model\\Name::class, 'myMethodName' );\n\\nn\\t3::Obj()->getMethodArguments( $myClassInstance, 'myMethodName' );<\/code><\/pre>\n<p>Returns as example:<\/p>\n<pre><code class=\"language-php\">'varName' => [\n    'type' => 'Storage<model>',\n    'storageType' => 'Storage'\n    'elementType' => 'Model'\n 'optional' => true,\n 'defaultValue' => '123'\n]<\/code><\/pre>\n<p>return array<\/p>"},"7c6388568cb28da43db59e94ed311024":{"_cs":"e369188ee26f93adbc972e850b910e6b","text":"<p>return a list of properties of an object or model with type<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Obj()->getProps( $obj ); \/\/ ['uid'=>'integer', 'title'=>'string' ...]\n\\nn\\t3::Obj()->getProps( $obj, true ); \/\/ ['uid'=>[type=>'integer', 'private'=>TRUE]]\n\\nn\\t3::Obj()->getProps( $obj, 'default' ); \/\/ ['uid'=>TRUE]\n\\nn\\t3::Obj()->getProps( \\Nng\\MyExt\\Domain\\Model\\Demo::class );<\/code><\/pre>\n<p><code>@param mixed $obj<\/code> Model or class name.\n<code>@param mixed $key<\/code> If TRUE array with all info is fetched, e.g. also default value etc.\n<code>@param boolean $onlySettable<\/code> Get only properties which can also be set by setName().\n<code>@return array<\/code><\/p>"},"3fbd850670fc09499edf27a05dd259b3":{"_cs":"3c20879a73d6276e8dbfea2920741c19","text":"<p>Get all keys of an object that have a SETTER.\nIn contrast to <code>\\nn\\t3::Obj()->getKeys()<\/code>, only the property keys which can be\nwhich can be set, e.g. via <code>setNameDerProp()<\/code><\/p>\n<p><code>@return array<\/code><\/p>"},"657a45c7642a176bff7012658ccbfbff":{"_cs":"a7d71d37419d29cecfb5871c368cf092","text":"<p>returns the DB table name for a model<\/p>\n<pre><code class=\"language-php\">$model = new \\Nng\\MyExt\\Domain\\Model\\Test;\n\\nn\\t3::Obj()->getTableName( $model ); \/\/ 'tx_myext_domain_model_test'\n\\nn\\t3::Obj()->getTableName( Test::class ); \/\/ 'tx_myext_domain_model_test'<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"608198804684924148220a124c79298c":{"_cs":"b5b1832c577295a8de5763af764ffd6f","text":"<p>Checks if the object is a <code>\\TYPO3\\CMS\\Core\\Resource\\FileReference<\/code>;<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Obj()->isFalFile( $obj );<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"4d881090bd8a24a47cc278b41bea270f":{"_cs":"4f5f9e371498d2297f4cff7a5b0b0a44","text":"<p>Checks if the object is a <code>\\TYPO3\\CMS\\Core\\Resource\\File<\/code>;<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Obj()->isFile( $obj );<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"8e82e54194bc1767cd3361e244ef8338":{"_cs":"e5e0cf3bfebd925648b9b5c0d0bdacb1","text":"<p>Checks if the object is a <code>\\TYPO3\\CMS\\Extbase\\Domain\\Model\\FileReference<\/code>\n<pre><code class=\"language-php\">\\nn\\t3::Obj()->isFileReference( $obj );<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"f5a31b9e2aa82b9f45717e363b2cc3e5":{"_cs":"b3b6f80551759df9be556dfbc620ad1d","text":"<p>Checks if the object is a domain model<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Obj()->isModel( $obj );<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"f123aac735407be97a58f63c6eb682a2":{"_cs":"cda07c6758956ee81cb6cc2e550dbae0","text":"<p>Checks if a type (string) is a \"simple\" type.\nSimple types are all types except models, classes, etc. - e.g. <code>array<\/code>, <code>string<\/code>, <code>boolean<\/code> etc.<\/p>\n<pre><code class=\"language-php\">$isSimple = \\nn\\t3::Obj()->isSimpleType( 'string' ); \/\/ true\n$isSimple = \\nn\\t3::Obj()->isSimpleType( \\My\\Extname\\ClassName::class ); \/\/ false<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"a757fb063ff4ebf855b5d935ced33b50":{"_cs":"cbeaaacc4654bd03a66cd89a2cf01fb1","text":"<p>Performs whether the object is a storage.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Obj()->isStorage( $obj );<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"07e5a2f60d0ca4ec32f2c983cafa9fa9":{"_cs":"fb0499fc810752fc6985df198c7ee646","text":"<p>Checks if the object is a SysCategory.\nTakes into account all models stored in <code>sys_category<\/code>\n<pre><code class=\"language-php\">\\nn\\t3::Obj()->isSysCategory( $obj );\n\n$cat = new \\GeorgRinger\\News\\Domain\\Model\\Category();\n\\nn\\t3::Obj()->isSysCategory( $cat );<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"4481323474308348883c98c237c5b9eb":{"_cs":"736cd14edb05b527a4efe58e35c2da26","text":"<p>Merge an array into an object<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Obj( \\My\\Doman\\Model )->merge(['title'=>'New Title']);<\/code><\/pre>\n<p>This can even be used to write \/ overwrite FileReferences.\nIn this example <code>$data<\/code> is merged with an existing model.\n<code>falMedia<\/code> is an ObjectStorage in the example. The first element in <code>falMedia<\/code> exists\nalready exists in the database (<code>uid = 12<\/code>). Only the title is updated here.\nThe second element in the array (without <code>uid<\/code>) is new. For this, a new\n<code>sys_file_reference<\/code> is automatically created in the database.\n<pre><code class=\"language-php\">$data = [\n    'uid' => 10,\n    'title' => 'the title',\n    'falMedia' => [\n        ['uid'=>12, 'title'=>'1st image title'],\n        ['title'=>'NEW image title', 'publicUrl'=>'fileadmin\/_tests\/5e505e6b6143a.jpg'],\n    ]\n];\n$oldModel = $repository->findByUid( $data['uid'] );\n$mergedModel = \\nn\\t3::Obj($oldModel)->merge($data);<\/code><\/pre>\n<p><strong>Note<\/strong>\nTo create a new model with data from an array there is\nthere is the method <code>$newModel = \\nn\\t3::Convert($data)->toModel( \\My\\Model\\Name::class );<\/code><\/p>\n<p><code>@return Object<\/code><\/p>"},"e1981ae45a8bc83458614b6bcad1d22f":{"_cs":"17617c9d8853a3db85fdfc2d9b31d7ae","text":"<p>Parse a string with info about <code>ObjectStorage<Model><\/code>.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Obj()->parseType( 'string' );\n\\nn\\t3::Obj()->parseType( 'Nng\\Nnrestapi\\Domain\\Model\\ApiTest' );\n\\nn\\t3::Obj()->parseType( '\\TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage<Nng\\Nnrestapi\\Domain\\Model\\ApiTest>' );<\/code><\/pre>\n<p>Git back an array of info:\n<code>type<\/code> is only set if it is an array or an ObjectStorage.\n<code>elementType<\/code> is always the type of the model or the TypeHinting of the variable<\/p>\n<pre><code class=\"language-php\">[\n    'elementType' => 'Nng\\Nnrestapi\\Domain\\Model\\ApiTest',\n    'type' => 'TYPO3\\CMS\\Extbase\\Persistence\\ObjectStorage',\n    'simple' => FALSE\n]<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"c4ea8e55de99566aba4870ca4b090872":{"_cs":"5d9c5467a18243c2c5e96bf58c712378","text":"<p>Access to a key in an object or array.\nThe key can also be a path, e.g. \"img.0.uid\"<\/p>\n<p>nn\\t3::Obj()->prop( $obj, 'img.0.uid' );<\/p>\n<p><code>@param mixed $obj<\/code> Model or array.\n<code>@param string $key<\/code> the key to fetch<\/p>\n<p><code>@return mixed<\/code><\/p>"},"5b734414800d5b1eee7fd57bc32bfbe8":{"_cs":"c5f00b8405c30b054c661602928a7f53","text":"<p>Get individual properties of an object or array<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Obj()->props( $obj, ['uid', 'pid'] );\n\\nn\\t3::Obj()->props( $obj, 'uid' );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"da1a29262143130ce8fb145de16a2706":{"_cs":"e1a3c100c91e0e5a57dc70df14d35658","text":"<p>Sets a value in an object or array.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Obj()->set( $obj, 'title', $val );<\/code><\/pre>\n<p><code>@param mixed $obj<\/code> Model or array.\n<code>@param string $key<\/code> the key \/ property\n<code>@param mixed $val<\/code> the value to be set\n<code>@param boolean $useSetter<\/code> use setKey() method to set<\/p>\n<p><code>@return mixed<\/code><\/p>"},"c28effd9c1c7c4dac0d31d538fe997df":{"_cs":"684a98b6239b5e90fa0e2bbbb5e4c90c","text":"<p>Converts an object to an array.\nIn case of memory problems due to recursions: Specify max depth!<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Obj()->toArray($obj, 2, ['uid', 'title']);\n\\nn\\t3::Obj()->toArray($obj, 1, ['uid', 'title', 'parent.uid']);<\/code><\/pre>\n<p><code>@param mixed $obj<\/code> ObjectStorage, model or array to be converted.\n<code>@param integer $depth<\/code> Depth to be converted. For recursive conversion be sure to use\n<code>@param array $fields<\/code> Return only these fields from the object \/ array.\n<code>@param boolean $addClass<\/code> '__class' with info about the class?<\/p>\n<p><code>@return array<\/code><\/p>"},"981621d064a2851353c55cf349eb7b57":{"_cs":"ac201027d841c49f0e640331c3e226b0","text":"<p>All about the <code>pages<\/code> table.<\/p>"},"55ff3b03cf537b257d6bb5e6f4aa460f":{"_cs":"6705b1f4b39239e4e88a4111f1b12497","text":"<p>Insert CSS file into <code><head><\/code>\nSee <code>\\nn\\t3::Page()->addHeader()<\/code> for simpler version.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->addCss( 'path\/to\/style.css' );<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"d5a41c2fd1489a844348a1b917932c84":{"_cs":"290a82480883619ef62b80d419717f6f","text":"<p>Insert CSS library into <code><head><\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->addCssLibrary( 'path\/to\/style.css' );<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"266b613396f7bbd932fd348c2f56eff1":{"_cs":"4f7a3d5e29003c572114b653044dbd60","text":"<p>Append CSS or JS or HTML code to footer.\nDecide for yourself which method of PageRender to use<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->addFooter( 'fileadmin\/style.css' );\n\\nn\\t3::Page()->addFooter( ['fileadmin\/style.css', 'js\/script.js'] );\n\\nn\\t3::Page()->addFooter( 'js\/script.js' );\n\\nn\\t3::Page()->addFooter( '<script>....<\/script>' );<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"f7005dbc91aad9f217ec4827093e099e":{"_cs":"f0dd82ee4a83474dc2ca7e607759976c","text":"<p>Inject HTML code before end of <code><body><\/code>\nSee <code>\\nn\\t3::Page()->addFooter()<\/code> for simpler version.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->addFooterData( '<script src=\"...\"><\/script>' );<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"51fb1db98e490e162f212bab13fd8eba":{"_cs":"f09ab8d69f51d1aa9a488f2cf96cddcf","text":"<p>Append CSS or JS or HTML code to footer.\nDecide for yourself which method of PageRender to use<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->addHeader( 'fileadmin\/style.css' );\n\\nn\\t3::Page()->addHeader( ['fileadmin\/style.css', 'js\/script.js'] );\n\\nn\\t3::Page()->addHeader( 'js\/script.js' );\n\\nn\\t3::Page()->addHeader( '<script>....<\/script>' );<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"7d0f2163b6e3cb02278abd7786dea6d4":{"_cs":"d9db3d5cb0b2a9766f1733c89f9a4617","text":"<p>Sneak HTML code into <code><head><\/code>\nSee <code>\\nn\\t3::Page()->addHeader()<\/code> for simpler version.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->addHeaderData( '<script src=\"...\"><\/script>' );<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"dd140f75d2be7802c8c2f41dab879647":{"_cs":"c0a99ad6251d2e1493879647b1cdeaa9","text":"<p>Inject JS file into <code><head><\/code>\nSee <code>\\nn\\t3::Page()->addHeader()<\/code> for simpler version.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->addJsFile( 'path\/to\/file.js' );<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"8b1349098afd69c1dc17b6c0fab5c472":{"_cs":"7355518e02ac66f478820d34db990c26","text":"<p>Inject JS file at the end of <code><body><\/code>\nSee <code>\\nn\\t3::Page()->addJsFooterFile()<\/code> for simpler version.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->addJsFooterFile( 'path\/to\/file.js' );<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"d4a55592bb862f4dc0574a3422f37653":{"_cs":"21e2f6dcfb1715c56fbf37b8ba11ad43","text":"<p>Inject JS library at the end of <code><body><\/code>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->addJsFooterLibrary( 'path\/to\/file.js' );<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"5820f4563af2db5f17204a208159a9d7":{"_cs":"5acf20475265678a452969f5273d4f63","text":"<p>Inject JS library into <code><head><\/code>.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->addJsLibrary( 'path\/to\/file.js' );<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"8e54aec81e46ed5f1622868cac91d7ff":{"_cs":"f10a5a92368e2726ebc3c9b2101798e5","text":"<p>Clear page cache of one (or more) pages<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->clearCache( $pid );\n\\nn\\t3::Page()->clearCache( [1,2,3] );\n\\nn\\t3::Page()->clearCache();<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"7f3467cd9b7b1d262388c70c901a9230":{"_cs":"5aff8924d1178be885c68e012273eee4","text":"<p>Get data of a page (from table \"pages\")<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->get( $uid );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"7db88b72ef8ea10c6bdcc395e4e004a1":{"_cs":"2b405d1e4d1698fc8decbcc8826e83fd","text":"<p>Generate an absolute link to a page<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->getAbsLink( $pid );\n\\nn\\t3::Page()->getAbsLink( $pid, ['type'=>'232322'] );\n\\nn\\t3::Page()->getAbsLink( ['type'=>'232322'] );<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"99885216e84686330e08f77bc131c690":{"_cs":"ca65bf79ef9aa1a7f94ccc5f960e1f5a","text":"<p>Get link to an action\/controller<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->getActionLink( $pid, $extName, $pluginName, $controllerName, $actionName, $args );<\/code><\/pre>\n<p>Example for the news extension:<\/p>\n<pre><code class=\"language-php\">$newsArticleUid = 45;\n$newsDetailPid = 123;\n\\nn\\t3::Page()->getActionLink( $newsDetailPid, 'news', 'pi1', 'News', 'detail', ['news'=>$newsArticleUid]);<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"0e3779c2ad4417b12b020d38d0d5d73f":{"_cs":"f7a77348175f4168460cdb0842b6deb4","text":"<p>Get list of child uids of one or more pages.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->getChildPids( 123, 1 );\n\\nn\\t3::Page()->getChildPids( [123, 124], 99 );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"ce341401872c2a7f78aad0a3d42eb032":{"_cs":"3bbb4c205245980e7b186fcf87394cce","text":"<p>Get data of a page (table <code>pages<\/code>).<\/p>\n<pre><code class=\"language-php\">\/\/ data of the current page.\n\\nn\\t3::Page()->getData();\n\n\/\/ get data of the page with pid = 123\n\\nn\\t3::Page()->getData( 123 );\n\n\/\/ get data of the pages with pids = 123 and 456. Key of the array = pid\n\\nn\\t3::Page()->getData( [123, 456] );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"e0b0c6992da536ee0a3883a8b6bc228b":{"_cs":"876224f1dc61f12b932908409b5f6540","text":"<p>Get a single field from page-Data.\nThe value can be inherited from parent pages via <code>slide = true<\/code>\n<p><strong>(!) Important<\/strong>:\nCustom fields must be defined as rootLine in <code>ext_localconf.php<\/code>!\nSee also <code>\\nn\\t3::Registry()->rootLineFields(['key', '...']);<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->getField('layout');\n\\nn\\t3::Page()->getField('backend_layout_next_level', true, 'backend_layout');<\/code><\/pre>\n<p>Exisits also as ViewHelper:<\/p>\n<pre><code class=\"language-php\">{nnt3:page.data(key:'uid')}\n{nnt3:page.data(key:'media', slide:1)}\n{nnt3:page.data(key:'backend_layout_next_level', slide:1, override:'backend_layout')}<\/code><\/pre>\n<p><code>@return mixed<\/code><\/p>"},"e70ea688a2989dd9282b8f9ef2f90bd4":{"_cs":"37efd238ff5e9e7a7740f778c1e2e255","text":"<p>Generate a simple link to a page in the frontend.<\/p>\n<p>Works in any context - both from a backend module or scheduler\/CLI job, and in the frontend context, e.g. in the controller or a ViewHelper.\nAbsolute URLs are generated from the backend context into the frontend. The URLs are encoded as readable URLs - the slug path or RealURL are taken into account.\n<pre><code class=\"language-php\">\\nn\\t3::Page()->getLink( $pid );\n\\nn\\t3::Page()->getLink( $pid, $params );\n\\nn\\t3::Page()->getLink( $params );\n\\nn\\t3::Page()->getLink( $pid, true );\n\\nn\\t3::Page()->getLink( $pid, $params, true );\n\\nn\\t3::Page()->getLink( 'david@99grad.de' )<\/code><\/pre>\n<p>Example of generating a link to a controller:<\/p>\n<p><strong>Tip:<\/strong> see also <code><nn\\t3::Page()->getActionLink()<\/code> for a short version!<\/p>\n<pre><code class=\"language-php\">$newsDetailPid = 123;\n$newsArticleUid = 45;\n\n$link = \\nn\\t3::Page()->getLink($newsDetailPid, [\n    'tx_news_pi1' => [\n        'action' => 'detail',\n        'controller' => 'news',\n        'news' => $newsArticleUid,\n    ]\n]);<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"ac2caddc8c50428592d5a5111fcee458":{"_cs":"a03db3301e684d2a25ae538b03d2eede","text":"<p>GetPageRenderer<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->getPageRenderer();<\/code><\/pre>\n<p><code>@return PageRenderer<\/code><\/p>"},"be185fb6fb1301076e54a82f1add089d":{"_cs":"3d6daf6801d503f0a83efb5831f13cc7","text":"<p>Get the PID of the current page.\nIn the frontend: the current <code>TSFE->id<\/code>\nIn the backend: the page that was selected in the page tree.\nWithout context: The pid of the site root<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->getPid();\n\\nn\\t3::Page()->getPid( $fallbackPid );<\/code><\/pre>\n<p><code>@return int<\/code><\/p>"},"dd942adb5bee5ccfdc5d66c3bde76e65":{"_cs":"3a276f8fb069d01dd9d3f30a418c5064","text":"<p>Get PID from request string, e.g. in backend modules.\nHacky. ToDo: check if there is a better method<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->getPidFromRequest();<\/code><\/pre>\n<p><code>@return int<\/code><\/p>"},"bcab7397dcf04104b0717f86071965f4":{"_cs":"4221e1e404c1640c0b5b51b779c89d3a","text":"<p>GetRootline for given PID<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->getRootline();<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"a5e107d2935ffdf5bf25125cd894264b":{"_cs":"01b2246609eae954ece74c1617884136","text":"<p>Get the PID of the site root(s).\nCorresponds to the page in the backend that has the \"globe\" as icon.\n(in the page properties \"use as the start of the web page\")<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->getSiteRoot();<\/code><\/pre>\n<p><code>@return int<\/code><\/p>"},"e0aeec4ddb863acc5c75a5078fd35c8b":{"_cs":"af55775a0af3fc967ea4675736a9d9b0","text":"<p>Get men\u00c3\u00bc for given PID<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->getSubpages();\n\\nn\\t3::Page()->getSubpages( $pid );\n\\nn\\t3::Page()->getSubpages( $pid, true ); \/\/ Also fetch hidden pages<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"bc0afcbf31a20b8baea18192018e13c9":{"_cs":"1eacbf1d2c786d7a2a8cdd1409d56dc0","text":"<p>Get current page title (without suffix)<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->getTitle();<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"68ea51aedca1aa17ff1bf027796510b6":{"_cs":"e0c10d5b4dc14872133cc28c1052fdf6","text":"<p>Checks if a page has submenus<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->hasSubpages();<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"},"b493d14fb77edc5c79b3beed487330fb":{"_cs":"dac623b2e144ee710a7e54c5840ad476","text":"<p>Change PageTitle (&lt;title&gt; tag).\nDoes <strong>not<\/strong> work if EXT:advancedtitle is enabled!<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Page()->setTitle('YEAH!');<\/code><\/pre>\n<p>Also available as ViewHelper:<\/p>\n<pre><code class=\"language-php\">{nnt3:page.title(title:'Yeah')}\n{entry.title->nnt3:page.title()}<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"ed93c2eea95eed9f21a21a71aeda8da3":{"_cs":"0acd838d42fbd29c1671b6bf7da6b3fe","text":"<p>Helpful methods to register extension components like plugins,\nBackend modules, FlexForms etc.<\/p>"},"d65da2793a26a1824770e287d508eb2b":{"_cs":"71c8047cbafe1597bae853acb7c40cb7","text":"<p>AddPageConfig<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Registry()->addPageConfig( 'test.was = 10' );\n\\nn\\t3::Registry()->addPageConfig( '<INCLUDE_TYPOSCRIPT: source=\"FILE:EXT:extname\/Configuration\/TypoScript\/page.txt\">' );\n\\nn\\t3::Settings()->addPageConfig( '@import \"EXT:extname\/Configuration\/TypoScript\/page.ts\"' );<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"e0019ff5106a720c943c7d55c0bd0f0c":{"_cs":"5fbec1c20fa12df9c8b56e5c61493922","text":"<p>Inserts a hook that will be executed when you click on \"Clear Cache\".\nThe following script goes into the <code>ext_localconf.php<\/code> of your own extension:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Registry()->clearCacheHook( \\My\\Ext\\Path::class . '->myMethod' );<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"6a9849f8974bedc8651aa7d9b03a972a":{"_cs":"38d875239715320a1f130478866a45bc","text":"<p>Configuring a plugin.\nUse in <code>ext_localconf.php<\/code>.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Registry()->configurePlugin( 'Nng\\Nncalendar', 'Nncalendar',\n    [\\Nng\\ExtName\\Controller\\MainController::class => 'index,list'],\n    [\\Nng\\ExtName\\Controller\\MainController::class => 'show']\n);<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"05962b53fe714b384abec9d3b2568d7d":{"_cs":"4d51232a89d4ada4c355a41de8604fff","text":"<p>Register a flexform for a plugin<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Registry()->flexform( 'nncalendar', 'nncalendar', 'FILE:EXT:nnsite\/Configuration\/FlexForm\/flexform.xml' );\n\\nn\\t3::Registry()->flexform( 'Nng\\Nncalendar', 'nncalendar', 'FILE:EXT:nnsite\/Configuration\/FlexForm\/flexform.xml' );<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"7c262817b3c551bfc2b4a834b5aee565":{"_cs":"94ae190d83a1940e45fb8f10f3584cf8","text":"<p>Register global namespace for fluid.\nMostly used in <code>ext_localconf.php<\/code>.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Registry()->fluidNamespace( 'nn', 'Nng\\Nnsite\\ViewHelpers' );\n\\nn\\t3::Registry()->fluidNamespace( ['nn', 'nng'], 'Nng\\Nnsite\\ViewHelpers' );\n\\nn\\t3::Registry()->fluidNamespace( ['nn', 'nng'], ['Nng\\Nnsite\\ViewHelpers', 'Other\\Namespace\\Fallback'] );<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"67d8c33f84107abeb7dbc3324ea6b878":{"_cs":"15a87013d40c78d91ed4e2c8ceb0ad71","text":"<p>Get a value from the sys_registry table.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Registry()->get( 'nnsite', 'lastRun' );<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"10c9b28b672be97cc21658b0e04b607f":{"_cs":"df47a4ddd5f9685ee551728c184bcbed","text":"<p>Generate plugin name.\nDepending on Typo3 version the plugin name will be returned with or without vendor.<\/p>\n<pre><code class=\"language-php\"> \\nn\\t3::Registry()->getVendorExtensionName( 'nncalendar' ); \/\/ => Nng.Nncalendar\n    \\nn\\t3::Registry()->getVendorExtensionName( 'Nng\\Nncalendar' ); \/\/ => Nng.Nncalendar<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"dab950aa0eab713bd093d8dd8ce356c3":{"_cs":"bcd65d07f93148284eef70be1b1f5885","text":"<p>Register an icon. Classically used in ext_tables.php.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Registry()->icon('nncalendar-plugin', 'EXT:myextname\/Resources\/Public\/Icons\/wizicon.svg');<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"6d1f5a91b8c709512426e06a4546406d":{"_cs":"0937b3950b8e5c2326004b18476b2284","text":"<p>Parse list with <code>'ControllerName' => 'action,list,show'<\/code>\nAlways specify the full class path in the <code>::class<\/code> notation.\nNote that before Typo3 10 only the simple class name (e.g. <code>Main<\/code>) is used as key.\nis used as key.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Registry()->parseControllerActions(\n    [\\Nng\\ExtName\\Controller\\MainController::class => 'index,list'],\n);<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"18160a4ce011a4a78b7b28122ff1d15f":{"_cs":"3a311ffb953983019d2d681b257b0500","text":"<p>Register a plugin for selection via the <code>CType<\/code> dropdown in the backend.\nIn <code>Configuration\/TCA\/Overrides\/tt_content.php<\/code> use \u00e2 or <code>ext_tables.php<\/code> (deprecated).<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Registry()->plugin( 'nncalendar', 'nncalendar', 'Calendar', 'EXT:path\/to\/icon.svg' );\n\\nn\\t3::Registry()->plugin( 'Nng\\Nncalendar', 'nncalendar', 'Calendar', 'EXT:path\/to\/icon.svg' );<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"cc17fddf65d2abb86f63afc5dd372fd5":{"_cs":"b0eeaa6b53ffb1f90a83fada0d921ae2","text":"<p>Simplifies the process of registering a list of plugins, which are combined into a\nGroup.<\/p>\n<p>Use in <code>Configuration\/TCA\/Overrides\/tt_content.php<\/code>:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Registry()->pluginGroup(\n    'Nng\\Myextname',\n    'LLL:EXT:myextname\/Resources\/Private\/Language\/locallang_db.xlf:pi_group_name',\n    [\n        'list' => [\n            'title' => 'LLL:EXT:myextname\/Resources\/Private\/Language\/locallang_db.xlf:pi_list.name',\n            'icon' => 'EXT:myextname\/Resources\/Public\/Icons\/Extension.svg',\n            'flexform' => 'FILE:EXT:myextname\/Configuration\/FlexForm\/list.xml'\n        ],\n        'show' => [\n            'title' => 'LLL:EXT:myextname\/Resources\/Private\/Language\/locallang_db.xlf:pi_show.name',\n            'icon' => 'EXT:myextname\/Resources\/Public\/Icons\/Extension.svg',\n            'flexform' => 'FILE:EXT:myextname\/Configuration\/FlexForm\/show.xml'\n        ],\n    ]\n);<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"8491228b421a8247fca415027ae3e0f6":{"_cs":"df49f4bf2d6d3fa57c49e576c2f764c4","text":"<p>Register a field in the pages table to be inherited\/slided to subpages.\nIn the <code>ext_localconf.php<\/code> register:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Registry()->rootLineFields(['slidefield']);\n\\nn\\t3::Registry()->rootLineFields('slidefield');<\/code><\/pre>\n<p>Typoscript setup:<\/p>\n<pre><code class=\"language-php\">page.10 = FLUIDTEMPLATE\npage.10.variables {\n    footer = TEXT\n    footer {\n        data = levelfield:-1, footerelement, slide\n    }\n}<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"efdc878d1c5d9c022ff3edb7cb5c1cbf":{"_cs":"73472fc7a397e4dc343b82a633b61aad","text":"<p>Save a value in the sys_registry table.\nData in this table will be preserved beyond the session.\nFor example, a scheduler job can store the last time it was executed.\nit was executed.<\/p>\n<p>Arrays are recursively merged\/merged by default:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Registry()->set( 'nnsite', 'lastRun', ['one'=>'1'] );\n\\nn\\t3::Registry()->set( 'nnsite', 'lastRun', ['two =>'2'] );\n\n\\nn\\t3::Registry()->get( 'nnsite', 'lastRun' ); \/\/ => ['one'=>1, 'two'=>2]<\/code><\/pre>\n<p>With <code>true<\/code> at the end, the previous values will be deleted:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Registry()->set( 'nnsite', 'lastRun', ['one'=>'1'] );\n\\nn\\t3::Registry()->set( 'nnsite', 'lastRun', ['two'=>'2'], true );\n\n\\nn\\t3::Registry()->get( 'nnsite', 'lastRun' ); \/\/ => ['two'=>2]<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"d623537ed5d42b7548d7ffb1ce0e3183":{"_cs":"fa87a1241e145b8887f2c35441a98b3e","text":"<p>Access to GET \/ POST variables, filecontainer etc.<\/p>"},"90637c7ca433965bd6da7e06c0183b7f":{"_cs":"80ea7a13731a6c4d37179144f9828737","text":"<p>Sends a GET request (via curl) to a server<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Request()->GET( 'https:\/\/...', ['a'=>'123'] );\n\\nn\\t3::Request()->GET( 'https:\/\/...', ['a'=>'123'], ['Accept-Encoding'=>'gzip, deflate'] );<\/code><\/pre>\n<p><code>@param string $url<\/code>\n<code>@param array $queryParams<\/code>\n<code>@param array $headers<\/code>\n<code>@return array<\/code><\/p>"},"98c90c638f14d4d0c086fe0a6db6e863":{"_cs":"51db5d7c602fd9da11fc2882d4060875","text":"<p>Merge from $_GET and $_POST variables<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Request()->GP();<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"b5873ebc7b2c718864fef21b3871011c":{"_cs":"f4d4e8b06abfa91d4a905327d4f476c3","text":"<p>Sends a POST request (via CURL) to a server.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Request()->POST( 'https:\/\/...', ['a'=>'123'] );\n\\nn\\t3::Request()->POST( 'https:\/\/...', ['a'=>'123'], ['Accept-Encoding'=>'gzip, deflate'] );<\/code><\/pre>\n<p><code>@param string $url<\/code>\n<code>@param array $postData<\/code>\n<code>@param array $headers<\/code>\n<code>@return array<\/code><\/p>"},"785772813475ee62d47ab0e7067b9d6b":{"_cs":"ea57039a1a7aa61da4d188c6c57388a4","text":"<p>Get file uploads from <code>$_FILES<\/code> and normalize them.<\/p>\n<p>Normalizes the following file upload variants.\nRemoves empty file uploads from the array.<\/p>\n<pre><code class=\"language-php\"><input name=\"image\" type=\"file\" \/>\n<input name=\"image[key]\" type=\"file\" \/>\n<input name=\"images[]\" type=\"file\" multiple=\"1\" \/>\n<input name=\"images[key][]\" type=\"file\" multiple=\"1\" \/><\/code><\/pre>\n<p><strong>Examples:<\/strong>\nGet ALL file info from <code>$_FILES<\/code>.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Request()->files();\n\\nn\\t3::Request()->files( true ); \/\/ force array<\/code><\/pre>\n<p>Get file info from <code>tx_nnfesubmit_nnfesubmit[...]<\/code>.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Request()->files('tx_nnfesubmit_nnfesubmit');\n\\nn\\t3::Request()->files('tx_nnfesubmit_nnfesubmit', true); \/\/ Force array<\/code><\/pre>\n<p>Fetch only files from <code>tx_nnfesubmit_nnfesubmit[fal_media]<\/code>.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Request()->files('tx_nnfesubmit_nnfesubmit.fal_media' );\n\\nn\\t3::Request()->files('tx_nnfesubmit_nnfesubmit.fal_media', true ); \/\/ force array<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"c568702d7f012f0584a7ce71e8c16b85":{"_cs":"504d3a675c030928bb9a9ae69cac723b","text":"<p>Read the authorization header from the request.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Request()->getAuthorizationHeader();<\/code><\/pre>\n<p>Important: If this doesn't work, the following line is probably missing from the .htaccess\nis probably missing the following line:<\/p>\n<pre><code class=\"language-php\"># nnhelpers: Use when running PHP in PHP CGI mode.\nRewriteRule . - [E=HTTP_AUTHORIZATION:%{HTTP:Authorization},L]<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"4b98bc18db00eb94afed2a0a5f1d5373":{"_cs":"a11c106dc512b689230a6a14f9878ad7","text":"<p>Read the Basic Authorization header from the request.\nIf present, the username and password will be returned.\n<pre><code class=\"language-php\">$credentials = \\nn\\t3::Request()->getBasicAuth(); \/\/ ['username'=>'...', 'password'=>'...']<\/code><\/pre>\n<p>Example call from a test script:<\/p>\n<pre><code class=\"language-php\">echo file_get_contents('https:\/\/username:password@www.testsite.com');<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"e204f1ff939120522dabd990af733b68":{"_cs":"14359ea0f8ac4805ddd8c6675509f27b","text":"<p>Read the <code>Bearer<\/code> header.\nUsed, among other things, to transfer a JWT (Json Web Token).<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Request()->getBearerToken();<\/code><\/pre>\n<p><code>@return string|null<\/code><\/p>"},"7580fae7fa947648618bc6cff50667a5":{"_cs":"305b4a1d218bd8e0e5b757f199a8e18d","text":"<p>Read the JWT (Json Web Token) from the request, validate it and, if the signature is\nreturn the payload of the JWT if the signature is successfully verified.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Request()->getJwt();<\/code><\/pre>\n<p><code>@return array|string<\/code><\/p>"},"30bd2823691ab99d1875b26c9585db86":{"_cs":"9165f81bea0fb898f5974a80d48eefc7","text":"<p>Return the request URI. Basically the URL \/ GET string\nin the browser URL bar, which is stored in <code>$_SERVER['REQUEST_URI']<\/code>\n<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Request()->getUri();<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"09e14d42c8fa8b7e039935785020651c":{"_cs":"d41d8cd98f00b204e9800998ecf8427e","text":""},"0563e198e5818492532579b0d5598606":{"_cs":"55247360304b5166a7c7477f3d3961e1","text":"<p>Methods to simplify access to TypoScript setup, constants, and PageTsConfig.\nsimplify.<\/p>"},"1497aeb235138ce590467077b95b8dd4":{"_cs":"94c60016e0161c5b38554d7b7b489c50","text":"<p>AddPageConfig.\nAlias to <code>\\nn\\t3::Registry()->addPageConfig( $str );<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Settings()->addPageConfig( 'test.was = 10' );\n\\nn\\t3::Settings()->addPageConfig( '<INCLUDE_TYPOSCRIPT: source=\"FILE:EXT:extname\/Configuration\/TypoScript\/page.txt\">' );\n\\nn\\t3::Settings()->addPageConfig( '@import \"EXT:extname\/Configuration\/TypoScript\/page.ts\"' );<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"1594d3e3add12ccda44286d87da3fd4a":{"_cs":"678db565fba9ad4a5f27a016b2001c08","text":"<p>Gets the TypoScript setup and there the \"settings\" section.\nValues from the FlexForm will not be remembered.\nAlias to <code>\\nn\\t3::Settings()->getSettings()<\/code>.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Settings()->get( 'nnsite' );\n\\nn\\t3::Settings()->get( 'nnsite', 'path.in.settings' );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"8d7df8fb4d3e37c9db9e759d96e6d381":{"_cs":"0b5868eabb9088699d84e2fe001a89ff","text":"<p>High performance version for initializing the TSFE in the backend.\nGet the complete TypoScript setup, including '.'-syntax.<\/p>\n<p>Saved via filecache.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Settings()->getCachedTyposcript();<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"4517d95715ed903547c27fa5752b0c48":{"_cs":"ba221260a4bad44d439a66796b407be4","text":"<p>Get array of TypoScript constants.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Settings()->getConstants();\n\\nn\\t3::Settings()->getConstants('path.to.constant');<\/code><\/pre>\n<p>Also acts as a ViewHelper:<\/p>\n<pre><code class=\"language-php\">{nnt3:ts.constants(path:'path.to.constant')}<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"2c1ffdcbba1880d06dd68bece6a8f389":{"_cs":"2778a1c8e303a7ccbeeeaa8ef6f903a3","text":"<p>Get extension configuration.\nComing from the <code>LocalConfiguration.php<\/code>, are defined via the extension settings\nin the backend or <code>ext_conf_template.txt<\/code> defined<\/p>\n<p>Previously: <code>$GLOBALS['TYPO3_CONF_VARS']['EXT']['extConf']['your_extension_key']<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Settings()->getExtConf( 'extname' );<\/code><\/pre>\n<p><code>@return mixed<\/code><\/p>"},"cb7d2f3f504d45bb093a32f3efe232da":{"_cs":"5e45e00e7ab1b15a2aa596299017e7d8","text":"<p>Get setup from a given path, e.g. 'plugin.tx_example.settings'<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Settings()->getFromPath('plugin.path');\n\\nn\\t3::Settings()->getFromPath('L', \\nn\\t3::Request()->GP());\n\\nn\\t3::Settings()->getFromPath('a.b', ['a'=>['b'=>1]]);<\/code><\/pre>\n<p>Also acts as a ViewHelper:<\/p>\n<pre><code class=\"language-php\">{nnt3:ts.setup(path:'path.zur.setup')}<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"da8fbeca149412da4dc4f0ab2e52da85":{"_cs":"c1214cd5ab924e14071cf3547f30e503","text":"<p>Get the complete TypoScript setup, as a simple array - without \".\" syntax.\nWorks both in frontend and backend, with and without passed pid<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Settings()->getFullTyposcript();\n\\nn\\t3::Settings()->getFullTyposcript( $pid );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"62dacab167921cb83ec82bcd843c1c51":{"_cs":"4e1a6b9254a6251afaaa2dce86dbf0b0","text":"<p>Get merge from TypoScript setup for a plugin and its flexform.\nReturns the TypoScript array <code>plugin.tx_extname.settings<\/code>... back.<\/p>\n<p>Important: specify $extensionName only if the setup of a FREMENDARY extension is to be\nor there is no controller context, because the call is made from the backend.\nCall is made from the backend.... otherwise the FlexForm values will not be considered!<\/p>\n<p>In FlexForm use <code><settings.flexform.varName><\/code>!\n<code><settings.flexform.varName><\/code> then overrides <code>settings.varName<\/code> in the TypoScript setup<\/p>\n<p><code>$ttContentUidOrSetupArray<\/code> can be uid of a <code>tt_content<\/code> content element.\nor a simple array to overwrite the values from the TypoScript \/ FlexForm<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Settings()->getMergedSettings();\n\\nn\\t3::Settings()->getMergedSettings( 'nnsite' );\n\\nn\\t3::Settings()->getMergedSettings( $extensionName, $ttContentUidOrSetupArray );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"fa1a7857d370fa58b45dc7d4d74ccf91":{"_cs":"6d5af45cecd947a959a3249959eda114","text":"<p>GetPageConfig<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Settings()->getPageConfig();\n\\nn\\t3::Settings()->getPageConfig('RTE.default.preset');\n\\nn\\t3::Settings()->getPageConfig( $tsPath, $pid );<\/code><\/pre>\n<p>Also acts as a ViewHelper:<\/p>\n<pre><code class=\"language-php\">{nnt3:ts.page(path:'path.zur.pageconfig')}<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"a05d787d024cff98f4e89bec340bf4dc":{"_cs":"4d09f1e61d0b302c9cba6c973f85cbd9","text":"<p>Get the setup for a specific plugin<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Settings()->getPlugin('extname') returns TypoScript from plugin.tx_extname...<\/code><\/pre>\n<p>Important: specify $extensionName only if the setup of a FREME extension\nshould be fetched or there is no controller context because the call is made e.g.\nis made from the backend<\/p>\n<p><code>@return array<\/code><\/p>"},"4752b9345648d1eb289ab61da2b396f1":{"_cs":"7fd22595e910e95c6a395ce9c04fa602","text":"<p>Get the TypoScript setup and there the \"settings\" section.\nValues from the FlexForm will not be remembered.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Settings()->getSettings( 'nnsite' );\n\\nn\\t3::Settings()->getSettings( 'nnsite', 'example.path' );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"8638a2b7a48592cfa3be5b85ac45dcbe":{"_cs":"137354eb9d481fdd661e99a02294de14","text":"<p>Get site configuration.\nThis is the configuration defined in the YAML files in the <code>\/sites<\/code> folder as of TYPO3 9.\nSome of the settings can also be set via the \"Sites\" page module.<\/p>\n<p>In the context of a MiddleWare, the <code>site<\/code> may not be parsed\/loaded yet.\nIn this case the <code>$request<\/code> can be passed from the MiddleWare to get the site.<\/p>\n<pre><code class=\"language-php\">$config = \\nn\\t3::Settings()->getSiteConfig();\n$config = \\nn\\t3::Settings()->getSiteConfig( $request );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"0a069efbc37e6db97fbde9abb9334cb9":{"_cs":"7a3c97b8793cb314bfb89fb5de3088ab","text":"<p>Get current (FIRST) StoragePid for the current plugin.\nStored in the TypoScript setup of the extension under\n<code>plugin.tx_extname.persistence.storagePid<\/code> or in the\nFlexForm of the plugin on the respective page.<\/p>\n<p>IMPORTANT: Merge with selected StoragePID from the FlexForm\nonly happens if <code>$extName<\/code> is left blank.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Settings()->getStoragePid(); \/\/ 123\n\\nn\\t3::Settings()->getStoragePid('nnsite'); \/\/ 466<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"177b7f8e033a0817e83d72683a8b0050":{"_cs":"35e7969ca420f0dabefa002dda27888e","text":"<p>Get ALL storagePids for the current plugin.\nStored as a comma-separated list in the extension's TypoScript setup at.\n<code>plugin.tx_extname.persistence.storagePid<\/code> or in the\nFlexForm of the plugin on the respective page.<\/p>\n<p>IMPORTANT: Merge with selected StoragePID from the FlexForm\nonly happens if <code>$extName<\/code> is left blank.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Settings()->getStoragePids(); \/\/ [123, 466]\n\\nn\\t3::Settings()->getStoragePids('nnsite'); \/\/ [123, 466]<\/code><\/pre>\n<p>Get the child PageUids as well?\n<code>true<\/code> takes the value for \"recursive\" from the FlexForm or from the\nTypoScript of the extension from <code>plugin.tx_extname.persistence.recursive<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Settings()->getStoragePids(true); \/\/ [123, 466, 124, 467, 468]\n\\nn\\t3::Settings()->getStoragePids('nnsite', true); \/\/ [123, 466, 124, 467, 468]<\/code><\/pre>\n<p>Alternatively, a numeric value can be passed for the depth \/ recursion.\ncan be passed.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Settings()->getStoragePids(2); \/\/ [123, 466, 124, 467, 468]\n\\nn\\t3::Settings()->getStoragePids('nnsite', 2); \/\/ [123, 466, 124, 467, 468]<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"476d6ecefe0d46e238f4a52aed97f197":{"_cs":"88b9ce81bfba4747c2553fb42b8af64d","text":"<p>Instantiate TemplateService, parse TypoScript config and setup.\nInternal function \u00e2 not intended to be used.\nUse <code>getFullTyposcript<\/code>.<\/p>\n<p><code>@return object<\/code><\/p>"},"429992caafb52fdb9c42315d73669c9a":{"_cs":"e0f2cebd17689e6a55d1a077cd3a9a40","text":"<p>Write extension configuration.\nWrites an extension configuration to <code>LocalConfiguration.php<\/code>. The values can be used with\nconfiguration in <code>ext_conf_template.txt<\/code>, the values can also be edited via the extension manager \/ extension configuration in the backend.\nExtension configuration in the backend.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Settings()->setExtConf( 'extname', 'key', 'value' );<\/code><\/pre>\n<p><code>@return mixed<\/code><\/p>"},"50365b212c061ef49518301958e6959e":{"_cs":"2ba650298dce9ed6e98ce8979d556b01","text":"<p>Generate and manipulate URL paths (slug)<\/p>"},"6ac6583cef653ffeacdb05d65f0acd3b":{"_cs":"fcb8f42b177068c521303fba17b35f25","text":"<p>Generates a slug (URL path) for a model.\nAutomatically determines the TCA field for the slug.\n<pre><code class=\"language-php\">\\nn\\t3::Slug()->create( $model );<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"2c5d555e1ba4ac7bf5d06d7964577dcb":{"_cs":"b9452e725a722b551ecf0e66dfd43463","text":"<p>Everything about Storages<\/p>"},"fff37824195774804227a7171ed920d6":{"_cs":"c512cedecb572ac4fd5ebfd115708603","text":"<p>Deletes the StorageRowCache<\/p>\n<pre><code class=\"language-php\"> \\nn\\t3::Storage()->clearStorageRowCache();<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"37ccb295cdab22de999cc33e78de5b36":{"_cs":"8ba9d1c753dac3ba09c728165f75b142","text":"<p>Returns the \\Folder object for a destination folder (or file) inside a storage.\nCreates folder if it does not already exist<\/p>\n<p>Examples:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Storage()->getFolder( 'fileadmin\/test\/example.txt' );\n\\nn\\t3::Storage()->getFolder( 'fileadmin\/test\/' );\n        ==> returns \\Folder object for the folder 'test\/'<\/code><\/pre>\n<p><code>@return Folder<\/code><\/p>"},"dcc0656b7b382c8b977bf1f12c21fcfc":{"_cs":"1e46df42a64ce3c7d39ec71b15bd8d6b","text":"<p>In the controller: Get current StoragePid for a plugin.\nAlias to <code>\\nn\\t3::Settings()->getStoragePid()<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Storage()->getPid();\n\\nn\\t3::Storage()->getPid('news');<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"59747fd8ba97bd93daa3a0754c6423c2":{"_cs":"927856ea77e984cee6f6f3b6a9260d9e","text":"<p>Simplifies the work and access to the <code>sys_category<\/code> of Typo3<\/p>"},"45cb0f66104a359d9de7a005b378bf10":{"_cs":"abc4a95642479a4e548041041290a17d","text":"<p>Get list of all sys_categories<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::SysCategory()->findAll();<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"1e20efc866b9906467a2a194604ab5b0":{"_cs":"87827b04f4712aacf93135fe932ea849","text":"<p>Get list of all sys_categories, return <code>uid<\/code> as key<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::SysCategory()->findAllByUid();<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"d5fbcc4f7e21521b778432766c8d462b":{"_cs":"4bbd1b5329614d88975bbc72c7f3ed30","text":"<p>get sys_categories by uid(s).<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::SysCategory()->findByUid( 12 );\n\\nn\\t3::SysCategory()->findByUid( '12,11,5' );\n\\nn\\t3::SysCategory()->findByUid( [12, 11, 5] );<\/code><\/pre>\n<p><code>@return array|\\TYPO3\\CMS\\Extbase\\Domain\\Model\\Category<\/code><\/p>"},"2f1fe06bd9f028bfae803cd169e63eff":{"_cs":"f01140ec4ba8111caae86d90b0d11f76","text":"<p>Get the entire SysCategory tree (as an array).\nEach node has the 'parent' and 'children' attributes to be able to\niterate recursively through tree.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::SysCategory()->getTree();\n\\nn\\t3::SysCategory()->getTree( $uid );<\/code><\/pre>\n<p>ToDo: Check if caching is useful<\/p>\n<p><code>@return array<\/code><\/p>"},"bcbabe3a7ffd042fb54a65f8086d41a0":{"_cs":"e40ec7aeecae3a6b552bb38225a3b7a3","text":"<p>Methods for configuring and accessing fields in the TCA.<\/p>"},"0e236033aa95e81700aefc9ea35d9b6d":{"_cs":"dd7ccab05505410746f147ebaaf4a97f","text":"<p>In the page properties under \"Behavior -> Contains extension\" add a selection option.\nClassically used in <code>Configuration\/TCA\/Overrides\/pages.php<\/code>, formerly in <code>ext_tables.php<\/code><\/p>\n<pre><code class=\"language-php\">\/\/ In ext_localconf.php register the icon (16 x 16 px SVG).\n\\nn\\t3::Registry()->icon('icon-identifier', 'EXT:myext\/Resources\/Public\/Icons\/module.svg');\n\n\/\/ In Configuration\/TCA\/Overrides\/pages.php\n\\nn\\t3::TCA()->addModuleOptionToPage('description', 'identifier', 'icon-identifier');<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"9c3b25b301ed2ff894af9c080566bac1":{"_cs":"be5812c3d52807ad06edf62a1939589b","text":"<p>Get the basic configuration for the TCA.\nThese are the fields like <code>hidden<\/code>, <code>starttime<\/code> etc. which are always the same for (almost) all tables.<\/p>\n<p>Get ALL typical fields:<\/p>\n<pre><code class=\"language-php\">'columns' => \\nn\\t3::TCA()->createConfig(\n    'tx_myext_domain_model_entry', true,\n    ['title'=>...]\n)<\/code><\/pre>\n<p>Get only specific fields:<\/p>\n<pre><code class=\"language-php\">'columns' => \\nn\\t3::TCA()->createConfig(\n    'tx_myext_domain_model_entry',\n    ['sys_language_uid', 'l10n_parent', 'l10n_source', 'l10n_diffsource', 'hidden', 'cruser_id', 'pid', 'crdate', 'tstamp', 'sorting', 'starttime', 'endtime', 'fe_group'],\n    ['title'=>...]\n)<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"e5d5d8df2c37aff02ae3dbf615343d0b":{"_cs":"a928615ca5aa31b64c21747c90303833","text":"<p>Get color picker configuration for the TCA.<\/p>\n<pre><code class=\"language-php\">'config' => \\nn\\t3::TCA()->getColorPickerTCAConfig(),<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"83e8c4c2393ee4deac99e661faf50663":{"_cs":"4049c7b73e91d1d16e76cbd9d4dae4ea","text":"<p>Get configuration array for a field from the TCA.\nAlias to <code>\\nn\\t3::Db()->getColumn()<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::TCA()->getColumn( 'pages', 'media' );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"1846909bc7d64897cecb944eaeac7d39":{"_cs":"dc477463c25b8637fd9cded84691150c","text":"<p>Get configuration array for a table from the TCA.\nAlias to <code>\\nn\\t3::Db()->getColumns()<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::TCA()->getColumns( 'pages' );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"62d0ebd67e64c710034ab953ee7d5955":{"_cs":"a553528f6600021bf7aa4aa1113b8fe5","text":"<p>Get a configuration from the TCA for a path.\nReturns a reference to the <code>config<\/code> array of the corresponding field.\n<pre><code class=\"language-php\">\\nn\\t3::TCA()->getConfig('tt_content.columns.tx_mask_iconcollection');<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"8d5a4b6034e2da4487b7681a003f19fc":{"_cs":"ae1166d8471ab412dc46e148b2235a93","text":"<p>Get default configuration for various typical <code>types<\/code> in <code>TCA<\/code>\nServes as a kind of alias to write the most frequently used <code>config<\/code> arrays faster and shorter.\nand shorter<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::TCA()->getConfigForType( 'text' ); \/\/ => ['type'=>'text', 'rows'=>2, ...]\n\\nn\\t3::TCA()->getConfigForType( 'rte' ); \/\/ => ['type'=>'text', 'enableRichtext'=>'true', ...]\n\\nn\\t3::TCA()->getConfigForType( 'color' ); \/\/ => ['type'=>'input', 'renderType'=>'colorpicker', ...]\n\\nn\\t3::TCA()->getConfigForType( 'fal', 'image' ); \/\/ => ['type'=>'input', 'renderType'=>'colorpicker', ...]<\/code><\/pre>\n<p>Default configurations can be easily overridden\/extended:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::TCA()->getConfigForType( 'text', ['rows'=>5] ); \/\/ => ['type'=>'text', 'rows'=>5, ...]<\/code><\/pre>\n<p>For each type, the most frequently overridden value in the <code>config<\/code> array can also be\nby passing a fixed value instead of an <code>override<\/code> array:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::TCA()->getConfigForType( 'text', 10 ); \/\/ => ['rows'=>10, ...]\n\\nn\\t3::TCA()->getConfigForType( 'rte', 'myRteConfig' ); \/\/ => ['richtextConfiguration'=>'myRteConfig', ...]\n\\nn\\t3::TCA()->getConfigForType( 'color', '#ff6600' ); \/\/ => ['default'=>'#ff6600', ...]\n\\nn\\t3::TCA()->getConfigForType( 'fal', 'image' ); \/\/ => [ config for the field with key `image` ]<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"d3690242e35187da8d29b4ea6d954f39":{"_cs":"e4faf9ca502300c57d250f2ba8175620","text":"<p>Get all field names from the TCA array that have a SysFileReference relation.\nFor the <code>tt_content<\/code> table, this would be <code>assets<\/code>, <code>media<\/code>, etc.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::TCA()->getColumns( 'pages' ); \/\/ => ['media', 'assets', 'image']<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"32070f3adf0a30e4290a7515104ceda6":{"_cs":"37b2b1d0606ec036da7aea1008de37c4","text":"<p>Get FAL configuration for the TCA.<\/p>\n<p>Default config including image cropper, link and alternative image title.\nThis setting changes regularly, what with the amount of parameters\nand their changing position in the array.\n<p><a href=\"https:\/\/bit.ly\/2SUvASe\">https:\/\/bit.ly\/2SUvASe<\/a><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::TCA()->getFileFieldTCAConfig('media');\n\\nn\\t3::TCA()->getFileFieldTCAConfig('media', ['maxitems'=>1, 'fileExtensions'=>'jpg']);<\/code><\/pre>\n<p>Will be used in TCA like this:<\/p>\n<pre><code class=\"language-php\">'falprofileimage' => [\n    'config' => \\nn\\t3::TCA()->getFileFieldTCAConfig('falprofileimage', ['maxitems'=>1]),\n],<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"682bfa743791ba7681904bbd46197887":{"_cs":"0f31c8bd04486a6585454d6679a37fe7","text":"<p>GetRTE configuration for the TCA.<\/p>\n<pre><code class=\"language-php\">'config' => \\nn\\t3::TCA()->getRteTCAConfig(),<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"82dd4d8a3b510b56df21f0f85558ed84":{"_cs":"8d784977360c57ac195c1fff587fa5e7","text":"<p>Get the default slug configuration for the TCA.\n<pre><code class=\"language-php\">'config' => \\nn\\t3::TCA()->getSlugTCAConfig( 'title' )\n'config' => \\nn\\t3::TCA()->getSlugTCAConfig( ['title', 'header'] )<\/code><\/pre>\n<p><code>@param array|string $fields<\/code>\n<code>@return array<\/code><\/p>"},"c0d7381f13ea5db82019a74dd8d27021":{"_cs":"8b0553280b88915343058aa9b746ee7d","text":"<p>Inserts list of countries into a TCA.\nAlias to \\nn\\t3::Flexform->insertCountries( $config, $a = null );\nDescription and more examples there.<\/p>\n<p>Example in TCA:<\/p>\n<pre><code class=\"language-php\">'config' => [\n    'type' => 'select',\n    'itemsProcFunc' => 'nn\\t3\\Flexform->insertCountries',\n    'insertEmpty' => true,\n]<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"b42a9f8aa276fae7603b5eb4fb6cde44":{"_cs":"fb7d06a6096118da0019148285cef289","text":"<p>Inserts a flexform into a TCA.<\/p>\n<p>Example in TCA:<\/p>\n<pre><code class=\"language-php\">'config' => \\nn\\t3::TCA()->insertFlexform('FILE:EXT:nnsite\/Configuration\/FlexForm\/slickslider_options.xml');<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"7a13262cbc56641fb2cc1f67a12bdf89":{"_cs":"58368f55e850cdff66f36ef18b653af5","text":"<p>Inserts options from TypoScript into a TCA for selection.\nAlias to \\nn\\t3::Flexform->insertOptions( $config, $a = null );\nDescription and more examples there.<\/p>\n<p>Example in TCA:<\/p>\n<pre><code class=\"language-php\">'config' => [\n    'type' => 'select',\n    'itemsProcFunc' => 'nn\\t3\\Flexform->insertOptions',\n    'typoscriptPath' => 'plugin.tx_nnnewsroom.settings.templates',\n    \/\/'pageconfigPath' => 'tx_nnnewsroom.colors',\n]<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"13b7d771355b8da03848e7616029c56b":{"_cs":"a664ec67976ccbe03f672c249cb00cf0","text":"<p>Overwrite a configuration of the TCA, e.g. to override a <code>mask<\/code> field with a custom renderType.\nor to change core settings in the TCA on the <code>pages<\/code> or <code>tt_content<\/code> tables.\n<p>The following example sets\/overwrites the <code>config<\/code> array in the <code>TCA<\/code> at:<\/p>\n<pre><code class=\"language-php\">$GLOBALS['TCA']['tt_content']['columns']['mycol']['config'][...]<\/code><\/pre>\n<pre><code class=\"language-php\">\\nn\\t3::TCA()->setConfig('tt_content.columns.mycol', [\n    'renderType' => 'nnsiteIconCollection',\n    'iconconfig' => 'tx_nnsite.iconcollection',\n]);<\/code><\/pre>\n<p>See also <code>\\nn\\t3::TCA()->setContentConfig()<\/code> for a short version of this method when dealing with the\ntable <code>tt_content<\/code> and <code>\\nn\\t3::TCA()->setPagesConfig()<\/code> for the table <code>pages<\/code><\/p>\n<p><code>@return array<\/code><\/p>"},"3b678ed68f8c719286df6f003f4d7a73":{"_cs":"98296e37ff6bae7e3ab125b95fd730e0","text":"<p>Set or overwrite a configuration of the TCA for the table <code>tt_content<\/code>\n<p>This example overwrites in the <code>TCA<\/code> the <code>config<\/code> array of the table <code>tt_content<\/code> for:<\/p>\n<pre><code class=\"language-php\">$GLOBALS['TCA']['tt_content']['columns']['title']['config'][...]<\/code><\/pre>\n<pre><code class=\"language-php\">\\nn\\t3::TCA()->setContentConfig( 'header', 'text' ); \/\/ ['type'=>'text', 'rows'=>2]\n\\nn\\t3::TCA()->setContentConfig( 'header', 'text', 10 ); \/\/ ['type'=>'text', 'rows'=>10]\n\\nn\\t3::TCA()->setContentConfig( 'header', ['type'=>'text', 'rows'=>10] ); \/\/ ['type'=>'text', 'rows'=>10]<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"9d345272d0c1909c8fc87312aa833b73":{"_cs":"313733310a7250d4b10396da6f0f69a1","text":"<p>Set or overwrite a configuration of the TCA for the table <code>pages<\/code>\n<p>This example overwrites in the <code>TCA<\/code> the <code>config<\/code> array of the <code>pages<\/code> table for:<\/p>\n<pre><code class=\"language-php\">$GLOBALS['TCA']['pages']['columns']['title']['config'][...]<\/code><\/pre>\n<pre><code class=\"language-php\">\\nn\\t3::TCA()->setPagesConfig( 'title', 'text' ); \/\/ ['type'=>'text', 'rows'=>2]\n\\nn\\t3::TCA()->setPagesConfig( 'title', 'text', 10 ); \/\/ ['type'=>'text', 'rows'=>10]\n\\nn\\t3::TCA()->setPagesConfig( 'title', ['type'=>'text', 'rows'=>2] ); \/\/ ['type'=>'text', 'rows'=>2]<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"6273c8af7747d72e8d683dc8175af7c5":{"_cs":"065cfc38aef83ed15a59a13daa319d34","text":"<p>Render fluid templates and manipulate paths to templates in the view.<\/p>"},"56ea51bd555dfd87365f83dc901bb506":{"_cs":"2bfd4385e9cec166d1ebb35ad068bfd8","text":"<p>Finds a template in an array of possible templatePaths of the view<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Template()->findTemplate( $this->view, 'example.html' );<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"b1b42123718437501457c3c74a40772c":{"_cs":"102a53304bbebc3d08411e6d59524d8e","text":"<p>Gets the variables of the current view, ie:\nEverything set via assign() and assignMultiple().<\/p>\n<p>In the ViewHelper:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Template()->getVariables( $renderingContext );<\/code><\/pre>\n<p>In the controller:<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Template()->getVariables( $this->view );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"16c645e099de361a786830340d8c7bbd":{"_cs":"4ea7574c2c0d05fbd90d769f1359cd00","text":"<p>Merge paths to templates, partials, layout<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Template()->mergeTemplatePaths( $defaultTemplatePaths, $additionalTemplatePaths );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"c40d46e1aa720d763351fcf9ff737e7e":{"_cs":"ed612d79cb31eced331a2279199bf308","text":"<p>Removes the path of the controller name e.g. \/Main\/...\nfrom the template search.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Template()->removeControllerPath( $this->view );<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"8629bb32815ef45a73e4054ae74f20cb":{"_cs":"7ce2f7ccb5fdb36ec7e4b072f23dd6a3","text":"<p>Render a fluid template via StandAlone renderer<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Template()->render( 'template name', $vars, $templatePaths );\n\\nn\\t3::Template()->render( 'template name', $vars, 'myext' );\n\\nn\\t3::Template()->render( 'template name', $vars, 'tx_myext_myplugin' );\n\\nn\\t3::Template()->render( 'fileadmin\/Fluid\/Demo.html', $vars );<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"d1be62d6af4e6935d4ff5b8ec5d3f90c":{"_cs":"94325c59f95b53188a57a48720e5a77e","text":"<p>simply render fluid code via StandAlone renderer<\/p>\n<pre><code class=\"language-php\"> \\nn\\t3::Template()->renderHtml( '{_all->f:debug()} Test: {test}', $vars );\n    \\nn\\t3::Template()->renderHtml( ['Name: {name}', 'Test: {test}'], $vars );\n    \\nn\\t3::Template()->renderHtml( ['name'=>'{firstname} {lastname}', 'test'=>'{test}'], $vars );<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"70ea6b1ee88aadd7807783d428d3c5ec":{"_cs":"21e16d37a435bc4ecfb9bf52b091d621","text":"<p>Sets templates, partials and layouts for a view.\n$additionalTemplatePaths can be passed to prioritize paths<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Template()->setTemplatePaths( $this->view, $templatePaths );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"eaa5374ae7d32e830a80fa0f66906db9":{"_cs":"c33764c60874dc763fc5de85e392a6c1","text":"<p>All about the Typo3 frontend.\nMethods to initialize the FE from the backend context, access the\ncObj and cObjData etc.<\/p>"},"4d4c2567b17d5f156867eebc18b21d14":{"_cs":"c1dcc43174a5924454fe57ead38672a6","text":"<p>Bootstrap Typo3<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Tsfe()->bootstrap();\n\\nn\\t3::Tsfe()->bootstrap( ['vendorName'=>'Nng', 'extensionName'=>'Nnhelpers', 'pluginName'=>'Foo'] );<\/code><\/pre>"},"e4482ed51dc2cf29660c02db334d59f1":{"_cs":"978aae22307b0e92682ba538c7a5c4f4","text":"<p>$GLOBALS['TSFE']->getcObj.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Tsfe()->cObj()<\/code><\/pre>\n<p><code>@return \\TYPO3\\CMS\\Frontend\\ContentObject\\ContentObjectRenderer<\/code><\/p>"},"ab73fbe1ad8eb5c31e1960f9b7f32fb3":{"_cs":"fb3d8ddebdd1be30ac11f9374a76f2a7","text":"<p>$GLOBALS['TSFE']->cObj->get data.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Tsfe()->cObjData(); => array with DB-row of the current content element.\n\\nn\\t3::Tsfe()->cObjData('uid'); => uid of the current content element<\/code><\/pre>\n<p><code>@return mixed<\/code><\/p>"},"3499c02056af1b425bb330d53617ce9a":{"_cs":"a6d98484820aca14dc5a704431c19f62","text":"<p>Render a TypoScript object.\nPreviously: <code>$GLOBALS['TSFE']->cObj->cObjGetSingle()<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Tsfe()->cObjGetSingle('IMG_RESOURCE', ['file'=>'image.jpg', 'file.'=>['maxWidth'=>200]] )<\/code><\/pre>"},"664ca83fb2cfb2d1f2f73900c9615b34":{"_cs":"db23ea0babc8ca4fbc07adff7702550d","text":"<p>Get$GLOBALS['TSFE'].\nInitialize if not present (because in BE).<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Tsfe()->get()\n\\nn\\t3::Tsfe()->get( $pid )<\/code><\/pre>\n<p><code>@return \\TYPO3\\CMS\\FrontendController\\TypoScriptFrontendController<\/code><\/p>"},"b86cd76c92c569e0153ae7df030468ed":{"_cs":"895ce8ebafca9cf3ff33c345f1e9e6a1","text":"<p>Initialize the TSFE.\nAlso works in the backend context, e.g. within a\nBackend module or scheduler job.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Tsfe()->init();<\/code><\/pre>"},"b5e9d6384e5f49ce664151f449659322":{"_cs":"7c27ef45cd90f96241e8564ab3111532","text":"<p>Methods for parsing and converting TypoScript<\/p>"},"0c71150023918deb2d34e96691f22f4d":{"_cs":"96569e1b7eb85f164bea83610b5c424c","text":"<p>AddPageConfig.\nAlias to <code>\\nn\\t3::Registry()->addPageConfig( $str );<\/code><\/p>\n<pre><code class=\"language-php\">\\nn\\t3::TypoScript()->addPageConfig( 'test.was = 10' );\n\\nn\\t3::TypoScript()->addPageConfig( '<INCLUDE_TYPOSCRIPT: source=\"FILE:EXT:extname\/Configuration\/TypoScript\/page.txt\">' );\n\\nn\\t3::TypoScript()->addPageConfig( '@import \"EXT:extname\/Configuration\/TypoScript\/page.ts\"' );<\/code><\/pre>\n<p><code>@return void<\/code><\/p>"},"6e7358de7a3f98c7b4dee7f59959b2bf":{"_cs":"fa462d20bb1eb38422a8b7f7ab09d8d1","text":"<p>Convert TypoScript 'name.' syntax to normal array.\nFacilitates access<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::TypoScript()->convertToPlainArray(['example'=>'test', 'example.'=>'here']);<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"2daaeabf56cc5921ef196fc31317024e":{"_cs":"cb702677be864292b750b7a48a11f5a2","text":"<p>Converts a text into a TypoScript array.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::TypoScript()->fromString( 'lib.test { example = 10 }' ); => ['lib'=>['test'=>['example'=>10]]\n\\nn\\t3::TypoScript()->fromString( 'lib.test { example = 10 }', $mergeSetup );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"636896e227314ad54af713ee890689ec":{"_cs":"10cb4d47466e5b8478b48fe0dc51fbf1","text":"<p>Everything that is important and helpful on the subject of videos.<\/p>"},"31f6c2b3d7208774d89eaf406a6a5d63":{"_cs":"becc6005fd659b8b235102598b88b244","text":"<p>Return the embedding URL based on the streaming platform.\nClassically, the URL used in the src attribute of the &lt;iframe&gt;\nis used.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Video()->getEmbedUrl( 'youtube', 'nShlloNgM2E' );\n\\nn\\t3::Video()->getEmbedUrl( 'https:\/\/www.youtube.com\/watch?v=wu55ZG97zeI&feature=youtu.be' );<\/code><\/pre>\n<p>Also acts as a ViewHelper:<\/p>\n<pre><code class=\"language-php\">{my.videourl->nnt3:video.embedUrl()}<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"35ec1778e170c8337525b8a6c682a5fd":{"_cs":"68f35a10e6ada7a191cb3633765ad9c1","text":"<p>Returns an array with info about the streaming platform and code to embed a video<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Video()->getExternalType( 'https:\/\/www.youtube.com\/watch\/abTAgsdjA' );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"9f465e5a2477e0b6bc02e5f7133a2170":{"_cs":"635844a2d4d4aa29b13010a85e48ec57","text":"<p>Link URL to the video on the external platform.\ne.g. to display an external link to the video<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Video()->getWatchUrl( $fileReference );\n\\nn\\t3::Video()->getWatchUrl( 'youtube', 'nShlloNgM2E' );\n\\nn\\t3::Video()->getWatchUrl( 'https:\/\/www.youtube.com\/watch?v=wu55ZG97zeI&feature=youtu.be' );\n\n\/\/ => https:\/\/www.youtube-nocookie.com\/watch?v=kV8v2GKC8WA<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"506fd46ef411f81b7029cdb7003269b9":{"_cs":"fead126eca23eeef7f77f1f65ff2333d","text":"<p>Perceives whether the URL is an external video on YouTube or Vimeo.\nReturns an array with data to embed.<\/p>\n<pre><code class=\"language-php\">\\nn\\t3::Video()->isExternal( 'https:\/\/www.youtube.com\/...' );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"ba150394d863a856e06558965c4346cc":{"_cs":"31b04fe594fd34c03ba7b1122388f733","text":"<p>Various methods for parsing PHP annotations<\/p>"},"8808c4609a282639d7383b05c0a423a3":{"_cs":"97a35a6057344dae2a3357bace2368a2","text":"<p>Parse annotations and return an array with the \"normal\" comment block and the individual annotations from a DocComment.\nannotations from a DocComment.<\/p>\n<pre><code class=\"language-php\">\\Nng\\Nnhelpers\\AnnotationHelper::parse( '...' );<\/code><\/pre>\n<p>Fetch only annotations that are in a given namespace.\nIn this example, only annotations that start with <code>@nn\\rest<\/code> are fetched.\ne.g. <code>@nn\\rest\\access ...<\/code><\/p>\n<pre><code class=\"language-php\">\\Nng\\Nnhelpers\\AnnotationHelper::parse( '...', 'nn\\rest' );\n\\Nng\\NnhelpersHelpersAnnotationHelper::parse( '...', ['nn\\rest', 'whatever'] );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"9c003c53e5dbab9384f16dae863ac19b":{"_cs":"4b9a29ecfc773f7ec4f87aa7f9eff21b","text":"<p>Various methods for parsing PHP source code and comments in the\nSource Code (Annotations). Objective: to create automated documentation from the comments\nin the PHP code.<\/p>\n<p>Examples of use including rendering of the template<\/p>\n<p>In the controller with <strong>rendering by fluid:<\/strong><\/p>\n<pre><code class=\"language-php\">$path = \\nn\\t3::Environment()->extPath('myext') . 'Classes\/Utilities\/';\n$doc = \\Nng\\Nnhelpers\\DocumentationHelper::parseFolder( $path );\n$this->view->assign('doc', $doc);<\/code><\/pre>\n<p>Generating the Typo3 \/ <strong>Sphinx ReST doc<\/strong> via a custom fluid template:<\/p>\n<pre><code class=\"language-php\">$path = \\nn\\t3::Environment()->extPath('myext') . 'Classes\/Utilities\/';\n$doc = \\Nng\\Nnhelpers\\DocumentationHelper::parseFolder( $path );\n\nforeach ($doc as $className=>$infos) {\n  $rendering = $nn\\t3::Template()->render(\n    'EXT:myext\/Resources\/Private\/Backend\/Templates\/Documentation\/ClassTemplate.html', [\n      'infos' => $infos\n    ]\n  );\n\n  $filename = $infos['fileName'] . '.rst';\n  $file = \\nn\\t3::File()->absPath('EXT:myext\/Documentation\/Utilities\/Classes\/' . $filename);\n  $result = file_put_contents( $file, $rendering );\n}<\/code><\/pre>"},"df9197189f332ec1694f93a51fbc1d5d":{"_cs":"8b2f083c4b756213356a991c6853a02f","text":"<p>Get class name as string including full namespace from a PHP file.\nReturns e.g. <code>Nng\\Classes\\MyClass<\/code>\n<pre><code class=\"language-php\">\\Nng\\Nnhelpers\\Helpers\\DocumentationHelper::getClassNameFromFile( 'Classes\/MyClass.php' );<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"2010009de4ee16a562898e956fd4a8bc":{"_cs":"cf20af6a8e0aab3688c0ddf1e2808897","text":"<p>Get the source code of a method.<\/p>\n<p>Returns the \"raw\" PHP code of the method of a class.<\/p>\n<pre><code class=\"language-php\">\\Nng\\Nnhelpers\\Helpers\\DocumentationHelper::parseClass( \\Nng\\Classes\\MyClass::class, 'myMethodName' );<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"258a61ef8592be7b4e51de50a43f1050":{"_cs":"5f2920ab29dea6780ae857391ec6f2e1","text":"<p>Get info about a specific class<\/p>\n<p>is similar to <code>parseFile()<\/code> - but you have to pass the actual class name.\nIf you only know the path to the PHP file, use <code>parseFile()<\/code>\n<pre><code class=\"language-php\">\\Nng\\Nnhelpers\\Helpers\\DocumentationHelper::parseClass( \\Nng\\Classes\\MyClass::class );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"346205376b3a61dcfe7d7477d2e245e5":{"_cs":"6e613983bce9b78641c643d49bf00e28","text":"<p>Get all info about a single PHP file<\/p>\n<p>Parses the comment (annotation) above the class definition and optionally all methods of the class.\nReturns an array which also lists the arguments\/parameters of each method.\n<p>Markdown can be used in the annotations, the markdown will be automatically converted to HTML code.<\/p>\n<pre><code class=\"language-php\">\\Nng\\Nnhelpers\\Helpers\\DocumentationHelper::parseFile( 'Path\/Classes\/MyClass.php' );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"c21cf555ea2756e4aec3bb151621b250":{"_cs":"6bf4cc8b4fc57f554d7b24ab67d0de22","text":"<p>Parse a folder (recursively) for classes with annotations.\nReturns an array with information about each class and its methods.\n<p>The annotations above the class methods can be formatted in Markdown, they are automatically converted to HTML with matching &lt;code&gt;&lt;pre>&lt;\/code&gt; and &lt;code&gt;&lt;code&gt;&lt;\/code&gt; tags.<\/p>\n<pre><code class=\"language-php\">\\Nng\\Nnhelpers\\Helpers\\DocumentationHelper::parseFolder( 'Path\/To\/Classes\/' );\n\\Nng\\Nnhelpers\\DocumentationHelper::parseFolder( 'EXT:myext\/Classes\/ViewHelpers\/' );\n\\Nng\\Nnhelpers\\DocumentationHelper::parseFolder( 'Path\/Somewhere\/', ['recursive'=>false, 'suffix'=>'php', 'parseMethods'=>false] );<\/code><\/pre>\n<p><code>@return array<\/code><\/p>"},"4010194d70b4b755d43e0104c989ad6b":{"_cs":"184498ab51ec5a6dd780e09c123cd5f9","text":"<p>Extension for the Extension Manager form.<\/p>"},"a48f5accf12abe61066f37a151a78a3c":{"_cs":"d4065f0b7e975ffaaf6fbeef5ac82388","text":"<p>Show multiline text field \/ textarea in Extension Manager configurator.\nUse this line in <code>ext_conf_template.txt<\/code> of your own extension:<\/p>\n<pre><code class=\"language-php\"># cat=basic; type=user[Nng\\Nnhelpers\\Helpers\\ExtConfTemplateHelper->textfield]; label=my label.\nmyfieldName =<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"d71395c51b784a966d20adc47c902067":{"_cs":"17dc18d3cedd3fcb07ec1d6f8558a030","text":"<p>The script helps convert and parse JavaScript object strings into an array.<\/p>\n<pre><code class=\"language-php\">$data = \\Nng\\Nnhelpers\\JsonHelper::decode( \"{title:'Test', cat:[2,3,4]}\" );\nprint_r($data);<\/code><\/pre>\n<p>The helper allows to use the JavaScript object notation in TypoScript and convert it to an array via the <code>{nnt3:parse.json()}<\/code> ViewHelper.\nThis is handy if, for example, slider configurations or other JavaScript objects should be defined in TypoScript to be used later in JavaScript.<\/p>\n<p>Another application example: You want to use the \"normal\" JS syntax in a <code>.json<\/code> file instead of the JSON syntax.\nLet's look at an example. This text was written to a text file and is to be parsed by PHP:<\/p>\n<pre><code class=\"language-php\">\/\/ Contents of a text file.\n{\n    example: ['one', 'two', 'three']\n}<\/code><\/pre>\n<p>PHP would report an error in this example with <code>json_decode()<\/code>: The string contains comments, wraps and the keys and values are not enclosed in double quotes. The JsonHelper or the ViewHelper <code>$jsonHelper->decode()<\/code> can convert it without any problems.<\/p>\n<p>This is how you could define a JS object in the TypoScript setup:<\/p>\n<pre><code class=\"language-php\">\/\/ Content in TS setup.\nmy_conf.data (\n  {\n     dots: true,\n     sizes: [1, 2, 3]\n  }\n)<\/code><\/pre>\n<p>The mixture is a bit irritating: <code>my_conf.data (...)<\/code> opens a section for multiline code in TypoScript.\nBetween the <code>(...)<\/code> there is a \"normal\" JavaScript object.\nThis can be easily used as an array in the Fluid template:<\/p>\n<pre><code class=\"language-php\">{nnt3:ts.setup(path:'my_conf.data')->f:variable(name:'myConfig')}\n{myConfig->nnt3:parse.json()->f:debug()}<\/code><\/pre>\n<p>Or append as a data attribute to an element to parse it later via JavaScript:<\/p>\n<pre><code class=\"language-php\">{nnt3:ts.setup(path:'my_conf.data')->f:variable(name:'myConfig')}\n<div data-config=\"{myConfig->nnt3:parse.json()->nnt3:format.attrEncode()}\">...<\/div><\/code><\/pre>\n<p>This script is mostly based on the work of <a href=\"https:\/\/bit.ly\/3eZuNu2\">https:\/\/bit.ly\/3eZuNu2<\/a> and has been\nhas been optimized for PHP 7+ by us.<\/p> All credit to that direction please."},"ce872191eb3b86a46a11682df7d60d60":{"_cs":"bb1e9ed1cab7c2c2b05c77df2e271031","text":"<p>Converts a JS object string into an array.<\/p>\n<pre><code class=\"language-php\">$data = \\Nng\\Nnhelpers\\JsonHelper::decode( \"{title:'Test', cat:[2,3,4]}\" );\nprint_r($data);<\/code><\/pre>\n<p>The PHP function <code>json_decode()<\/code> only works with JSON syntax: <code>{\"key\": \"value\"}<\/code>. In JSON neither line breaks nor comments are allowed.\nThis function can also be used to parse strings in JavaScript notation.<\/p>\n<p><code>@return array|string<\/code><\/p>"},"75240af33f99c08dbca22b5d761eeb8d":{"_cs":"4d9c1b63982eee77328e289bae4474be","text":"<p>Converts a variable to JSON format.\nRelic of the original class, probably from a time when <code>json_encode()<\/code> did not exist.<\/p>\n<pre><code class=\"language-php\">\\Nng\\Nnhelpers\\JsonHelper::encode(['a'=>1, 'b'=>2]);<\/code><\/pre>\n<p><code>@return string;<\/code><\/p>"},"c9e8acb181911dfb38a77bdfb44324d3":{"_cs":"79cfc56592c4f171fee6ded8baecb5dc","text":"<p>Removes comments from the code and parses the string.<\/p>\n<pre><code class=\"language-php\">\\Nng\\Nnhelpers\\JsonHelper::removeCommentsAndDecode( \"\/\/comments\\n{title:'Test', cat:[2,3,4]}\" )<\/code><\/pre>\n<p><code>@return array|string<\/code><\/p>"},"77179fd9733031c0ea655e5777bfc5a6":{"_cs":"7be2ee0283640ae2f0b92d253be5f616","text":"<p>A wrapper to parse markdown and translate it to HTML and vice versa.<\/p>"},"b12586dc7a6eaa921e0b19f669471049":{"_cs":"f31e02919716c61a1b97ff9bc176aea4","text":"<p>Convert comment string to readable HTML string.\nComments can use Markdown.\nRemoves '' and '' etc.<\/p>\n<pre><code class=\"language-php\">\\Nng\\Nnhelpers\\MarkdownHelper::parseComment( '...' );<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"bb5206b11152e6fdb6fb768b3012f36f":{"_cs":"642fd625ccd7dcba9bf8ca5f0d995972","text":"<p>Removes the comment asterisks in a text.<\/p>\n<pre><code class=\"language-php\">\\Nng\\Nnhelpers\\MarkdownHelper::removeAsterisks( '...' );<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"654e64893c8863bd492b3f805a893b5b":{"_cs":"db068c99fe069c8382e3c0795ac4de71","text":"<p>Convert a text containing markdown to HTML<\/p>\n<pre><code class=\"language-php\">\\Nng\\Nnhelpers\\MarkdownHelper::toHTML( '...' );<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"e7fa18472528393a6580a93e14dfe5e2":{"_cs":"d7a71a23bd8ac7ae3ed8aa4217dec685","text":"<p><strong>Translation management via Deep-L.<\/strong><\/p>\n<p>For this function to be usable, a Deep-L Api key must be stored in the extension manager of <code>nnhelpers<\/code>\nThe key is free of charge and allows the translation of 500,000 characters per month.<\/p>\n<pre><code class=\"language-php\">\/\/ Activate translator\n$translationHelper = \\nn\\t3::injectClass( \\Nng\\Nnhelpers\\Helpers\\TranslationHelper::class );\n\n\/\/ allow translation via Deep-L\n$translationHelper->setEnableApi( true );\n\/\/ set target language\n$translationHelper->setTargetLanguage( 'EN' );\n\n\/\/ Allow max. Number of translations allowed (for debugging purposes)\n$translationHelper->setMaxTranslations( 2 );\n\n\/\/ Path where to store \/ cache the l18n files\n$translationHelper->setL18nFolderpath( 'EXT:nnhelpers\/Resources\/Private\/Language\/' );\n\n\/\/ start translation\n$text = $translationHelper->translate('my.example.key', 'This is the text to translate');<\/code><\/pre>"},"d767ca6998e97471bb32b88c9511d5e3":{"_cs":"94b0f9f7cf49998f69c89e0f846c55b4","text":"<p>Creates a unique hash from the key needed to identify a text.\nEach text has the same key in all languages.<\/p>\n<pre><code class=\"language-php\">$translationHelper->createKeyHash( '12345' );\n$translationHelper->createKeyHash( ['my', 'key', 'array'] );<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"22b498a63972c78dddb12879de903730":{"_cs":"053d7231e858bb363e93877bf0874ac6","text":"<p>Creates a unique hash \/ checksum from the text.\nThe passed text is always the base language. If the text changes in the base language, the method returns a different checksum.\nThis detects when a text needs to be retranslated. Pure changes to whitespaces and tags are ignored.<\/p>\n<pre><code class=\"language-php\">$translationHelper->createKeyHash( '12345' );\n$translationHelper->createKeyHash( ['my', 'key', 'array'] );<\/code><\/pre>\n<p><code>@return string<\/code><\/p>"},"2e1314920a48f9af0a34dc8c683de5ff":{"_cs":"2cebc070e2448cf67cbfe2401b2c98ad","text":"<p>Returns whether the API is enabled<\/p>\n<pre><code class=\"language-php\">$translationHelper->getEnableApi(); \/\/ default: false<\/code><\/pre>\n<p><code>@return boolean<\/code><\/p>"}}